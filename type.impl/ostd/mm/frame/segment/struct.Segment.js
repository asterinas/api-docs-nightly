(function() {
    var type_impls = Object.fromEntries([["ostd",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Segment%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#57-70\">Source</a><a href=\"#impl-Clone-for-Segment%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"ostd/mm/frame/meta/trait.AnyFrameMeta.html\" title=\"trait ostd::mm::frame::meta::AnyFrameMeta\">AnyFrameMeta</a> + ?Sized&gt; Clone for <a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#58-69\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a>Read more</a></div></details></div></details>","Clone","ostd::mm::frame::segment::USegment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Segment%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#32-36\">Source</a><a href=\"#impl-Debug-for-Segment%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"ostd/mm/frame/meta/trait.AnyFrameMeta.html\" title=\"trait ostd::mm::frame::meta::AnyFrameMeta\">AnyFrameMeta</a> + ?Sized&gt; Debug for <a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#33-35\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Debug","ostd::mm::frame::segment::USegment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Segment%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#47-55\">Source</a><a href=\"#impl-Drop-for-Segment%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"ostd/mm/frame/meta/trait.AnyFrameMeta.html\" title=\"trait ostd::mm::frame::meta::AnyFrameMeta\">AnyFrameMeta</a> + ?Sized&gt; Drop for <a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#48-54\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a>Read more</a></div></details></div></details>","Drop","ostd::mm::frame::segment::USegment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CFrame%3CM%3E%3E-for-Segment%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#205-214\">Source</a><a href=\"#impl-From%3CFrame%3CM%3E%3E-for-Segment%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"ostd/mm/frame/meta/trait.AnyFrameMeta.html\" title=\"trait ostd::mm::frame::meta::AnyFrameMeta\">AnyFrameMeta</a> + ?Sized&gt; From&lt;<a class=\"struct\" href=\"ostd/mm/frame/struct.Frame.html\" title=\"struct ostd::mm::frame::Frame\">Frame</a>&lt;M&gt;&gt; for <a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#206-213\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(frame: <a class=\"struct\" href=\"ostd/mm/frame/struct.Frame.html\" title=\"struct ostd::mm::frame::Frame\">Frame</a>&lt;M&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Frame<M>>","ostd::mm::frame::segment::USegment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasPaddr-for-Segment%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#193-197\">Source</a><a href=\"#impl-HasPaddr-for-Segment%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"ostd/mm/frame/meta/trait.AnyFrameMeta.html\" title=\"trait ostd::mm::frame::meta::AnyFrameMeta\">AnyFrameMeta</a> + ?Sized&gt; <a class=\"trait\" href=\"ostd/mm/trait.HasPaddr.html\" title=\"trait ostd::mm::HasPaddr\">HasPaddr</a> for <a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.paddr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#194-196\">Source</a><a href=\"#method.paddr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ostd/mm/trait.HasPaddr.html#tymethod.paddr\" class=\"fn\">paddr</a>(&amp;self) -&gt; <a class=\"type\" href=\"ostd/mm/type.Paddr.html\" title=\"type ostd::mm::Paddr\">Paddr</a></h4></section></summary><div class='docblock'>Returns the start physical address of the memory object.</div></details></div></details>","HasPaddr","ostd::mm::frame::segment::USegment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSize-for-Segment%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#199-203\">Source</a><a href=\"#impl-HasSize-for-Segment%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"ostd/mm/frame/meta/trait.AnyFrameMeta.html\" title=\"trait ostd::mm::frame::meta::AnyFrameMeta\">AnyFrameMeta</a> + ?Sized&gt; <a class=\"trait\" href=\"ostd/mm/trait.HasSize.html\" title=\"trait ostd::mm::HasSize\">HasSize</a> for <a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.size\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#200-202\">Source</a><a href=\"#method.size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ostd/mm/trait.HasSize.html#tymethod.size\" class=\"fn\">size</a>(&amp;self) -&gt; usize</h4></section></summary><div class='docblock'>Returns the size of the memory object in bytes.</div></details></div></details>","HasSize","ostd::mm::frame::segment::USegment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasVmReaderWriter-for-Segment%3CUM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/untyped.rs.html#96\">Source</a><a href=\"#impl-HasVmReaderWriter-for-Segment%3CUM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;UM: <a class=\"trait\" href=\"ostd/mm/frame/untyped/trait.AnyUFrameMeta.html\" title=\"trait ostd::mm::frame::untyped::AnyUFrameMeta\">AnyUFrameMeta</a> + ?Sized&gt; <a class=\"trait\" href=\"ostd/mm/io_util/trait.HasVmReaderWriter.html\" title=\"trait ostd::mm::io_util::HasVmReaderWriter\">HasVmReaderWriter</a> for <a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;UM&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Types\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/untyped.rs.html#96\">Source</a><a href=\"#associatedtype.Types\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ostd/mm/io_util/trait.HasVmReaderWriter.html#associatedtype.Types\" class=\"associatedtype\">Types</a> = <a class=\"enum\" href=\"ostd/mm/io_util/enum.VmReaderWriterIdentity.html\" title=\"enum ostd::mm::io_util::VmReaderWriterIdentity\">VmReaderWriterIdentity</a></h4></section></summary><div class='docblock'>A marker type that denotes the return types of <a href=\"ostd/mm/io_util/trait.HasVmReaderWriter.html#tymethod.reader\"><code>Self::reader</code></a> and <a href=\"ostd/mm/io_util/trait.HasVmReaderWriter.html#tymethod.writer\"><code>Self::writer</code></a>. <a href=\"ostd/mm/io_util/trait.HasVmReaderWriter.html#associatedtype.Types\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reader\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/untyped.rs.html#96\">Source</a><a href=\"#method.reader\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ostd/mm/io_util/trait.HasVmReaderWriter.html#tymethod.reader\" class=\"fn\">reader</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ostd/mm/io/struct.VmReader.html\" title=\"struct ostd::mm::io::VmReader\">VmReader</a>&lt;'_, <a class=\"enum\" href=\"ostd/mm/io/enum.Infallible.html\" title=\"enum ostd::mm::io::Infallible\">Infallible</a>&gt;</h4></section></summary><div class='docblock'>Returns a reader to read data from it.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/untyped.rs.html#96\">Source</a><a href=\"#method.writer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ostd/mm/io_util/trait.HasVmReaderWriter.html#tymethod.writer\" class=\"fn\">writer</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ostd/mm/io/struct.VmWriter.html\" title=\"struct ostd::mm::io::VmWriter\">VmWriter</a>&lt;'_, <a class=\"enum\" href=\"ostd/mm/io/enum.Infallible.html\" title=\"enum ostd::mm::io::Infallible\">Infallible</a>&gt;</h4></section></summary><div class='docblock'>Returns a writer to write data to it.</div></details></div></details>","HasVmReaderWriter","ostd::mm::frame::segment::USegment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Iterator-for-Segment%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#216-232\">Source</a><a href=\"#impl-Iterator-for-Segment%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"ostd/mm/frame/meta/trait.AnyFrameMeta.html\" title=\"trait ostd::mm::frame::meta::AnyFrameMeta\">AnyFrameMeta</a> + ?Sized&gt; Iterator for <a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#217\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = <a class=\"struct\" href=\"ostd/mm/frame/struct.Frame.html\" title=\"struct ostd::mm::frame::Frame\">Frame</a>&lt;M&gt;</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#219-231\">Source</a><a href=\"#method.next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">next</a>(&amp;mut self) -&gt; Option&lt;Self::Item&gt;</h4></section></summary><div class='docblock'>Advances the iterator and returns the next value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_chunk\" class=\"method trait-impl\"><a href=\"#method.next_chunk\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">next_chunk</a>&lt;const N: usize&gt;(\n    &amp;mut self,\n) -&gt; Result&lt;[Self::Item; N], IntoIter&lt;Self::Item, N&gt;&gt;<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_next_chunk</code>)</span></div></span><div class='docblock'>Advances the iterator and returns an array containing the next <code>N</code> values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; (usize, Option&lt;usize&gt;)</h4></section></summary><div class='docblock'>Returns the bounds on the remaining length of the iterator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">count</a>(self) -&gt; usize<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Consumes the iterator, counting the number of iterations and returning it. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.last\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">last</a>(self) -&gt; Option&lt;Self::Item&gt;<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Consumes the iterator, returning the last element. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.advance_by\" class=\"method trait-impl\"><a href=\"#method.advance_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">advance_by</a>(&amp;mut self, n: usize) -&gt; Result&lt;(), NonZero&lt;usize&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_advance_by</code>)</span></div></span><div class='docblock'>Advances the iterator by <code>n</code> elements. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nth\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.nth\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">nth</a>(&amp;mut self, n: usize) -&gt; Option&lt;Self::Item&gt;</h4></section></summary><div class='docblock'>Returns the <code>n</code>th element of the iterator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.step_by\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#method.step_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">step_by</a>(self, step: usize) -&gt; StepBy&lt;Self&gt;<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chain</a>&lt;U&gt;(self, other: U) -&gt; Chain&lt;Self, &lt;U as IntoIterator&gt;::IntoIter&gt;<div class=\"where\">where\n    Self: Sized,\n    U: IntoIterator&lt;Item = Self::Item&gt;,</div></h4></section></summary><div class='docblock'>Takes two iterators and creates a new iterator over both in sequence. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.zip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zip</a>&lt;U&gt;(self, other: U) -&gt; Zip&lt;Self, &lt;U as IntoIterator&gt;::IntoIter&gt;<div class=\"where\">where\n    Self: Sized,\n    U: IntoIterator,</div></h4></section></summary><div class='docblock'>‘Zips up’ two iterators into a single iterator of pairs. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersperse\" class=\"method trait-impl\"><a href=\"#method.intersperse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersperse</a>(self, separator: Self::Item) -&gt; Intersperse&lt;Self&gt;<div class=\"where\">where\n    Self: Sized,\n    Self::Item: Clone,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_intersperse</code>)</span></div></span><div class='docblock'>Creates a new iterator which places a copy of <code>separator</code> between adjacent\nitems of the original iterator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersperse_with\" class=\"method trait-impl\"><a href=\"#method.intersperse_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersperse_with</a>&lt;G&gt;(self, separator: G) -&gt; IntersperseWith&lt;Self, G&gt;<div class=\"where\">where\n    Self: Sized,\n    G: FnMut() -&gt; Self::Item,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_intersperse</code>)</span></div></span><div class='docblock'>Creates a new iterator which places an item generated by <code>separator</code>\nbetween adjacent items of the original iterator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>&lt;B, F&gt;(self, f: F) -&gt; Map&lt;Self, F&gt;<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(Self::Item) -&gt; B,</div></h4></section></summary><div class='docblock'>Takes a closure and creates an iterator which calls that closure on each\nelement. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.for_each\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.for_each\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">for_each</a>&lt;F&gt;(self, f: F)<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(Self::Item),</div></h4></section></summary><div class='docblock'>Calls a closure on each element of an iterator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; Filter&lt;Self, P&gt;<div class=\"where\">where\n    Self: Sized,\n    P: FnMut(&amp;Self::Item) -&gt; bool,</div></h4></section></summary><div class='docblock'>Creates an iterator which uses a closure to determine if an element\nshould be yielded. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_map\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.filter_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">filter_map</a>&lt;B, F&gt;(self, f: F) -&gt; FilterMap&lt;Self, F&gt;<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(Self::Item) -&gt; Option&lt;B&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator that both filters and maps. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enumerate\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.enumerate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">enumerate</a>(self) -&gt; Enumerate&lt;Self&gt;<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Creates an iterator which gives the current iteration count as well as\nthe next value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peekable\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.peekable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">peekable</a>(self) -&gt; Peekable&lt;Self&gt;<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Creates an iterator which can use the <a href=\"Peekable::peek\"><code>peek</code></a> and <a href=\"Peekable::peek_mut\"><code>peek_mut</code></a> methods\nto look at the next element of the iterator without consuming it. See\ntheir documentation for more information. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip_while\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.skip_while\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">skip_while</a>&lt;P&gt;(self, predicate: P) -&gt; SkipWhile&lt;Self, P&gt;<div class=\"where\">where\n    Self: Sized,\n    P: FnMut(&amp;Self::Item) -&gt; bool,</div></h4></section></summary><div class='docblock'>Creates an iterator that <a href=\"Iterator::skip\"><code>skip</code></a>s elements based on a predicate. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_while\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.take_while\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">take_while</a>&lt;P&gt;(self, predicate: P) -&gt; TakeWhile&lt;Self, P&gt;<div class=\"where\">where\n    Self: Sized,\n    P: FnMut(&amp;Self::Item) -&gt; bool,</div></h4></section></summary><div class='docblock'>Creates an iterator that yields elements based on a predicate. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_while\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.57.0\">1.57.0</span><a href=\"#method.map_while\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_while</a>&lt;B, P&gt;(self, predicate: P) -&gt; MapWhile&lt;Self, P&gt;<div class=\"where\">where\n    Self: Sized,\n    P: FnMut(Self::Item) -&gt; Option&lt;B&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator that both yields elements based on a predicate and maps. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.skip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">skip</a>(self, n: usize) -&gt; Skip&lt;Self&gt;<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Creates an iterator that skips the first <code>n</code> elements. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">take</a>(self, n: usize) -&gt; Take&lt;Self&gt;<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Creates an iterator that yields the first <code>n</code> elements, or fewer\nif the underlying iterator ends sooner. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.scan\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.scan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">scan</a>&lt;St, B, F&gt;(self, initial_state: St, f: F) -&gt; Scan&lt;Self, St, F&gt;<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(&amp;mut St, Self::Item) -&gt; Option&lt;B&gt;,</div></h4></section></summary><div class='docblock'>An iterator adapter which, like <a href=\"Iterator::fold\"><code>fold</code></a>, holds internal state, but\nunlike <a href=\"Iterator::fold\"><code>fold</code></a>, produces a new iterator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flat_map\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.flat_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">flat_map</a>&lt;U, F&gt;(self, f: F) -&gt; FlatMap&lt;Self, U, F&gt;<div class=\"where\">where\n    Self: Sized,\n    U: IntoIterator,\n    F: FnMut(Self::Item) -&gt; U,</div></h4></section></summary><div class='docblock'>Creates an iterator that works like map, but flattens nested structure. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_windows\" class=\"method trait-impl\"><a href=\"#method.map_windows\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_windows</a>&lt;F, R, const N: usize&gt;(self, f: F) -&gt; MapWindows&lt;Self, F, N&gt;<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(&amp;[Self::Item; N]) -&gt; R,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_map_windows</code>)</span></div></span><div class='docblock'>Calls the given function <code>f</code> for each contiguous window of size <code>N</code> over\n<code>self</code> and returns an iterator over the outputs of <code>f</code>. Like <a href=\"slice::windows\"><code>slice::windows()</code></a>,\nthe windows during mapping overlap as well. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fuse\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.fuse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fuse</a>(self) -&gt; Fuse&lt;Self&gt;<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Creates an iterator which ends after the first [<code>None</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.inspect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; Inspect&lt;Self, F&gt;<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(&amp;Self::Item),</div></h4></section></summary><div class='docblock'>Does something with each element of an iterator, passing the value on. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">by_ref</a>(&amp;mut self) -&gt; &amp;mut Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Borrows an iterator, rather than consuming it. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.collect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect</a>&lt;B&gt;(self) -&gt; B<div class=\"where\">where\n    B: FromIterator&lt;Self::Item&gt;,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Transforms an iterator into a collection. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_into\" class=\"method trait-impl\"><a href=\"#method.collect_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_into</a>&lt;E&gt;(self, collection: &amp;mut E) -&gt; &amp;mut E<div class=\"where\">where\n    E: Extend&lt;Self::Item&gt;,\n    Self: Sized,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_collect_into</code>)</span></div></span><div class='docblock'>Collects all the items from an iterator into a collection. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partition\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.partition\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">partition</a>&lt;B, F&gt;(self, f: F) -&gt; (B, B)<div class=\"where\">where\n    Self: Sized,\n    B: Default + Extend&lt;Self::Item&gt;,\n    F: FnMut(&amp;Self::Item) -&gt; bool,</div></h4></section></summary><div class='docblock'>Consumes an iterator, creating two collections from it. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_partitioned\" class=\"method trait-impl\"><a href=\"#method.is_partitioned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_partitioned</a>&lt;P&gt;(self, predicate: P) -&gt; bool<div class=\"where\">where\n    Self: Sized,\n    P: FnMut(Self::Item) -&gt; bool,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_is_partitioned</code>)</span></div></span><div class='docblock'>Checks if the elements of this iterator are partitioned according to the given predicate,\nsuch that all those that return <code>true</code> precede all those that return <code>false</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_fold\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.27.0\">1.27.0</span><a href=\"#method.try_fold\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_fold</a>&lt;B, F, R&gt;(&amp;mut self, init: B, f: F) -&gt; R<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(B, Self::Item) -&gt; R,\n    R: Try&lt;Output = B&gt;,</div></h4></section></summary><div class='docblock'>An iterator method that applies a function as long as it returns\nsuccessfully, producing a single, final value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_for_each\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.27.0\">1.27.0</span><a href=\"#method.try_for_each\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_for_each</a>&lt;F, R&gt;(&amp;mut self, f: F) -&gt; R<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(Self::Item) -&gt; R,\n    R: Try&lt;Output = ()&gt;,</div></h4></section></summary><div class='docblock'>An iterator method that applies a fallible function to each item in the\niterator, stopping at the first error and returning that error. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fold\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.fold\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fold</a>&lt;B, F&gt;(self, init: B, f: F) -&gt; B<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(B, Self::Item) -&gt; B,</div></h4></section></summary><div class='docblock'>Folds every element into an accumulator by applying an operation,\nreturning the final result. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reduce\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.51.0\">1.51.0</span><a href=\"#method.reduce\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">reduce</a>&lt;F&gt;(self, f: F) -&gt; Option&lt;Self::Item&gt;<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(Self::Item, Self::Item) -&gt; Self::Item,</div></h4></section></summary><div class='docblock'>Reduces the elements to a single one, by repeatedly applying a reducing\noperation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reduce\" class=\"method trait-impl\"><a href=\"#method.try_reduce\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_reduce</a>&lt;R&gt;(\n    &amp;mut self,\n    f: impl FnMut(Self::Item, Self::Item) -&gt; R,\n) -&gt; &lt;&lt;R as Try&gt;::Residual as Residual&lt;Option&lt;&lt;R as Try&gt;::Output&gt;&gt;&gt;::TryType<div class=\"where\">where\n    Self: Sized,\n    R: Try&lt;Output = Self::Item&gt;,\n    &lt;R as Try&gt;::Residual: Residual&lt;Option&lt;Self::Item&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iterator_try_reduce</code>)</span></div></span><div class='docblock'>Reduces the elements to a single one by repeatedly applying a reducing operation. If the\nclosure returns a failure, the failure is propagated back to the caller immediately. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.all\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">all</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; bool<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(Self::Item) -&gt; bool,</div></h4></section></summary><div class='docblock'>Tests if every element of the iterator matches a predicate. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.any\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">any</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; bool<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(Self::Item) -&gt; bool,</div></h4></section></summary><div class='docblock'>Tests if any element of the iterator matches a predicate. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.find\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">find</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; Option&lt;Self::Item&gt;<div class=\"where\">where\n    Self: Sized,\n    P: FnMut(&amp;Self::Item) -&gt; bool,</div></h4></section></summary><div class='docblock'>Searches for an element of an iterator that satisfies a predicate. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_map\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.30.0\">1.30.0</span><a href=\"#method.find_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">find_map</a>&lt;B, F&gt;(&amp;mut self, f: F) -&gt; Option&lt;B&gt;<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(Self::Item) -&gt; Option&lt;B&gt;,</div></h4></section></summary><div class='docblock'>Applies function to the elements of iterator and returns\nthe first non-none result. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_find\" class=\"method trait-impl\"><a href=\"#method.try_find\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_find</a>&lt;R&gt;(\n    &amp;mut self,\n    f: impl FnMut(&amp;Self::Item) -&gt; R,\n) -&gt; &lt;&lt;R as Try&gt;::Residual as Residual&lt;Option&lt;Self::Item&gt;&gt;&gt;::TryType<div class=\"where\">where\n    Self: Sized,\n    R: Try&lt;Output = bool&gt;,\n    &lt;R as Try&gt;::Residual: Residual&lt;Option&lt;Self::Item&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_find</code>)</span></div></span><div class='docblock'>Applies function to the elements of iterator and returns\nthe first true result or the first error. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.position\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.position\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">position</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; Option&lt;usize&gt;<div class=\"where\">where\n    Self: Sized,\n    P: FnMut(Self::Item) -&gt; bool,</div></h4></section></summary><div class='docblock'>Searches for an element in an iterator, returning its index. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_by_key\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.6.0\">1.6.0</span><a href=\"#method.max_by_key\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">max_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; Option&lt;Self::Item&gt;<div class=\"where\">where\n    B: Ord,\n    Self: Sized,\n    F: FnMut(&amp;Self::Item) -&gt; B,</div></h4></section></summary><div class='docblock'>Returns the element that gives the maximum value from the\nspecified function. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_by\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.15.0\">1.15.0</span><a href=\"#method.max_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">max_by</a>&lt;F&gt;(self, compare: F) -&gt; Option&lt;Self::Item&gt;<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(&amp;Self::Item, &amp;Self::Item) -&gt; Ordering,</div></h4></section></summary><div class='docblock'>Returns the element that gives the maximum value with respect to the\nspecified comparison function. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_by_key\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.6.0\">1.6.0</span><a href=\"#method.min_by_key\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">min_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; Option&lt;Self::Item&gt;<div class=\"where\">where\n    B: Ord,\n    Self: Sized,\n    F: FnMut(&amp;Self::Item) -&gt; B,</div></h4></section></summary><div class='docblock'>Returns the element that gives the minimum value from the\nspecified function. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_by\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.15.0\">1.15.0</span><a href=\"#method.min_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">min_by</a>&lt;F&gt;(self, compare: F) -&gt; Option&lt;Self::Item&gt;<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(&amp;Self::Item, &amp;Self::Item) -&gt; Ordering,</div></h4></section></summary><div class='docblock'>Returns the element that gives the minimum value with respect to the\nspecified comparison function. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unzip\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.unzip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">unzip</a>&lt;A, B, FromA, FromB&gt;(self) -&gt; (FromA, FromB)<div class=\"where\">where\n    FromA: Default + Extend&lt;A&gt;,\n    FromB: Default + Extend&lt;B&gt;,\n    Self: Sized + Iterator&lt;Item = (A, B)&gt;,</div></h4></section></summary><div class='docblock'>Converts an iterator of pairs into a pair of containers. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copied\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.36.0\">1.36.0</span><a href=\"#method.copied\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">copied</a>&lt;'a, T&gt;(self) -&gt; Copied&lt;Self&gt;<div class=\"where\">where\n    T: 'a + Copy,\n    Self: Sized + Iterator&lt;Item = &amp;'a T&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator which copies all of its elements. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cloned\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.cloned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cloned</a>&lt;'a, T&gt;(self) -&gt; Cloned&lt;Self&gt;<div class=\"where\">where\n    T: 'a + Clone,\n    Self: Sized + Iterator&lt;Item = &amp;'a T&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator which <a href=\"Clone::clone\"><code>clone</code></a>s all of its elements. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cycle\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.cycle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cycle</a>(self) -&gt; Cycle&lt;Self&gt;<div class=\"where\">where\n    Self: Sized + Clone,</div></h4></section></summary><div class='docblock'>Repeats an iterator endlessly. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.array_chunks\" class=\"method trait-impl\"><a href=\"#method.array_chunks\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">array_chunks</a>&lt;const N: usize&gt;(self) -&gt; ArrayChunks&lt;Self, N&gt;<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_array_chunks</code>)</span></div></span><div class='docblock'>Returns an iterator over <code>N</code> elements of the iterator at a time. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.11.0\">1.11.0</span><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sum</a>&lt;S&gt;(self) -&gt; S<div class=\"where\">where\n    Self: Sized,\n    S: Sum&lt;Self::Item&gt;,</div></h4></section></summary><div class='docblock'>Sums the elements of an iterator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.11.0\">1.11.0</span><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">product</a>&lt;P&gt;(self) -&gt; P<div class=\"where\">where\n    Self: Sized,\n    P: Product&lt;Self::Item&gt;,</div></h4></section></summary><div class='docblock'>Iterates over the entire iterator, multiplying all the elements <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp_by\" class=\"method trait-impl\"><a href=\"#method.cmp_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cmp_by</a>&lt;I, F&gt;(self, other: I, cmp: F) -&gt; Ordering<div class=\"where\">where\n    Self: Sized,\n    I: IntoIterator,\n    F: FnMut(Self::Item, &lt;I as IntoIterator&gt;::Item) -&gt; Ordering,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>)</span></div></span><div class='docblock'><a href=\"Ord#lexicographical-comparison\">Lexicographically</a> compares the elements of this [<code>Iterator</code>] with those\nof another with respect to the specified comparison function. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">partial_cmp</a>&lt;I&gt;(self, other: I) -&gt; Option&lt;Ordering&gt;<div class=\"where\">where\n    I: IntoIterator,\n    Self::Item: PartialOrd&lt;&lt;I as IntoIterator&gt;::Item&gt;,\n    Self: Sized,</div></h4></section></summary><div class='docblock'><a href=\"Ord#lexicographical-comparison\">Lexicographically</a> compares the [<code>PartialOrd</code>] elements of\nthis [<code>Iterator</code>] with those of another. The comparison works like short-circuit\nevaluation, returning a result without comparing the remaining elements.\nAs soon as an order can be determined, the evaluation stops and a result is returned. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp_by\" class=\"method trait-impl\"><a href=\"#method.partial_cmp_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">partial_cmp_by</a>&lt;I, F&gt;(self, other: I, partial_cmp: F) -&gt; Option&lt;Ordering&gt;<div class=\"where\">where\n    Self: Sized,\n    I: IntoIterator,\n    F: FnMut(Self::Item, &lt;I as IntoIterator&gt;::Item) -&gt; Option&lt;Ordering&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>)</span></div></span><div class='docblock'><a href=\"Ord#lexicographical-comparison\">Lexicographically</a> compares the elements of this [<code>Iterator</code>] with those\nof another with respect to the specified comparison function. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq</a>&lt;I&gt;(self, other: I) -&gt; bool<div class=\"where\">where\n    I: IntoIterator,\n    Self::Item: PartialEq&lt;&lt;I as IntoIterator&gt;::Item&gt;,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Determines if the elements of this [<code>Iterator</code>] are equal to those of\nanother. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq_by\" class=\"method trait-impl\"><a href=\"#method.eq_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq_by</a>&lt;I, F&gt;(self, other: I, eq: F) -&gt; bool<div class=\"where\">where\n    Self: Sized,\n    I: IntoIterator,\n    F: FnMut(Self::Item, &lt;I as IntoIterator&gt;::Item) -&gt; bool,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>)</span></div></span><div class='docblock'>Determines if the elements of this [<code>Iterator</code>] are equal to those of\nanother with respect to the specified equality function. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ne</a>&lt;I&gt;(self, other: I) -&gt; bool<div class=\"where\">where\n    I: IntoIterator,\n    Self::Item: PartialEq&lt;&lt;I as IntoIterator&gt;::Item&gt;,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Determines if the elements of this [<code>Iterator</code>] are not equal to those of\nanother. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lt</a>&lt;I&gt;(self, other: I) -&gt; bool<div class=\"where\">where\n    I: IntoIterator,\n    Self::Item: PartialOrd&lt;&lt;I as IntoIterator&gt;::Item&gt;,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Determines if the elements of this [<code>Iterator</code>] are <a href=\"Ord#lexicographical-comparison\">lexicographically</a>\nless than those of another. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">le</a>&lt;I&gt;(self, other: I) -&gt; bool<div class=\"where\">where\n    I: IntoIterator,\n    Self::Item: PartialOrd&lt;&lt;I as IntoIterator&gt;::Item&gt;,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Determines if the elements of this [<code>Iterator</code>] are <a href=\"Ord#lexicographical-comparison\">lexicographically</a>\nless or equal to those of another. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">gt</a>&lt;I&gt;(self, other: I) -&gt; bool<div class=\"where\">where\n    I: IntoIterator,\n    Self::Item: PartialOrd&lt;&lt;I as IntoIterator&gt;::Item&gt;,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Determines if the elements of this [<code>Iterator</code>] are <a href=\"Ord#lexicographical-comparison\">lexicographically</a>\ngreater than those of another. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ge</a>&lt;I&gt;(self, other: I) -&gt; bool<div class=\"where\">where\n    I: IntoIterator,\n    Self::Item: PartialOrd&lt;&lt;I as IntoIterator&gt;::Item&gt;,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Determines if the elements of this [<code>Iterator</code>] are <a href=\"Ord#lexicographical-comparison\">lexicographically</a>\ngreater than or equal to those of another. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sorted_by\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.82.0\">1.82.0</span><a href=\"#method.is_sorted_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_sorted_by</a>&lt;F&gt;(self, compare: F) -&gt; bool<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(&amp;Self::Item, &amp;Self::Item) -&gt; bool,</div></h4></section></summary><div class='docblock'>Checks if the elements of this iterator are sorted using the given comparator function. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sorted_by_key\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.82.0\">1.82.0</span><a href=\"#method.is_sorted_by_key\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_sorted_by_key</a>&lt;F, K&gt;(self, f: F) -&gt; bool<div class=\"where\">where\n    Self: Sized,\n    F: FnMut(Self::Item) -&gt; K,\n    K: PartialOrd,</div></h4></section></summary><div class='docblock'>Checks if the elements of this iterator are sorted using the given key extraction\nfunction. <a>Read more</a></div></details></div></details>","Iterator","ostd::mm::frame::segment::USegment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Segment%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#128-191\">Source</a><a href=\"#impl-Segment%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"ostd/mm/frame/meta/trait.AnyFrameMeta.html\" title=\"trait ostd::mm::frame::meta::AnyFrameMeta\">AnyFrameMeta</a> + ?Sized&gt; <a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.split\" class=\"method\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#138-155\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ostd/mm/frame/segment/struct.Segment.html#tymethod.split\" class=\"fn\">split</a>(self, offset: usize) -&gt; (Self, Self)</h4></section></summary><div class=\"docblock\"><p>Splits the frames into two at the given byte offset from the start.</p>\n<p>The resulting frames cannot be empty. So the offset cannot be neither\nzero nor the length of the frames.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>The function panics if the offset is out of bounds, at either ends, or\nnot base-page-aligned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice\" class=\"method\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#166-183\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ostd/mm/frame/segment/struct.Segment.html#tymethod.slice\" class=\"fn\">slice</a>(&amp;self, range: &amp;Range&lt;usize&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Gets an extra handle to the frames in the byte offset range.</p>\n<p>The sliced byte offset range in indexed by the offset from the start of\nthe contiguous frames. The resulting frames holds extra reference counts.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>The function panics if the byte offset range is out of bounds, or if\nany of the ends of the byte offset range is not base-page aligned.</p>\n</div></details></div></details>",0,"ostd::mm::frame::segment::USegment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Segment%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#72-126\">Source</a><a href=\"#impl-Segment%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"ostd/mm/frame/meta/trait.AnyFrameMeta.html\" title=\"trait ostd::mm::frame::meta::AnyFrameMeta\">AnyFrameMeta</a>&gt; <a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_unused\" class=\"method\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#86-109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ostd/mm/frame/segment/struct.Segment.html#tymethod.from_unused\" class=\"fn\">from_unused</a>&lt;F&gt;(\n    range: Range&lt;<a class=\"type\" href=\"ostd/mm/type.Paddr.html\" title=\"type ostd::mm::Paddr\">Paddr</a>&gt;,\n    metadata_fn: F,\n) -&gt; Result&lt;Self, <a class=\"enum\" href=\"ostd/mm/frame/meta/enum.GetFrameError.html\" title=\"enum ostd::mm::frame::meta::GetFrameError\">GetFrameError</a>&gt;<div class=\"where\">where\n    F: FnMut(<a class=\"type\" href=\"ostd/mm/type.Paddr.html\" title=\"type ostd::mm::Paddr\">Paddr</a>) -&gt; M,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new <a href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\"><code>Segment</code></a> from unused frames.</p>\n<p>The caller must provide a closure to initialize metadata for all the frames.\nThe closure receives the physical address of the frame and returns the\nmetadata, which is similar to [<code>core::array::from_fn</code>].</p>\n<p>It returns an error if:</p>\n<ul>\n<li>the physical address is invalid or not aligned;</li>\n<li>any of the frames cannot be created with a specific reason.</li>\n</ul>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>It panics if the range is empty.</p>\n</div></details></div></details>",0,"ostd::mm::frame::segment::USegment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CSegment%3Cdyn+AnyFrameMeta%3E%3E-for-Segment%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#244-268\">Source</a><a href=\"#impl-TryFrom%3CSegment%3Cdyn+AnyFrameMeta%3E%3E-for-Segment%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"ostd/mm/frame/meta/trait.AnyFrameMeta.html\" title=\"trait ostd::mm::frame::meta::AnyFrameMeta\">AnyFrameMeta</a>&gt; TryFrom&lt;<a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;dyn <a class=\"trait\" href=\"ostd/mm/frame/meta/trait.AnyFrameMeta.html\" title=\"trait ostd::mm::frame::meta::AnyFrameMeta\">AnyFrameMeta</a>&gt;&gt; for <a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#245\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;dyn <a class=\"trait\" href=\"ostd/mm/frame/meta/trait.AnyFrameMeta.html\" title=\"trait ostd::mm::frame::meta::AnyFrameMeta\">AnyFrameMeta</a>&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ostd/mm/frame/segment.rs.html#247-267\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_from</a>(seg: <a class=\"struct\" href=\"ostd/mm/frame/segment/struct.Segment.html\" title=\"struct ostd::mm::frame::segment::Segment\">Segment</a>&lt;dyn <a class=\"trait\" href=\"ostd/mm/frame/meta/trait.AnyFrameMeta.html\" title=\"trait ostd::mm::frame::meta::AnyFrameMeta\">AnyFrameMeta</a>&gt;) -&gt; Result&lt;Self, Self::Error&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Segment<dyn AnyFrameMeta>>","ostd::mm::frame::segment::USegment"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[63663]}