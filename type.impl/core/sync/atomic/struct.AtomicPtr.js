(function() {
    var type_impls = Object.fromEntries([["radium",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AtomicPtr%3CT%3E\" class=\"impl\"><a href=\"#impl-AtomicPtr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; AtomicPtr&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.24.0\">1.0.0 (const: 1.24.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">new</a>(p: *mut T) -&gt; AtomicPtr&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>AtomicPtr</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::AtomicPtr;\n\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">5</span>;\n<span class=\"kw\">let </span>atomic_ptr = AtomicPtr::new(ptr);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.75.0, const since 1.84.0\">1.75.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const unsafe fn <a class=\"fn\">from_ptr</a>&lt;'a&gt;(ptr: *mut *mut T) -&gt; &amp;'a AtomicPtr&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>AtomicPtr</code> from a pointer.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{<span class=\"self\">self</span>, AtomicPtr};\n\n<span class=\"comment\">// Get a pointer to an allocated value\n</span><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut *mut </span>u8 = Box::into_raw(Box::new(std::ptr::null_mut()));\n\n<span class=\"macro\">assert!</span>(ptr.cast::&lt;AtomicPtr&lt;u8&gt;&gt;().is_aligned());\n\n{\n    <span class=\"comment\">// Create an atomic view of the allocated value\n    </span><span class=\"kw\">let </span>atomic = <span class=\"kw\">unsafe </span>{ AtomicPtr::from_ptr(ptr) };\n\n    <span class=\"comment\">// Use `atomic` for atomic operations, possibly share it with other threads\n    </span>atomic.store(std::ptr::NonNull::dangling().as_ptr(), atomic::Ordering::Relaxed);\n}\n\n<span class=\"comment\">// It's ok to non-atomically access the value behind `ptr`,\n// since the reference to the atomic ended its lifetime in the block above\n</span><span class=\"macro\">assert!</span>(!<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr }.is_null());\n\n<span class=\"comment\">// Deallocate the value\n</span><span class=\"kw\">unsafe </span>{ drop(Box::from_raw(ptr)) }</code></pre></div>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<ul>\n<li><code>ptr</code> must be aligned to <code>align_of::&lt;AtomicPtr&lt;T&gt;&gt;()</code> (note that on some platforms this\ncan be bigger than <code>align_of::&lt;*mut T&gt;()</code>).</li>\n<li><code>ptr</code> must be <a href=\"crate::ptr#safety\">valid</a> for both reads and writes for the whole lifetime <code>'a</code>.</li>\n<li>You must adhere to the <a href=\"self#memory-model-for-atomic-accesses\">Memory model for atomic accesses</a>. In particular, it is not\nallowed to mix atomic and non-atomic accesses, or atomic accesses of different sizes,\nwithout synchronization.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.15.0\">1.15.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">get_mut</a>(&amp;mut self) -&gt; &amp;mut *mut T</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying pointer.</p>\n<p>This is safe because the mutable reference guarantees that no other threads are\nconcurrently accessing the atomic data.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>data = <span class=\"number\">10</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>atomic_ptr = AtomicPtr::new(<span class=\"kw-2\">&amp;mut </span>data);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>other_data = <span class=\"number\">5</span>;\n<span class=\"kw-2\">*</span>atomic_ptr.get_mut() = <span class=\"kw-2\">&amp;mut </span>other_data;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>atomic_ptr.load(Ordering::SeqCst) }, <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_mut</a>(v: &amp;mut *mut T) -&gt; &amp;mut AtomicPtr&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_from_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Gets atomic access to a pointer.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(atomic_from_mut)]\n</span><span class=\"kw\">use </span>std::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>data = <span class=\"number\">123</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_ptr = <span class=\"kw-2\">&amp;mut </span>data <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>i32;\n<span class=\"kw\">let </span>a = AtomicPtr::from_mut(<span class=\"kw-2\">&amp;mut </span>some_ptr);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>other_data = <span class=\"number\">456</span>;\na.store(<span class=\"kw-2\">&amp;mut </span>other_data, Ordering::Relaxed);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>some_ptr }, <span class=\"number\">456</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_mut_slice</a>(this: &amp;mut [AtomicPtr&lt;T&gt;]) -&gt; &amp;mut [*mut T]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_from_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Gets non-atomic access to a <code>&amp;mut [AtomicPtr]</code> slice.</p>\n<p>This is safe because the mutable reference guarantees that no other threads are\nconcurrently accessing the atomic data.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(atomic_from_mut)]\n</span><span class=\"kw\">use </span>std::ptr::null_mut;\n<span class=\"kw\">use </span>std::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_ptrs = [<span class=\"kw\">const </span>{ AtomicPtr::new(null_mut::&lt;String&gt;()) }; <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span>view: <span class=\"kw-2\">&amp;mut </span>[<span class=\"kw-2\">*mut </span>String] = AtomicPtr::get_mut_slice(<span class=\"kw-2\">&amp;mut </span>some_ptrs);\n<span class=\"macro\">assert_eq!</span>(view, [null_mut::&lt;String&gt;(); <span class=\"number\">10</span>]);\nview\n    .iter_mut()\n    .enumerate()\n    .for_each(|(i, ptr)| <span class=\"kw-2\">*</span>ptr = Box::into_raw(Box::new(<span class=\"macro\">format!</span>(<span class=\"string\">\"iteration#{i}\"</span>))));\n\nstd::thread::scope(|s| {\n    <span class=\"kw\">for </span>ptr <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>some_ptrs {\n        s.spawn(<span class=\"kw\">move </span>|| {\n            <span class=\"kw\">let </span>ptr = ptr.load(Ordering::Relaxed);\n            <span class=\"macro\">assert!</span>(!ptr.is_null());\n\n            <span class=\"kw\">let </span>name = <span class=\"kw\">unsafe </span>{ Box::from_raw(ptr) };\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"Hello, {name}!\"</span>);\n        });\n    }\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_mut_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_mut_slice</a>(v: &amp;mut [*mut T]) -&gt; &amp;mut [AtomicPtr&lt;T&gt;]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_from_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Gets atomic access to a slice of pointers.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(atomic_from_mut)]\n</span><span class=\"kw\">use </span>std::ptr::null_mut;\n<span class=\"kw\">use </span>std::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_ptrs = [null_mut::&lt;String&gt;(); <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>a = <span class=\"kw-2\">&amp;*</span>AtomicPtr::from_mut_slice(<span class=\"kw-2\">&amp;mut </span>some_ptrs);\nstd::thread::scope(|s| {\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..a.len() {\n        s.spawn(<span class=\"kw\">move </span>|| {\n            <span class=\"kw\">let </span>name = Box::new(<span class=\"macro\">format!</span>(<span class=\"string\">\"thread{i}\"</span>));\n            a[i].store(Box::into_raw(name), Ordering::Relaxed);\n        });\n    }\n});\n<span class=\"kw\">for </span>p <span class=\"kw\">in </span>some_ptrs {\n    <span class=\"macro\">assert!</span>(!p.is_null());\n    <span class=\"kw\">let </span>name = <span class=\"kw\">unsafe </span>{ Box::from_raw(p) };\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Hello, {name}!\"</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.15.0, const since 1.79.0\">1.15.0 (const: 1.79.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">into_inner</a>(self) -&gt; *mut T</h4></section></summary><div class=\"docblock\"><p>Consumes the atomic and returns the contained value.</p>\n<p>This is safe because passing <code>self</code> by value guarantees that no other threads are\nconcurrently accessing the atomic data.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::AtomicPtr;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>data = <span class=\"number\">5</span>;\n<span class=\"kw\">let </span>atomic_ptr = AtomicPtr::new(<span class=\"kw-2\">&amp;mut </span>data);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>atomic_ptr.into_inner() }, <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">load</a>(&amp;self, order: Ordering) -&gt; *mut T</h4></section></summary><div class=\"docblock\"><p>Loads a value from the pointer.</p>\n<p><code>load</code> takes an [<code>Ordering</code>] argument which describes the memory ordering\nof this operation. Possible values are [<code>SeqCst</code>], [<code>Acquire</code>] and [<code>Relaxed</code>].</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>order</code> is [<code>Release</code>] or [<code>AcqRel</code>].</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">5</span>;\n<span class=\"kw\">let </span>some_ptr = AtomicPtr::new(ptr);\n\n<span class=\"kw\">let </span>value = some_ptr.load(Ordering::Relaxed);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">store</a>(&amp;self, ptr: *mut T, order: Ordering)</h4></section></summary><div class=\"docblock\"><p>Stores a value into the pointer.</p>\n<p><code>store</code> takes an [<code>Ordering</code>] argument which describes the memory ordering\nof this operation. Possible values are [<code>SeqCst</code>], [<code>Release</code>] and [<code>Relaxed</code>].</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>order</code> is [<code>Acquire</code>] or [<code>AcqRel</code>].</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">5</span>;\n<span class=\"kw\">let </span>some_ptr = AtomicPtr::new(ptr);\n\n<span class=\"kw\">let </span>other_ptr = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">10</span>;\n\nsome_ptr.store(other_ptr, Ordering::Relaxed);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">swap</a>(&amp;self, ptr: *mut T, order: Ordering) -&gt; *mut T</h4></section></summary><div class=\"docblock\"><p>Stores a value into the pointer, returning the previous value.</p>\n<p><code>swap</code> takes an [<code>Ordering</code>] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p><strong>Note:</strong> This method is only available on platforms that support atomic\noperations on pointers.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">5</span>;\n<span class=\"kw\">let </span>some_ptr = AtomicPtr::new(ptr);\n\n<span class=\"kw\">let </span>other_ptr = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">10</span>;\n\n<span class=\"kw\">let </span>value = some_ptr.swap(other_ptr, Ordering::Relaxed);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_and_swap\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">compare_and_swap</a>(\n    &amp;self,\n    current: *mut T,\n    new: *mut T,\n    order: Ordering,\n) -&gt; *mut T</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.50.0: Use <code>compare_exchange</code> or <code>compare_exchange_weak</code> instead</span></div></span></summary><div class=\"docblock\"><p>Stores a value into the pointer if the current value is the same as the <code>current</code> value.</p>\n<p>The return value is always the previous value. If it is equal to <code>current</code>, then the value\nwas updated.</p>\n<p><code>compare_and_swap</code> also takes an [<code>Ordering</code>] argument which describes the memory\nordering of this operation. Notice that even when using [<code>AcqRel</code>], the operation\nmight fail and hence just perform an <code>Acquire</code> load, but not have <code>Release</code> semantics.\nUsing [<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>] if it\nhappens, and using [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p><strong>Note:</strong> This method is only available on platforms that support atomic\noperations on pointers.</p>\n<h5 id=\"migrating-to-compare_exchange-and-compare_exchange_weak\"><a class=\"doc-anchor\" href=\"#migrating-to-compare_exchange-and-compare_exchange_weak\">§</a>Migrating to <code>compare_exchange</code> and <code>compare_exchange_weak</code></h5>\n<p><code>compare_and_swap</code> is equivalent to <code>compare_exchange</code> with the following mapping for\nmemory orderings:</p>\n<div><table><thead><tr><th>Original</th><th>Success</th><th>Failure</th></tr></thead><tbody>\n<tr><td>Relaxed</td><td>Relaxed</td><td>Relaxed</td></tr>\n<tr><td>Acquire</td><td>Acquire</td><td>Acquire</td></tr>\n<tr><td>Release</td><td>Release</td><td>Relaxed</td></tr>\n<tr><td>AcqRel</td><td>AcqRel</td><td>Acquire</td></tr>\n<tr><td>SeqCst</td><td>SeqCst</td><td>SeqCst</td></tr>\n</tbody></table>\n</div>\n<p><code>compare_and_swap</code> and <code>compare_exchange</code> also differ in their return type. You can use\n<code>compare_exchange(...).unwrap_or_else(|x| x)</code> to recover the behavior of <code>compare_and_swap</code>,\nbut in most cases it is more idiomatic to check whether the return value is <code>Ok</code> or <code>Err</code>\nrather than to infer success vs failure based on the value that was read.</p>\n<p>During migration, consider whether it makes sense to use <code>compare_exchange_weak</code> instead.\n<code>compare_exchange_weak</code> is allowed to fail spuriously even when the comparison succeeds,\nwhich allows the compiler to generate better assembly code when the compare and swap\nis used in a loop.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">5</span>;\n<span class=\"kw\">let </span>some_ptr = AtomicPtr::new(ptr);\n\n<span class=\"kw\">let </span>other_ptr = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">10</span>;\n\n<span class=\"kw\">let </span>value = some_ptr.compare_and_swap(ptr, other_ptr, Ordering::Relaxed);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_exchange\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.10.0\">1.10.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">compare_exchange</a>(\n    &amp;self,\n    current: *mut T,\n    new: *mut T,\n    success: Ordering,\n    failure: Ordering,\n) -&gt; Result&lt;*mut T, *mut T&gt;</h4></section></summary><div class=\"docblock\"><p>Stores a value into the pointer if the current value is the same as the <code>current</code> value.</p>\n<p>The return value is a result indicating whether the new value was written and containing\nthe previous value. On success this value is guaranteed to be equal to <code>current</code>.</p>\n<p><code>compare_exchange</code> takes two [<code>Ordering</code>] arguments to describe the memory\nordering of this operation. <code>success</code> describes the required ordering for the\nread-modify-write operation that takes place if the comparison with <code>current</code> succeeds.\n<code>failure</code> describes the required ordering for the load operation that takes place when\nthe comparison fails. Using [<code>Acquire</code>] as success ordering makes the store part\nof this operation [<code>Relaxed</code>], and using [<code>Release</code>] makes the successful load\n[<code>Relaxed</code>]. The failure ordering can only be [<code>SeqCst</code>], [<code>Acquire</code>] or [<code>Relaxed</code>].</p>\n<p><strong>Note:</strong> This method is only available on platforms that support atomic\noperations on pointers.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">5</span>;\n<span class=\"kw\">let </span>some_ptr = AtomicPtr::new(ptr);\n\n<span class=\"kw\">let </span>other_ptr = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">10</span>;\n\n<span class=\"kw\">let </span>value = some_ptr.compare_exchange(ptr, other_ptr,\n                                      Ordering::SeqCst, Ordering::Relaxed);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_exchange_weak\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.10.0\">1.10.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">compare_exchange_weak</a>(\n    &amp;self,\n    current: *mut T,\n    new: *mut T,\n    success: Ordering,\n    failure: Ordering,\n) -&gt; Result&lt;*mut T, *mut T&gt;</h4></section></summary><div class=\"docblock\"><p>Stores a value into the pointer if the current value is the same as the <code>current</code> value.</p>\n<p>Unlike [<code>AtomicPtr::compare_exchange</code>], this function is allowed to spuriously fail even when the\ncomparison succeeds, which can result in more efficient code on some platforms. The\nreturn value is a result indicating whether the new value was written and containing the\nprevious value.</p>\n<p><code>compare_exchange_weak</code> takes two [<code>Ordering</code>] arguments to describe the memory\nordering of this operation. <code>success</code> describes the required ordering for the\nread-modify-write operation that takes place if the comparison with <code>current</code> succeeds.\n<code>failure</code> describes the required ordering for the load operation that takes place when\nthe comparison fails. Using [<code>Acquire</code>] as success ordering makes the store part\nof this operation [<code>Relaxed</code>], and using [<code>Release</code>] makes the successful load\n[<code>Relaxed</code>]. The failure ordering can only be [<code>SeqCst</code>], [<code>Acquire</code>] or [<code>Relaxed</code>].</p>\n<p><strong>Note:</strong> This method is only available on platforms that support atomic\noperations on pointers.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>some_ptr = AtomicPtr::new(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>new = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">10</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>old = some_ptr.load(Ordering::Relaxed);\n<span class=\"kw\">loop </span>{\n    <span class=\"kw\">match </span>some_ptr.compare_exchange_weak(old, new, Ordering::SeqCst, Ordering::Relaxed) {\n        <span class=\"prelude-val\">Ok</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">break</span>,\n        <span class=\"prelude-val\">Err</span>(x) =&gt; old = x,\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_update\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0\">1.53.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_update</a>&lt;F&gt;(\n    &amp;self,\n    set_order: Ordering,\n    fetch_order: Ordering,\n    f: F,\n) -&gt; Result&lt;*mut T, *mut T&gt;<div class=\"where\">where\n    F: FnMut(*mut T) -&gt; Option&lt;*mut T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Fetches the value, and applies a function to it that returns an optional\nnew value. Returns a <code>Result</code> of <code>Ok(previous_value)</code> if the function\nreturned <code>Some(_)</code>, else <code>Err(previous_value)</code>.</p>\n<p>Note: This may call the function multiple times if the value has been\nchanged from other threads in the meantime, as long as the function\nreturns <code>Some(_)</code>, but the function will have been applied only once to\nthe stored value.</p>\n<p><code>fetch_update</code> takes two [<code>Ordering</code>] arguments to describe the memory\nordering of this operation. The first describes the required ordering for\nwhen the operation finally succeeds while the second describes the\nrequired ordering for loads. These correspond to the success and failure\norderings of [<code>AtomicPtr::compare_exchange</code>] respectively.</p>\n<p>Using [<code>Acquire</code>] as success ordering makes the store part of this\noperation [<code>Relaxed</code>], and using [<code>Release</code>] makes the final successful\nload [<code>Relaxed</code>]. The (failed) load ordering can only be [<code>SeqCst</code>],\n[<code>Acquire</code>] or [<code>Relaxed</code>].</p>\n<p><strong>Note:</strong> This method is only available on platforms that support atomic\noperations on pointers.</p>\n<h5 id=\"considerations\"><a class=\"doc-anchor\" href=\"#considerations\">§</a>Considerations</h5>\n<p>This method is not magic; it is not provided by the hardware.\nIt is implemented in terms of [<code>AtomicPtr::compare_exchange_weak</code>], and suffers from the same drawbacks.\nIn particular, this method will not circumvent the <a href=\"https://en.wikipedia.org/wiki/ABA_problem\">ABA Problem</a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span><span class=\"kw\">_ </span>= <span class=\"kw-2\">&amp;mut </span><span class=\"number\">5</span>;\n<span class=\"kw\">let </span>some_ptr = AtomicPtr::new(ptr);\n\n<span class=\"kw\">let </span>new: <span class=\"kw-2\">*mut </span><span class=\"kw\">_ </span>= <span class=\"kw-2\">&amp;mut </span><span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(some_ptr.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |<span class=\"kw\">_</span>| <span class=\"prelude-val\">None</span>), <span class=\"prelude-val\">Err</span>(ptr));\n<span class=\"kw\">let </span>result = some_ptr.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| {\n    <span class=\"kw\">if </span>x == ptr {\n        <span class=\"prelude-val\">Some</span>(new)\n    } <span class=\"kw\">else </span>{\n        <span class=\"prelude-val\">None\n    </span>}\n});\n<span class=\"macro\">assert_eq!</span>(result, <span class=\"prelude-val\">Ok</span>(ptr));\n<span class=\"macro\">assert_eq!</span>(some_ptr.load(Ordering::SeqCst), new);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_update\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_update</a>(\n    &amp;self,\n    set_order: Ordering,\n    fetch_order: Ordering,\n    f: impl FnMut(*mut T) -&gt; Option&lt;*mut T&gt;,\n) -&gt; Result&lt;*mut T, *mut T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_try_update</code>)</span></div></span></summary><div class=\"docblock\"><p>Fetches the value, and applies a function to it that returns an optional\nnew value. Returns a <code>Result</code> of <code>Ok(previous_value)</code> if the function\nreturned <code>Some(_)</code>, else <code>Err(previous_value)</code>.</p>\n<p>See also: <a href=\"%60AtomicPtr::update%60\"><code>update</code></a>.</p>\n<p>Note: This may call the function multiple times if the value has been\nchanged from other threads in the meantime, as long as the function\nreturns <code>Some(_)</code>, but the function will have been applied only once to\nthe stored value.</p>\n<p><code>try_update</code> takes two [<code>Ordering</code>] arguments to describe the memory\nordering of this operation. The first describes the required ordering for\nwhen the operation finally succeeds while the second describes the\nrequired ordering for loads. These correspond to the success and failure\norderings of [<code>AtomicPtr::compare_exchange</code>] respectively.</p>\n<p>Using [<code>Acquire</code>] as success ordering makes the store part of this\noperation [<code>Relaxed</code>], and using [<code>Release</code>] makes the final successful\nload [<code>Relaxed</code>]. The (failed) load ordering can only be [<code>SeqCst</code>],\n[<code>Acquire</code>] or [<code>Relaxed</code>].</p>\n<p><strong>Note:</strong> This method is only available on platforms that support atomic\noperations on pointers.</p>\n<h5 id=\"considerations-1\"><a class=\"doc-anchor\" href=\"#considerations-1\">§</a>Considerations</h5>\n<p>This method is not magic; it is not provided by the hardware.\nIt is implemented in terms of [<code>AtomicPtr::compare_exchange_weak</code>], and suffers from the same drawbacks.\nIn particular, this method will not circumvent the <a href=\"https://en.wikipedia.org/wiki/ABA_problem\">ABA Problem</a>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(atomic_try_update)]\n</span><span class=\"kw\">use </span>std::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span><span class=\"kw\">_ </span>= <span class=\"kw-2\">&amp;mut </span><span class=\"number\">5</span>;\n<span class=\"kw\">let </span>some_ptr = AtomicPtr::new(ptr);\n\n<span class=\"kw\">let </span>new: <span class=\"kw-2\">*mut </span><span class=\"kw\">_ </span>= <span class=\"kw-2\">&amp;mut </span><span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(some_ptr.try_update(Ordering::SeqCst, Ordering::SeqCst, |<span class=\"kw\">_</span>| <span class=\"prelude-val\">None</span>), <span class=\"prelude-val\">Err</span>(ptr));\n<span class=\"kw\">let </span>result = some_ptr.try_update(Ordering::SeqCst, Ordering::SeqCst, |x| {\n    <span class=\"kw\">if </span>x == ptr {\n        <span class=\"prelude-val\">Some</span>(new)\n    } <span class=\"kw\">else </span>{\n        <span class=\"prelude-val\">None\n    </span>}\n});\n<span class=\"macro\">assert_eq!</span>(result, <span class=\"prelude-val\">Ok</span>(ptr));\n<span class=\"macro\">assert_eq!</span>(some_ptr.load(Ordering::SeqCst), new);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">update</a>(\n    &amp;self,\n    set_order: Ordering,\n    fetch_order: Ordering,\n    f: impl FnMut(*mut T) -&gt; *mut T,\n) -&gt; *mut T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_try_update</code>)</span></div></span></summary><div class=\"docblock\"><p>Fetches the value, applies a function to it that it return a new value.\nThe new value is stored and the old value is returned.</p>\n<p>See also: <a href=\"%60AtomicPtr::try_update%60\"><code>try_update</code></a>.</p>\n<p>Note: This may call the function multiple times if the value has been changed from other threads in\nthe meantime, but the function will have been applied only once to the stored value.</p>\n<p><code>update</code> takes two [<code>Ordering</code>] arguments to describe the memory\nordering of this operation. The first describes the required ordering for\nwhen the operation finally succeeds while the second describes the\nrequired ordering for loads. These correspond to the success and failure\norderings of [<code>AtomicPtr::compare_exchange</code>] respectively.</p>\n<p>Using [<code>Acquire</code>] as success ordering makes the store part\nof this operation [<code>Relaxed</code>], and using [<code>Release</code>] makes the final successful load\n[<code>Relaxed</code>]. The (failed) load ordering can only be [<code>SeqCst</code>], [<code>Acquire</code>] or [<code>Relaxed</code>].</p>\n<p><strong>Note:</strong> This method is only available on platforms that support atomic\noperations on pointers.</p>\n<h5 id=\"considerations-2\"><a class=\"doc-anchor\" href=\"#considerations-2\">§</a>Considerations</h5>\n<p>This method is not magic; it is not provided by the hardware.\nIt is implemented in terms of [<code>AtomicPtr::compare_exchange_weak</code>], and suffers from the same drawbacks.\nIn particular, this method will not circumvent the <a href=\"https://en.wikipedia.org/wiki/ABA_problem\">ABA Problem</a>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(atomic_try_update)]\n\n</span><span class=\"kw\">use </span>std::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span><span class=\"kw\">_ </span>= <span class=\"kw-2\">&amp;mut </span><span class=\"number\">5</span>;\n<span class=\"kw\">let </span>some_ptr = AtomicPtr::new(ptr);\n\n<span class=\"kw\">let </span>new: <span class=\"kw-2\">*mut </span><span class=\"kw\">_ </span>= <span class=\"kw-2\">&amp;mut </span><span class=\"number\">10</span>;\n<span class=\"kw\">let </span>result = some_ptr.update(Ordering::SeqCst, Ordering::SeqCst, |<span class=\"kw\">_</span>| new);\n<span class=\"macro\">assert_eq!</span>(result, ptr);\n<span class=\"macro\">assert_eq!</span>(some_ptr.load(Ordering::SeqCst), new);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_ptr_add\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_ptr_add</a>(&amp;self, val: usize, order: Ordering) -&gt; *mut T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance_atomic_ptr</code>)</span></div></span></summary><div class=\"docblock\"><p>Offsets the pointer’s address by adding <code>val</code> (in units of <code>T</code>),\nreturning the previous pointer.</p>\n<p>This is equivalent to using <a href=\"pointer::wrapping_add\"><code>wrapping_add</code></a> to atomically perform the\nequivalent of <code>ptr = ptr.wrapping_add(val);</code>.</p>\n<p>This method operates in units of <code>T</code>, which means that it cannot be used\nto offset the pointer by an amount which is not a multiple of\n<code>size_of::&lt;T&gt;()</code>. This can sometimes be inconvenient, as you may want to\nwork with a deliberately misaligned pointer. In such cases, you may use\nthe <a href=\"Self::fetch_byte_add\"><code>fetch_byte_add</code></a> method instead.</p>\n<p><code>fetch_ptr_add</code> takes an [<code>Ordering</code>] argument which describes the\nmemory ordering of this operation. All ordering modes are possible. Note\nthat using [<code>Acquire</code>] makes the store part of this operation\n[<code>Relaxed</code>], and using [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic\noperations on [<code>AtomicPtr</code>].</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_provenance_atomic_ptr)]\n</span><span class=\"kw\">use </span>core::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>atom = AtomicPtr::&lt;i64&gt;::new(core::ptr::null_mut());\n<span class=\"macro\">assert_eq!</span>(atom.fetch_ptr_add(<span class=\"number\">1</span>, Ordering::Relaxed).addr(), <span class=\"number\">0</span>);\n<span class=\"comment\">// Note: units of `size_of::&lt;i64&gt;()`.\n</span><span class=\"macro\">assert_eq!</span>(atom.load(Ordering::Relaxed).addr(), <span class=\"number\">8</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_ptr_sub\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_ptr_sub</a>(&amp;self, val: usize, order: Ordering) -&gt; *mut T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance_atomic_ptr</code>)</span></div></span></summary><div class=\"docblock\"><p>Offsets the pointer’s address by subtracting <code>val</code> (in units of <code>T</code>),\nreturning the previous pointer.</p>\n<p>This is equivalent to using <a href=\"pointer::wrapping_sub\"><code>wrapping_sub</code></a> to atomically perform the\nequivalent of <code>ptr = ptr.wrapping_sub(val);</code>.</p>\n<p>This method operates in units of <code>T</code>, which means that it cannot be used\nto offset the pointer by an amount which is not a multiple of\n<code>size_of::&lt;T&gt;()</code>. This can sometimes be inconvenient, as you may want to\nwork with a deliberately misaligned pointer. In such cases, you may use\nthe <a href=\"Self::fetch_byte_sub\"><code>fetch_byte_sub</code></a> method instead.</p>\n<p><code>fetch_ptr_sub</code> takes an [<code>Ordering</code>] argument which describes the memory\nordering of this operation. All ordering modes are possible. Note that\nusing [<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>],\nand using [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic\noperations on [<code>AtomicPtr</code>].</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_provenance_atomic_ptr)]\n</span><span class=\"kw\">use </span>core::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>array = [<span class=\"number\">1i32</span>, <span class=\"number\">2i32</span>];\n<span class=\"kw\">let </span>atom = AtomicPtr::new(array.as_ptr().wrapping_add(<span class=\"number\">1</span>) <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>);\n\n<span class=\"macro\">assert!</span>(core::ptr::eq(\n    atom.fetch_ptr_sub(<span class=\"number\">1</span>, Ordering::Relaxed),\n    <span class=\"kw-2\">&amp;</span>array[<span class=\"number\">1</span>],\n));\n<span class=\"macro\">assert!</span>(core::ptr::eq(atom.load(Ordering::Relaxed), <span class=\"kw-2\">&amp;</span>array[<span class=\"number\">0</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_byte_add\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_byte_add</a>(&amp;self, val: usize, order: Ordering) -&gt; *mut T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance_atomic_ptr</code>)</span></div></span></summary><div class=\"docblock\"><p>Offsets the pointer’s address by adding <code>val</code> <em>bytes</em>, returning the\nprevious pointer.</p>\n<p>This is equivalent to using <a href=\"pointer::wrapping_byte_add\"><code>wrapping_byte_add</code></a> to atomically\nperform <code>ptr = ptr.wrapping_byte_add(val)</code>.</p>\n<p><code>fetch_byte_add</code> takes an [<code>Ordering</code>] argument which describes the\nmemory ordering of this operation. All ordering modes are possible. Note\nthat using [<code>Acquire</code>] makes the store part of this operation\n[<code>Relaxed</code>], and using [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic\noperations on [<code>AtomicPtr</code>].</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_provenance_atomic_ptr)]\n</span><span class=\"kw\">use </span>core::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>atom = AtomicPtr::&lt;i64&gt;::new(core::ptr::null_mut());\n<span class=\"macro\">assert_eq!</span>(atom.fetch_byte_add(<span class=\"number\">1</span>, Ordering::Relaxed).addr(), <span class=\"number\">0</span>);\n<span class=\"comment\">// Note: in units of bytes, not `size_of::&lt;i64&gt;()`.\n</span><span class=\"macro\">assert_eq!</span>(atom.load(Ordering::Relaxed).addr(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_byte_sub\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_byte_sub</a>(&amp;self, val: usize, order: Ordering) -&gt; *mut T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance_atomic_ptr</code>)</span></div></span></summary><div class=\"docblock\"><p>Offsets the pointer’s address by subtracting <code>val</code> <em>bytes</em>, returning the\nprevious pointer.</p>\n<p>This is equivalent to using <a href=\"pointer::wrapping_byte_sub\"><code>wrapping_byte_sub</code></a> to atomically\nperform <code>ptr = ptr.wrapping_byte_sub(val)</code>.</p>\n<p><code>fetch_byte_sub</code> takes an [<code>Ordering</code>] argument which describes the\nmemory ordering of this operation. All ordering modes are possible. Note\nthat using [<code>Acquire</code>] makes the store part of this operation\n[<code>Relaxed</code>], and using [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic\noperations on [<code>AtomicPtr</code>].</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_provenance_atomic_ptr)]\n</span><span class=\"kw\">use </span>core::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>atom = AtomicPtr::&lt;i64&gt;::new(core::ptr::without_provenance_mut(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(atom.fetch_byte_sub(<span class=\"number\">1</span>, Ordering::Relaxed).addr(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(atom.load(Ordering::Relaxed).addr(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_or\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_or</a>(&amp;self, val: usize, order: Ordering) -&gt; *mut T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance_atomic_ptr</code>)</span></div></span></summary><div class=\"docblock\"><p>Performs a bitwise “or” operation on the address of the current pointer,\nand the argument <code>val</code>, and stores a pointer with provenance of the\ncurrent pointer and the resulting address.</p>\n<p>This is equivalent to using <a href=\"pointer::map_addr\"><code>map_addr</code></a> to atomically perform\n<code>ptr = ptr.map_addr(|a| a | val)</code>. This can be used in tagged\npointer schemes to atomically set tag bits.</p>\n<p><strong>Caveat</strong>: This operation returns the previous value. To compute the\nstored value without losing provenance, you may use <a href=\"pointer::map_addr\"><code>map_addr</code></a>. For\nexample: <code>a.fetch_or(val).map_addr(|a| a | val)</code>.</p>\n<p><code>fetch_or</code> takes an [<code>Ordering</code>] argument which describes the memory\nordering of this operation. All ordering modes are possible. Note that\nusing [<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>],\nand using [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic\noperations on [<code>AtomicPtr</code>].</p>\n<p>This API and its claimed semantics are part of the Strict Provenance\nexperiment, see the [module documentation for <code>ptr</code>][crate::ptr] for\ndetails.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_provenance_atomic_ptr)]\n</span><span class=\"kw\">use </span>core::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>pointer = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">3i64 </span><span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>i64;\n\n<span class=\"kw\">let </span>atom = AtomicPtr::&lt;i64&gt;::new(pointer);\n<span class=\"comment\">// Tag the bottom bit of the pointer.\n</span><span class=\"macro\">assert_eq!</span>(atom.fetch_or(<span class=\"number\">1</span>, Ordering::Relaxed).addr() &amp; <span class=\"number\">1</span>, <span class=\"number\">0</span>);\n<span class=\"comment\">// Extract and untag.\n</span><span class=\"kw\">let </span>tagged = atom.load(Ordering::Relaxed);\n<span class=\"macro\">assert_eq!</span>(tagged.addr() &amp; <span class=\"number\">1</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(tagged.map_addr(|p| p &amp; !<span class=\"number\">1</span>), pointer);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_and\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_and</a>(&amp;self, val: usize, order: Ordering) -&gt; *mut T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance_atomic_ptr</code>)</span></div></span></summary><div class=\"docblock\"><p>Performs a bitwise “and” operation on the address of the current\npointer, and the argument <code>val</code>, and stores a pointer with provenance of\nthe current pointer and the resulting address.</p>\n<p>This is equivalent to using <a href=\"pointer::map_addr\"><code>map_addr</code></a> to atomically perform\n<code>ptr = ptr.map_addr(|a| a &amp; val)</code>. This can be used in tagged\npointer schemes to atomically unset tag bits.</p>\n<p><strong>Caveat</strong>: This operation returns the previous value. To compute the\nstored value without losing provenance, you may use <a href=\"pointer::map_addr\"><code>map_addr</code></a>. For\nexample: <code>a.fetch_and(val).map_addr(|a| a &amp; val)</code>.</p>\n<p><code>fetch_and</code> takes an [<code>Ordering</code>] argument which describes the memory\nordering of this operation. All ordering modes are possible. Note that\nusing [<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>],\nand using [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic\noperations on [<code>AtomicPtr</code>].</p>\n<p>This API and its claimed semantics are part of the Strict Provenance\nexperiment, see the [module documentation for <code>ptr</code>][crate::ptr] for\ndetails.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_provenance_atomic_ptr)]\n</span><span class=\"kw\">use </span>core::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>pointer = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">3i64 </span><span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>i64;\n<span class=\"comment\">// A tagged pointer\n</span><span class=\"kw\">let </span>atom = AtomicPtr::&lt;i64&gt;::new(pointer.map_addr(|a| a | <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(atom.fetch_or(<span class=\"number\">1</span>, Ordering::Relaxed).addr() &amp; <span class=\"number\">1</span>, <span class=\"number\">1</span>);\n<span class=\"comment\">// Untag, and extract the previously tagged pointer.\n</span><span class=\"kw\">let </span>untagged = atom.fetch_and(!<span class=\"number\">1</span>, Ordering::Relaxed)\n    .map_addr(|a| a &amp; !<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(untagged, pointer);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_xor\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_xor</a>(&amp;self, val: usize, order: Ordering) -&gt; *mut T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance_atomic_ptr</code>)</span></div></span></summary><div class=\"docblock\"><p>Performs a bitwise “xor” operation on the address of the current\npointer, and the argument <code>val</code>, and stores a pointer with provenance of\nthe current pointer and the resulting address.</p>\n<p>This is equivalent to using <a href=\"pointer::map_addr\"><code>map_addr</code></a> to atomically perform\n<code>ptr = ptr.map_addr(|a| a ^ val)</code>. This can be used in tagged\npointer schemes to atomically toggle tag bits.</p>\n<p><strong>Caveat</strong>: This operation returns the previous value. To compute the\nstored value without losing provenance, you may use <a href=\"pointer::map_addr\"><code>map_addr</code></a>. For\nexample: <code>a.fetch_xor(val).map_addr(|a| a ^ val)</code>.</p>\n<p><code>fetch_xor</code> takes an [<code>Ordering</code>] argument which describes the memory\nordering of this operation. All ordering modes are possible. Note that\nusing [<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>],\nand using [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic\noperations on [<code>AtomicPtr</code>].</p>\n<p>This API and its claimed semantics are part of the Strict Provenance\nexperiment, see the [module documentation for <code>ptr</code>][crate::ptr] for\ndetails.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_provenance_atomic_ptr)]\n</span><span class=\"kw\">use </span>core::sync::atomic::{AtomicPtr, Ordering};\n\n<span class=\"kw\">let </span>pointer = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">3i64 </span><span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>i64;\n<span class=\"kw\">let </span>atom = AtomicPtr::&lt;i64&gt;::new(pointer);\n\n<span class=\"comment\">// Toggle a tag bit on the pointer.\n</span>atom.fetch_xor(<span class=\"number\">1</span>, Ordering::Relaxed);\n<span class=\"macro\">assert_eq!</span>(atom.load(Ordering::Relaxed).addr() &amp; <span class=\"number\">1</span>, <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0, const since 1.70.0\">1.70.0 (const: 1.70.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_ptr</a>(&amp;self) -&gt; *mut *mut T</h4></section></summary><div class=\"docblock\"><p>Returns a mutable pointer to the underlying pointer.</p>\n<p>Doing non-atomic reads and writes on the resulting pointer can be a data race.\nThis method is mostly useful for FFI, where the function signature may use\n<code>*mut *mut T</code> instead of <code>&amp;AtomicPtr&lt;T&gt;</code>.</p>\n<p>Returning an <code>*mut</code> pointer from a shared reference to this atomic is safe because the\natomic types work with interior mutability. All modifications of an atomic change the value\nthrough a shared reference, and can do so safely as long as they use atomic operations. Any\nuse of the returned raw pointer requires an <code>unsafe</code> block and still has to uphold the same\nrestriction: operations on it must be atomic.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::AtomicPtr;\n\n<span class=\"kw\">extern </span><span class=\"string\">\"C\" </span>{\n    <span class=\"kw\">fn </span>my_atomic_op(arg: <span class=\"kw-2\">*mut *mut </span>u32);\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value = <span class=\"number\">17</span>;\n<span class=\"kw\">let </span>atomic = AtomicPtr::new(<span class=\"kw-2\">&amp;mut </span>value);\n\n<span class=\"comment\">// SAFETY: Safe as long as `my_atomic_op` is atomic.\n</span><span class=\"kw\">unsafe </span>{\n    my_atomic_op(atomic.as_ptr());\n}</code></pre></div>\n</div></details></div></details>",0,"radium::types::RadiumPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-AtomicPtr%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.3.0\">1.3.0</span><a href=\"#impl-Debug-for-AtomicPtr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Debug for AtomicPtr&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Debug","radium::types::RadiumPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-AtomicPtr%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Default-for-AtomicPtr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for AtomicPtr&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; AtomicPtr&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a null <code>AtomicPtr&lt;T&gt;</code>.</p>\n</div></details></div></details>","Default","radium::types::RadiumPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C*mut+T%3E-for-AtomicPtr%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.23.0\">1.23.0</span><a href=\"#impl-From%3C*mut+T%3E-for-AtomicPtr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;*mut T&gt; for AtomicPtr&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(p: *mut T) -&gt; AtomicPtr&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.</p>\n</div></details></div></details>","From<*mut T>","radium::types::RadiumPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-AtomicPtr%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.24.0\">1.24.0</span><a href=\"#impl-Pointer-for-AtomicPtr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Pointer for AtomicPtr&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Pointer","radium::types::RadiumPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Radium-for-AtomicPtr%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#688-758\">Source</a><a href=\"#impl-Radium-for-AtomicPtr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"radium/trait.Radium.html\" title=\"trait radium::Radium\">Radium</a> for AtomicPtr&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#689\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"radium/trait.Radium.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = *mut T</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#691\">Source</a><a href=\"#method.new\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.new\" class=\"fn\">new</a>(value: *mut T) -&gt; Self</h4></section></summary><div class='docblock'>Creates a new value of this type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fence\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#691\">Source</a><a href=\"#method.fence\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.fence\" class=\"fn\">fence</a>(order: Ordering)</h4></section></summary><div class='docblock'>If the underlying value is atomic, calls <a href=\"core::sync::atomic::fence\"><code>fence</code></a> with the given\n<a href=\"core::sync::atomic::Ordering\"><code>Ordering</code></a>. Otherwise, does nothing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#691\">Source</a><a href=\"#method.get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; &amp;mut *mut T</h4></section></summary><div class='docblock'>Returns a mutable reference to the underlying value. <a href=\"radium/trait.Radium.html#tymethod.get_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#691\">Source</a><a href=\"#method.into_inner\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; *mut T</h4></section></summary><div class='docblock'>Consumes the wrapper and returns the contained value. <a href=\"radium/trait.Radium.html#tymethod.into_inner\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#691\">Source</a><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.load\" class=\"fn\">load</a>(&amp;self, order: Ordering) -&gt; *mut T</h4></section></summary><div class='docblock'>Load a value from this object. <a href=\"radium/trait.Radium.html#tymethod.load\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#691\">Source</a><a href=\"#method.store\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.store\" class=\"fn\">store</a>(&amp;self, value: *mut T, order: Ordering)</h4></section></summary><div class='docblock'>Store a value in this object. <a href=\"radium/trait.Radium.html#tymethod.store\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#691\">Source</a><a href=\"#method.swap\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.swap\" class=\"fn\">swap</a>(&amp;self, value: *mut T, order: Ordering) -&gt; *mut T</h4></section></summary><div class='docblock'>Swap with the value stored in this object. <a href=\"radium/trait.Radium.html#tymethod.swap\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_and_swap\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#691\">Source</a><a href=\"#method.compare_and_swap\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.compare_and_swap\" class=\"fn\">compare_and_swap</a>(\n    &amp;self,\n    current: *mut T,\n    new: *mut T,\n    order: Ordering,\n) -&gt; *mut T</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: Use <code>compare_exchange</code> or <code>compare_exchange_weak</code> instead</span></div></span><div class='docblock'>Stores a value into this object if the currently-stored value is the\nsame as the <code>current</code> value. <a href=\"radium/trait.Radium.html#tymethod.compare_and_swap\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_exchange\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#691\">Source</a><a href=\"#method.compare_exchange\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.compare_exchange\" class=\"fn\">compare_exchange</a>(\n    &amp;self,\n    current: *mut T,\n    new: *mut T,\n    success: Ordering,\n    failure: Ordering,\n) -&gt; Result&lt;*mut T, *mut T&gt;</h4></section></summary><div class='docblock'>Stores a value into this object if the currently-stored value is the\nsame as the <code>current</code> value. <a href=\"radium/trait.Radium.html#tymethod.compare_exchange\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_exchange_weak\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#691\">Source</a><a href=\"#method.compare_exchange_weak\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.compare_exchange_weak\" class=\"fn\">compare_exchange_weak</a>(\n    &amp;self,\n    current: *mut T,\n    new: *mut T,\n    success: Ordering,\n    failure: Ordering,\n) -&gt; Result&lt;*mut T, *mut T&gt;</h4></section></summary><div class='docblock'>Stores a value into this object if the currently-stored value is the\nsame as the <code>current</code> value. <a href=\"radium/trait.Radium.html#tymethod.compare_exchange_weak\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_update\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#691\">Source</a><a href=\"#method.fetch_update\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.fetch_update\" class=\"fn\">fetch_update</a>&lt;F&gt;(\n    &amp;self,\n    set_order: Ordering,\n    fetch_order: Ordering,\n    f: F,\n) -&gt; Result&lt;*mut T, *mut T&gt;<div class=\"where\">where\n    F: FnMut(*mut T) -&gt; Option&lt;*mut T&gt;,</div></h4></section></summary><div class='docblock'>Fetches the value, and applies a function to it that returns an\noptional new value. <a href=\"radium/trait.Radium.html#tymethod.fetch_update\">Read more</a></div></details></div></details>","Radium","radium::types::RadiumPtr"],["<section id=\"impl-RefUnwindSafe-for-AtomicPtr%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.14.0\">1.14.0</span><a href=\"#impl-RefUnwindSafe-for-AtomicPtr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; RefUnwindSafe for AtomicPtr&lt;T&gt;</h3></section>","RefUnwindSafe","radium::types::RadiumPtr"],["<section id=\"impl-Send-for-AtomicPtr%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Send-for-AtomicPtr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Send for AtomicPtr&lt;T&gt;</h3></section>","Send","radium::types::RadiumPtr"],["<section id=\"impl-Sync-for-AtomicPtr%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Sync-for-AtomicPtr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sync for AtomicPtr&lt;T&gt;</h3></section>","Sync","radium::types::RadiumPtr"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[68241]}