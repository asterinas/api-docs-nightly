searchState.loadedDescShard("uefi_raw", 0, "Raw interface for working with UEFI.\nThe operation was aborted.\nAccess was denied.\nThe protocol has already been started.\nThe buffer was not the proper size for the request.\nThe buffer is not large enough to hold the requested data. …\nThe security status of the data is unknown or compromised …\nA CRC error was detected.\nTwo-byte character.\nOne-byte character.\nThe physical device reported an error while attempting the …\nThe end of the file was reached.\nBeginning or end of media was reached\nBit indicating that an UEFI status code is an error.\nHandle to an event structure.\nGlobally-unique identifier.\nA HTTP error occurred during the network operation.\nHandle to a UEFI entity (protocol, image, etc).\nAn ICMP error occurred during the network operation.\nThe function encountered an internal version that was …\nThe language specified was invalid.\nA parameter was incorrect.\nThere is an address conflict address allocation\nAn IPv4 or IPv6 internet protocol address.\nAn IPv4 internet protocol address.\nAn IPv6 internet protocol address.\nThe image failed to load.\nThe medium in the device has changed since the last access.\nA Media Access Control (MAC) address.\nThe item was not found.\nThere is no data pending upon return.\nThe protocol has not been started.\nA mapping to a device does not exist.\nThe device does not contain any medium to perform the …\nThe server was not found or did not respond to the request.\nA resource has run out.\nA protocol error occurred during the network operation.\nPhysical memory address. This is always a 64-bit value, …\nThe function was not performed due to a security violation.\nThe operation completed successfully.\nUEFI uses status codes in order to report successes, …\nA TFTP error occurred during the network operation.\nThe timeout time expired.\nThe operation is not supported.\nAn inconstency was detected on the file system.\nThere is no more space on the file system.\nVirtual memory address. This is always a 64-bit value, …\nThe resulting buffer was too small, and the data was …\nThe handle was closed, but the file was not deleted.\nThe resulting buffer contains UEFI-compliant file system.\nThe operation will be processed across a system reset.\nThe data has not been updated within the timeframe set by …\nThe string contained characters that could not be rendered …\nThe handle was closed, but the data to the file was not …\nThe device cannot be written to.\nGUID with all fields set to zero.\nThis member serves to align the whole type to a 4 bytes as …\nUEFI update capsules.\nThe high field of the clock sequence multiplexed with the …\nThe low field of the clock sequence.\nTypes related to firmware storage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a GUID from a 16-byte array. No changes to byte …\nCreate a version 4 GUID from provided random bytes.\nParse a GUID from a string, panicking on failure.\nCreate a <code>Guid</code> from a string at compile time.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the status code indicates an error.\nReturns true if status code indicates success.\nReturns true if status code indicates a warning.\nTrue if all bits are zero, false otherwise.\nCreate a new GUID.\nConstruct a new IPv4 address.\nConstruct a new IPv6 address.\nInterface a C-style enum as an integer newtype.\nThe spatially unique node identifier.\nParse a GUID from a string, panicking on failure.\nProtocol definitions.\nStandard UEFI tables.\nDate and time types.\nThe little-endian high field of the timestamp multiplexed …\nThe little-endian low field of the timestamp.\nThe little-endian middle field of the timestamp.\nConvert to a lower-case hex ASCII string.\nConvert to a 16-byte array.\nParse a GUID from a string.\nAn IPv4 internet protocol address.\nAn IPv6 internet protocol address.\nGet the GUID variant.\nGet the GUID version. This is a sub-type of the variant as …\nDescriptor that defines a scatter-gather list for passing …\nCapsule update flags.\nCommon header at the start of a capsule.\nTrigger a system reset after passing the capsule to the …\nIndicates the firmware should process the capsule after …\nCauses the contents of the capsule to be coalesced from the\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nThe meaning of this bit depends on the capsule GUID.\nEither a data block pointer or a continuation pointer.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGUID that defines the type of data in the capsule.\nSize in bytes of the entire capsule, including the header.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCapsule update flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nSize in bytes of the capsule header. This may be larger …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nSize in bytes of the data block. If zero, the block is …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCorresponds to the C type <code>EFI_FVB_ATTRIBUTES_2</code>.\nCorresponds to the C type <code>EFI_FV_BLOCK_MAP</code>.\nCorresponds to the C type <code>EFI_FIRMWARE_VOLUME_HEADER</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nVariable-length array of block maps, terminated with a …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>Rng</code> protocol.\nMedia information structure\nLogical block address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAbsolute pointer device attributes.\nBitmask used to indicate which bits of a pixel represent a …\nIf set, this device supports an alternate button input.\nIf set, this device returns pressure data in […\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bits indicating the blue channel.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bits indicating the green channel.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bits indicating the red channel.\nThe intersection of a source flags value with the …\nThe reserved bits, which are ignored by the video hardware.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nIndicates the connection is still connected\nClear to send\nThe control bits of a device. These are defined in the …\nData set ready\nTerminal is ready for communications\nDevice default\nDevice default\nEven parity\nAllow the hardware to handle flow control\nEnable hardware loop-back\nThe input buffer is empty\nMark parity\nNo parity\nOdd parity\n1 stop bit\n1.5 stop bits\nThe output buffer is empty\nThe parity of the device.\nRequest the device to send data\nIndicates that a phone line is ringing\nBitmask of the control bits that can be set.\nEnable software loop-back\nSpace parity\nStructure representing the device’s current parameters.\nNumber of stop bits per character.\n2 stop bits\nGet a flags value with all known bits set.\nDevice’s baud rate, or 0 if unknown.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nBitmask of the control bits that this device supports.\nNumber of data bits in each character.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nIf applicable, the parity that is computed or checked for …\nSize in character’s of the device’s buffer.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nIf applicable, the number of stop bits per character.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nIf applicable, the number of microseconds to wait before …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDevice path protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGUID of the original <code>EFI_COMPONENT_NAME_PROTOCOL</code>. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe file is marked for archival by backup software.\nThe file is a directory.\nFile attributes.\nThe file is hidden from normal directory views.\nThe file cannot be opened for modification.\nThe file belongs to the system and must not be physically …\nMask combining all the valid attributes.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe null-terminated name of the file. For a root …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe null-terminated label of the volume.\nThe null-terminated label of the volume.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProperties of Reset Notification.\nRaw reset notification function, to be called if you …\nProperties of the timestamp counter.\nThe maximum value of the timestamp counter before it rolls …\nTimestamp counter frequency, in Hz.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart of the DHCP option data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart of the DHCP packed option data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe “raw” algorithm, when supported, is intended to …\nALGORITHM_SP800_90_CTR_256\nALGORITHM_SP800_90_HASH_256\nALGORITHM_SP800_90_HMAC_256\nALGORITHM_X9_31_3DES\nALGORITHM_X9_31_AES\nIndicates a empty algorithm, used to instantiate a buffer …\nThe algorithms listed are optional, not meant to be …\nRng protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of arguments.\nPointer to a list of arguments.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHandle of the standard error output.\nHandle of the standard input.\nHandle of the standard output.\nThe common header that all UEFI tables begin with.\nA revision of the UEFI specification.\nUEFI services available during boot.\n32-bit CRC-32-Castagnoli of the entire table, calculated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the major revision.\nReturns the minor revision.\nCreates a new revision.\nReserved field that must be set to 0.\nRevision of the spec this table conforms to.\nUEFI services available at runtime, even after the OS …\nUnique identifier for this table.\nThe size in bytes of the entire table.\nFirmware-reserved addresses.\nMemory that holds ACPI tables. Can be reclaimed after they …\nNormal task execution level.\nCode of the boot drivers.\nMemory used to store boot drivers’ data.\nTable of pointers to all the boot services.\nAsync interrupt-style callbacks run at this TPL.\nFree usable memory.\nThis memory region is capable of being protected with the …\nSupports disabling code execution.\nRaw event notification function.\nFlags describing the type of an UEFI event and its …\nHighest priority level.\nThese bits are reserved for describing optional …\nThis memory region is described with additional …\nInterface type of a protocol interface.\nThe code portions of a loaded UEFI application.\nThe data portions of a loaded UEFI applications, as well …\nEnd of the defined memory types. Higher values are …\nA region used for memory-mapped I/O.\nAddress space used for memory-mapped port I/O.\nThis memory region is more reliable than other memory.\nFlags describing the capabilities of a memory range.\nA structure describing a region of memory. This type …\nThe type of a memory range.\nNative interface\nPersistent memory.\nNotifications are masked at this level.\nThe notification function will be enqueued when the event …\nCalling wait_for_event or check_event will enqueue the …\nSize in bytes of a UEFI page.\nAddress space which is part of the processor.\nMemory region which is usable and is also non-volatile.\nThis memory range can be set as read-only.\nSupports read-protection.\nNot usable.\nRange reserved for OEM use.\nRange reserved for OS loaders.\nThe event is allocated from runtime memory. This must be …\nThis memory must be mapped by the OS when a runtime …\nRuntime drivers’ code.\nRuntime services’ code.\nThe event will be signaled at ExitBootServices time. This …\nThe event will be notified when SetVirtualAddressMap is …\nThis memory is earmarked for specific purposes such as for …\nThe event is a timer event and may be passed to …\nTask priority level.\nMemory that must be accepted by the boot target before it …\nSupports marking as uncacheable, exported and supports the …\nSupports marking as uncacheable.\nMemory in which errors have been detected.\nMemory descriptor version number.\nSupport write-back.\nSupports write-combining.\nSupports write-protection.\nSupports write-through.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe capability attributes of this memory range.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nConstruct a custom <code>MemoryType</code>. Values in the range …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWarning: this function pointer is declared as <code>extern &quot;C&quot;</code> …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNumber of 4 KiB pages contained in this range.\nStarting physical address.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nType of memory occupying this range.\nWarning: this function pointer is declared as <code>extern &quot;C&quot;</code> …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nStarting virtual address.\nUEFI configuration table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is never set in the attributes returned by …\nDeprecated.\nVariable is accessible during the time that boot services …\nSystem-wide reset.\nVariable payload begins with an …\nUsed to access global variables.\nVariable is stored in the portion of NVR allocated for …\nUsed to access EFI signature database variables.\nVariable is maintained across a power cycle.\nA platform-specific reset type.\nVariable is accessible during the time that runtime …\nThe type of system reset.\nTable of pointers to all the runtime services.\nThe system is powered off.\nVariable payload begins with an …\nReal time clock capabilities.\nFlags describing the attributes of a variable.\nVariable vendor GUID. This serves as a namespace for …\nSystem-wide re-initialization.\nTimekeeping accuracy in units of 1e-6 parts per million.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nReporting resolution of the clock in counts per second. 1 …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nWhether a time set operation clears the device’s time …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCreate a <code>SystemTable</code> with most fields set to zero.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTime is affected by daylight savings time.\nA bitmask containing daylight savings time information.\nTime has been adjusted for daylight savings time.\nDate and time representation.\nIndicates the time should be interpreted as local time.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nDay of the month. Valid range: <code>1..=31</code>.\nDaylight savings time information.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nHour. Valid range: <code>0..=23</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an invalid <code>Time</code> with all fields set to zero.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nTrue if all fields are within valid ranges, false …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nMinute. Valid range: <code>0..=59</code>.\nMonth. Valid range: <code>1..=12</code>.\nNanosececond. Valid range: <code>0..=999_999_999</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nUnused padding.\nUnused padding.\nThe intersection of a source flags value with the …\nSecond. Valid range: <code>0..=59</code>.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nOffset in minutes from UTC. Valid range: <code>-1440..=1440</code>, or …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nYear. Valid range: <code>1900..=9999</code>.")