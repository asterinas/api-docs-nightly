searchState.loadedDescShard("multiboot2", 0, "Convenient and safe parsing of Multiboot2 Boot Information …\nFirmware-reserved addresses.\nMemory that holds ACPI tables. Can be reclaimed after they …\nThe section occupies memory during the process execution.\nUsable memory holding ACPI information.\nTag <code>14</code>: Also called “AcpiOld” in other multiboot2 …\nTag <code>15</code>: Refers to version 2 and later of Acpi. Also called …\nTag <code>10</code>: APM table. See Advanced Power Management (APM) …\nThe Advanced Power Management (APM) tag.\nAvailable memory free to be used by the OS.\nThe true base size of the struct without any implicit or …\nCode of the boot drivers.\nMemory used to store boot drivers’ data.\nTag <code>4</code>: ‘mem_lower’ and ‘mem_upper’ indicate the …\nBasic memory info tag.\nA Multiboot 2 Boot Information (MBI) accessor.\nThe basic header of a <code>BootInformation</code> as sized Rust type.\nTag <code>2</code>: Name of the bootloader, e.g. ‘GRUB …\nThe bootloader name tag.\nTag <code>5</code>: This tag indicates which BIOS disk device the boot …\nThe end tag ends the information struct.\nBuilder for a Multiboot2 header information.\nColor support.\nFree usable memory.\nThis memory region is capable of being protected with the …\nTag <code>1</code>: Additional command line string. For example <code>&#39;&#39;</code> or …\nThis tag contains the command line string.\nCustom memory map type.\nCustom tag types <code>&gt; 21</code>. The Multiboot2 spec doesn’t …\nMemory which is occupied by defective RAM modules.\nAn C ABI-compatible dynamically sized type with a common …\nThe section holds dynamic linking tables.\nThis section holds a dynamic loader symbol table.\nEFI ExitBootServices was not called tag. This tag has no …\nTag that contains the pointer to the boot loader’s UEFI …\nTag that contains the pointer to the boot loader’s UEFI …\nThe type of a memory range.\nFlags describing the capabilities of a memory range.\nA structure describing a region of memory. This type …\nEFI memory map tag. The embedded <code>EFIMemoryDesc</code>s follows …\nEFI system table in 32 bit mode tag.\nEFI system table in 64 bit mode tag.\nThe section contains executable machine instructions.\nSupports disabling code execution.\nTag <code>11</code>: This tag contains pointer to i386 EFI system table.\nTag <code>19</code>: This tag contains pointer to EFI i386 image …\nTag <code>21</code>: This tag contains pointer to amd64 EFI system …\nTag <code>20</code>: This tag contains pointer to EFI amd64 image …\nTag <code>18</code>: This tag indicates ExitBootServices wasn’t …\nTag <code>17</code>: This tag contains EFI memory map as per EFI …\nA single generic ELF Section.\nELF Section bitflags.\nAn iterator over <code>ElfSection</code>s.\nAn enum abstraction over raw ELF section types.\nTag <code>9</code>: This tag contains section header table from an ELF …\nThis tag contains the section header table from an ELF …\nTag <code>0</code>: Marks the end of the tags.\nThe end tag ends the information struct.\nValues in this inclusive range (<code>[0x6000_0000, 0x6FFF_FFFF)</code>…\nTag <code>8</code>: Framebuffer.\nA framebuffer color descriptor in the palette.\nAn RGB color type field.\nThe VBE Framebuffer information tag.\nStructured accessory to the provided framebuffer type that …\nMode type (text or graphics).\nThe associated <code>Header</code> of this tag.\nThe ID of this tag. This should be unique across all …\nThe ID type that identifies the tag.\nThese bits are reserved for describing optional …\nThis memory region is described with additional …\nThe physical load address tag. Typically, this is only …\nIndexed color.\nLinear framebuffer availability.\nThe code portions of a loaded UEFI application.\nThe data portions of a loaded UEFI applications, as well …\nThis section holds a linker symbol table.\nTag <code>21</code>: This tag contains image load base physical …\nErrors that occur when a chunk of memory can’t be parsed …\nMagic number that a Multiboot2-compliant boot loader will …\nEnd of the defined memory types. Higher values are …\nA region used for memory-mapped I/O.\nAddress space used for memory-mapped port I/O.\nThis memory region is more reliable than other memory.\nA trait to abstract sized and unsized structures (DSTs). …\nThe provided memory can’t be parsed as <code>BootInformation</code>. …\nA descriptor for an available or taken area of physical …\nAbstraction over defined memory types for the memory map …\nABI-friendly version of <code>MemoryAreaType</code>.\nThis tag provides an initial host memory map (legacy boot, …\nThe metadata type for pointers and references to this type.\nThere is no terminating NUL character, although the …\nTag <code>6</code>: Memory map. The map provided is guaranteed to list …\nTag <code>3</code>: Additional Multiboot modules, which are BLOBs …\nAn iterator over all module tags.\nThe module tag can occur multiple times and specifies …\nPersistent memory.\nIs the controller VGA compatible.\nVGA compatibility.\nVGA Window compatibility.\nTag <code>16</code>: This tag contains network information in the …\nThe end tag ends the information struct.\nMissing mandatory end tag.\nThis section holds information that marks the file in some …\nAddress space which is part of the processor.\nMemory region which is usable and is also non-volatile.\nColor ramp is fixed when cleared and programmable when set.\nA trait which associates pointer metadata with a pointee …\nDerives <code>Pointee</code> for the labeled struct which has a …\nValues in this inclusive range (<code>[0x7000_0000, 0x7FFF_FFFF)</code>…\nThe section holds information defined by the program, …\nThe operating behaviour of the RAMDAC.\nWindow is readable?\nThis memory range can be set as read-only.\nSupports read-protection.\nRelocatable window(s) supported?\nNot usable.\nRange reserved for OEM use.\nRange reserved for OS loaders.\nBits in Rsvd field when cleared are reserved and usable …\nDirect RGB color.\nThis memory must be mapped by the OS when a runtime …\nRuntime drivers’ code.\nRuntime services’ code.\nThe section holds relocation entries without explicit …\nThe section holds relocation entries with explicit …\nThis section type is reserved but has unspecified …\nA reserved area that must not be used.\nReserved memory which needs to be preserved on hibernation.\nThis tag contains a copy of RSDP as defined per ACPI 1.0 …\nThis tag contains a copy of RSDP as defined per ACPI 2.0 …\nSignature of RSDP v1.\nSignature of RSDP v2.\nThis memory is earmarked for specific purposes such as for …\nMode supported by hardware configuration.\nCan the DAC be switched between 6 and 8 bit modes.\nTag <code>13</code>: This tag contains a copy of SMBIOS tables as well …\nThis tag contains a copy of SMBIOS tables as well as their …\nError type describing failures when parsing the string …\nThe section holds a string table.\nThe section holds a symbol hash table.\nTTY Output functions supported by BIOS\nExtension of <code>MaybeDynSized</code> for Tags.\nThe common header that all tags have in common. This type …\nIterator over the tags of a Multiboot2 boot information.\nHigher level abstraction for <code>TagTypeId</code> that assigns each …\nSerialized form of <code>TagType</code> that matches the binary …\nEGA Text.\nMemory that must be accepted by the boot target before it …\nSupports marking as uncacheable, exported and supports the …\nSupports marking as uncacheable.\nMemory in which errors have been detected.\nA section of this type occupies no space in the file but …\nThis value marks the section header as inactive; it does …\nThe sequence until the first NUL character is not valid …\nThe Capabilities field indicates the support of specific …\nVBE controller information.\nThe DirectColorModeInfo field describes important …\nA VBE colour field.\nThis tag contains VBE metadata, VBE controller information …\nThe MemoryModel field specifies the general type of memory …\nA Mode attributes bitfield.\nExtended information about a specific VBE display mode …\nThe WindowAttributes describe the characteristics of the …\nMemory descriptor version number.\nTag <code>7</code>: Contains the VBE control information returned by …\nThe section contains data that should be writable during …\nWindow is writeable?\nSupport write-back.\nSupports write-combining.\nSupports write-protection.\nSupports write-through.\nAdds a custom tag.\nAdds a <code>ModuleTag</code> tag.\nAdds a <code>SmbiosTag</code> tag.\nGet the section’s address alignment constraints.\nContains framebuffer physical address.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nSets the <code>ApmTag</code> tag.\nSearch for the <code>ApmTag</code>.\nReturns the whole allocated bytes for this structure …\nReturns a pointer to this structure.\nGet the start address of the boot info as pointer.\nThe capability attributes of this memory range.\nBank size (Measured in Kilobytes.)\nSearch for the <code>BasicMemoryInfoTag</code>.\nReturns the bios device from which the device was booted …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe Blue component of the color.\nBlue colour field.\nSearch for the <code>BootLoaderNameTag</code>.\nSets the <code>BootdevTag</code> tag.\nSearch for the <code>BootdevTag</code>.\nSets the <code>BootLoaderNameTag</code> tag.\nContains number of bits per pixel.\nBits per pixel\nThe type of framebuffer, one of: <code>Indexed</code>, <code>RGB</code> or <code>Text</code>.\nReturns properly aligned bytes on the heap representing a …\nCapabilities of the graphics controller.\nPerforms a memory-safe same-size cast from the …\nCharacter cell width and height in pixels.\nValidation of the RSDPv1 checksum\nValidation of the RSDPv2 extended checksum\nSets the <code>CommandLineTag</code> tag.\nReads the command line of the kernel as Rust string slice …\nReads the command line of the boot module as Rust string …\nSearch for the <code>CommandLineTag</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns VBE controller information returned by the VBE …\nContains the 16-bit code segment (CS) address for the APM …\nProvides the length, in bytes, of the 16-bit code segment (…\nIndicates the length, in bytes, of the data segment (<code>dseg</code>) …\nContains the 16-bit code segment (CS) address used for …\nConstruct a custom <code>MemoryType</code>. Values in the range …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDirect colour mode attributes.\nHolds the 16-bit data segment (DS) address used by the APM …\nIndicates the length, in bytes, of the data segment (<code>dseg</code>) …\nReturns the amount of items in the dynamically sized …\nSets the <code>EFISdt32Tag</code> tag.\nSets the <code>EFIImageHandle32Tag</code> tag.\nSets the <code>EFISdt64Tag</code> tag.\nSets the <code>EFIImageHandle64Tag</code> tag.\nSets the <code>EFIBootServicesNotExitedTag</code> tag.\nSearch for the <code>EFIBootServicesNotExitedTag</code>.\nSearch for the <code>EFIImageHandle32Tag</code>.\nSearch for the <code>EFIImageHandle64Tag</code>.\nSearch for the <code>EFIMemoryMapTag</code>, if the boot services were …\nSets the <code>EFIMemoryMapTag</code> tag.\nSearch for the <code>EFISdt32Tag</code>.\nSearch for the <code>EFISdt64Tag</code>.\nReturns an <code>ElfSectionIter</code> iterator over the ELF Sections, …\nSets the <code>ElfSectionsTag</code> tag.\nSearch for the <code>ElfSectionsTag</code>.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet the end address of the boot info.\nGet the physical end address of the section.\nThe end address of the memory region.\nEnd address of the module\nReturns the size of each entry.\nReturns the entry size.\nReturns the entry version.\nThis field is used to calculate the checksum of the entire …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nIndicates the status and characteristics of the APM …\nGet the section’s flags.\nSets the <code>FramebufferTag</code> tag.\nPhysical address for flat memory frame buffer\nSearch for the <code>FramebufferTag</code>. The result is <code>Some(Err(e))</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nPublic getter to find any Multiboot tag by its type, …\nThe Green component of the color.\nGreen colour field.\nReturns the corresponding <code>Header</code>.\nReturns the underlying <code>Header</code>.\nContains framebuffer height in pixels.\nReturns the physical address of the EFI image handle.\nReturns the physical address of the EFI image handle.\nSets the <code>ImageLoadPhysAddrTag</code> tag.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the segment length of the table of a protected …\nReturns the segment offset of the table of a protected …\nReturns the segment of the table of a protected mode …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nCheck if the <code>ALLOCATED</code> flag is set in the section flags.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nLoads the <code>BootInformation</code> from a pointer. The pointer must …\nReturns the load base address.\nSearch for the <code>ImageLoadPhysAddrTag</code>.\nReturns the major number.\nSets the <code>BasicMemoryInfoTag</code> tag.\nReturn the slice of the provided <code>MemoryArea</code>s.\nReturns an iterator over the provided memory areas.\nReturns the lower memory bound.\nSearch for the <code>MemoryMapTag</code>.\nMemory model type\nReturns the upper memory bound.\nReturns the major number.\nSets the <code>MemoryMapTag</code> tag.\nIndicates current video mode in the format specified in …\nMode attributes.\nReturns VBE mode information returned by the VBE Function …\nFar pointer to the video mode list.\nThe size of the module/the BLOB in memory.\nGet an iterator of all <code>ModuleTag</code>s.\nReads the name of the bootloader that is booting the …\nRead the name of the section.\nSets the <code>NetworkTag</code> tag.\nSearch for the <code>NetworkTag</code>.\nCreates a new builder.\nCreates a new tag.\nConstructs a new tag.\nCreates a new tag.\nCreate a new command line tag from the given string.\nCreate a new tag to pass the EFI32 System Table pointer.\nCreate a new tag to pass the EFI64 System Table pointer.\nConstructs a new tag.\nConstructs a new tag.\nConstructs a new tag.\nCreate a new ElfSectionsTag with the given data.\nConstructs a new tag.\nConstructs a new tag.\nConstructs a new tag.\nCreate a new MemoryArea.\nConstructs a new tag.\nConstructs a new tag.\nCreate a new network tag from the given DHCP package.\nConstructs a new tag.\nConstructs a new tag.\nConstructs a new tag.\nCreates a new header.\nConstructor.\nConstructs a new tag.\nCreate a new EFI memory map tag with the given memory …\nCreate a new EFI memory map tag from the given EFI memory …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNumber of banks\nNumber of images.\nNumber of memory planes.\nReturns the amount of sections.\nAn OEM-supplied string that identifies the OEM.\nAn OEM-supplied string that identifies the OEM.\nFar pointer to the product name string.\nFar pointer to the product revision string.\nVBE implementation software revision.\nA far pointer the the OEM String.\nFar pointer to the vendor name string.\nA pointer to the start of off screen memory.\nThe amount of off screen memory in 1k units.\nRepresents the offset address within the code segment (<code>cseg</code>…\nNumber of 4 KiB pages contained in this range.\nParses the provided byte sequence as Multiboot string, …\nThe part field denotes the subpartition or logical …\nReturns the payload, i.e., all memory that is not occupied …\nReturns the underlying payload.\nStarting physical address.\nContains the pitch in bytes.\nBytes per scan line\nColor field position.\ndefine the bit position within the direct color pixel or …\nThe Red component of the color.\nRed colour field.\nCreates a new fat-pointer backed reference to a …\nCreates a new fat-pointer backed reference to a …\nCreates a new fat-pointer backed reference to a …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReserved colour field.\nHorizontal and vertical resolution in pixels or characters.\nThe revision of the ACPI.\nThe revision of the ACPI.\nSearch for the <code>RsdpV1Tag</code>.\nSearch for the <code>RsdpV2Tag</code>.\nSets the <code>RsdpV1Tag</code> tag.\nSets the <code>RsdpV2Tag</code> tag.\nThe physical (I repeat: physical) address of the RSDT …\nThe physical address of a i386 EFI system table.\nThe physical address of a x86_64 EFI system table.\nGet the section type as an <code>ElfSectionType</code> enum variant.\nGet the “raw” section type as a <code>u32</code>\nGet an iterator over the ELF sections.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nReturns the index of the section header string table.\nThe “RSD PTR “ marker signature.\nThe “RSD PTR “ marker signature.\nVBE Signature aka “VESA”.\nReturns the underlying tag size.\nGet the section’s size in bytes.\nThe size, in bytes, of the memory region.\nColor mask size.\nThe total size of the tag including the header.\nThe size, in bits, of the color components of a direct …\nThe slice field identifies the partition (also known as a …\nSearch for the <code>SmbiosTag</code>.\nGet the start address of the boot info.\nGet the physical start address of the section.\nThe start address of the memory region.\nStart address of the module.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the raw tables.\nReturns an iterator over all tags.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nNumber of 64KiB memory blocks (Added for VBE 2.0+).\nGet the total size of the boot info struct.\nReturns the total size of the structure.\nType of memory occupying this range.\nReturns the underlying <code>TagType</code>.\nThe type of the memory region.\nThe ABI-compatible <code>TagType</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nConvenient wrapper to get the underlying <code>u32</code> …\nSets the <code>VBEInfoTag</code> tag.\nSearch for the <code>VBEInfoTag</code>.\nThe version number of the APM BIOS.\nThe VBE version.\nStarting virtual address.\nContains framebuffer width in pixels.\nWindow A attributes.\nWindow A start segment.\nWindow B attributes.\nWindow B start segment.\nReal mode pointer to window function.\nWindow granularity (Measured in Kilobytes.)\nWindow size.\nPhysical address of the XSDT table.")