searchState.loadedDescShard("iced_x86", 1, "<code>VPBROADCASTD zmm1 {k1}, Ui32(mt)</code>\n<code>VPBROADCASTQ zmm1 {k1}, Ui64(mt)</code>\n<code>VPCMPD k2 {k1}, zmm1, Si32(zmm2/mt), imm8</code>\n<code>VPCMPEQD k2 {k1}, zmm1, Si32(zmm2/mt)</code>\n<code>VPCMPGTD k2 {k1}, zmm1, Si32(zmm2/mt)</code>\n<code>VPCMPLTD k2 {k1}, zmm1, Si32(zmm2/mt)</code>\n<code>VPCMPUD k2 {k1}, zmm1, Si32(zmm2/mt), imm8</code>\n<code>VPERMD zmm1 {k1}, zmm2, zmm3/mt</code>\n<code>VPERMF32X4 zmm1 {k1}, zmm2/mt, imm8</code>\n<code>VPGATHERDD zmm1 {k1}, Ui32(mvt)</code>\n<code>VPGATHERDQ zmm1 {k1}, Ui64(mvt)</code>\n<code>VPMADD231D zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPMADD233D zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPMAXSD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPMAXUD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPMINSD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPMINUD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPMULHD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPMULHUD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPMULLD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPORD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPORQ zmm1 {k1}, zmm2, Si64(zmm3/mt)</code>\n<code>VPREFETCH0 m</code>\n<code>VPREFETCH1 m</code>\n<code>VPREFETCH2 m</code>\n<code>VPREFETCHE0 m</code>\n<code>VPREFETCHE1 m</code>\n<code>VPREFETCHE2 m</code>\n<code>VPREFETCHENTA m</code>\n<code>VPREFETCHNTA m</code>\n<code>VPSBBD zmm1 {k1}, k2, Si32(zmm3/mt)</code>\n<code>VPSBBRD zmm1 {k1}, k2, Si32(zmm3/mt)</code>\n<code>VPSCATTERDD mvt {k1}, Di32(zmm1)</code>\n<code>VPSCATTERDQ mvt {k1}, Di64(zmm1)</code>\n<code>VPSHUFD zmm1 {k1}, zmm2/mt, imm8</code>\n<code>VPSLLD zmm1 {k1}, Si32(zmm2/mt), imm8</code>\n<code>VPSLLVD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPSRAD zmm1 {k1}, Si32(zmm2/mt), imm8</code>\n<code>VPSRAVD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPSRLD zmm1 {k1}, Si32(zmm2/mt), imm8</code>\n<code>VPSRLVD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPSUBD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPSUBRD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPSUBRSETBD zmm1 {k1}, k2, Si32(zmm3/mt)</code>\n<code>VPSUBSETBD zmm1 {k1}, k2, Si32(zmm3/mt)</code>\n<code>VPTESTMD k2 {k1}, zmm1, Si32(zmm2/mt)</code>\n<code>VPXORD zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VPXORQ zmm1 {k1}, zmm2, Si64(zmm3/mt)</code>\n<code>VRCP23PS zmm1 {k1}, zmm2/mt</code>\n<code>VRNDFXPNTPD zmm1 {k1}, Sf64(zmm2/mt), imm8</code>\n<code>VRNDFXPNTPS zmm1 {k1}, Sf32(zmm2/mt), imm8</code>\n<code>VRSQRT23PS zmm1 {k1}, zmm2/mt</code>\n<code>VSCALEPS zmm1 {k1}, zmm2, Si32(zmm3/mt)</code>\n<code>VSCATTERDPD mvt {k1}, Df64(zmm1)</code>\n<code>VSCATTERDPS mvt {k1}, Df32(zmm1)</code>\n<code>VSCATTERPF0DPS Uf32(mvt) {k1}</code>\n<code>VSCATTERPF0HINTDPD Uf64(mvt) {k1}</code>\n<code>VSCATTERPF0HINTDPS Uf32(mvt) {k1}</code>\n<code>VSCATTERPF1DPS Uf32(mvt) {k1}</code>\n<code>VSUBPD zmm1 {k1}, zmm2, Sf64(zmm3/mt)</code>\n<code>VSUBPS zmm1 {k1}, zmm2, Sf32(zmm3/mt)</code>\n<code>VSUBRPD zmm1 {k1}, zmm2, Sf64(zmm3/mt)</code>\n<code>VSUBRPS zmm1 {k1}, zmm2, Sf32(zmm3/mt)</code>\n<code>MASKMOVDQU xmm1, xmm2</code>\n<code>MASKMOVQ mm1, mm2</code>\n<code>MAXPD xmm1, xmm2/m128</code>\n<code>MAXPS xmm1, xmm2/m128</code>\n<code>MAXSD xmm1, xmm2/m64</code>\n<code>MAXSS xmm1, xmm2/m32</code>\n<code>MCOMMIT</code>\nMemory operand.\n<code>ES:[DI]</code>. This operand kind uses <code>Instruction::memory_size()</code>\n<code>ES:[EDI]</code>. This operand kind uses <code>Instruction::memory_size()</code>\n<code>ES:[RDI]</code>. This operand kind uses <code>Instruction::memory_size()</code>\n<code>seg:[DI]</code>. This operand kind uses <code>Instruction::memory_size()</code>…\n<code>seg:[EDI]</code>. This operand kind uses …\n<code>seg:[ESI]</code>. This operand kind uses …\n<code>seg:[RDI]</code>. This operand kind uses …\n<code>seg:[RSI]</code>. This operand kind uses …\n<code>seg:[SI]</code>. This operand kind uses <code>Instruction::memory_size()</code>…\nSize of a memory reference\nMemory size options used by the formatters\n<code>MFENCE</code>\n<code>MFENCE</code>\n<code>MFENCE</code>\n<code>MFENCE</code>\n<code>MFENCE</code>\n<code>MFENCE</code>\n<code>MFENCE</code>\n<code>MFENCE</code>\nShow memory size if a human can’t figure out the size of …\n<code>MINPD xmm1, xmm2/m128</code>\n<code>MINPS xmm1, xmm2/m128</code>\n<code>MINSD xmm1, xmm2/m64</code>\n<code>MINSS xmm1, xmm2/m32</code>\nMnemonic\nAny mnemonic\n<code>MONITOR</code>\n<code>MONITOR</code>\n<code>MONITOR</code>\n<code>MONITORX</code>\n<code>MONITORX</code>\n<code>MONITORX</code>\n<code>MONTMUL</code>\n<code>MONTMUL</code>\n<code>MONTMUL</code>\n<code>MOV AL, moffs8</code>\n<code>MOV AX, moffs16</code>\n<code>MOV EAX, moffs32</code>\n<code>MOV RAX, moffs64</code>\n<code>MOV Sreg, r32/m16</code>\n<code>MOV Sreg, r64/m16</code>\n<code>MOV Sreg, r/m16</code>\n<code>MOV cr, r32</code>\n<code>MOV cr, r64</code>\n<code>MOV dr, r32</code>\n<code>MOV dr, r64</code>\n<code>MOV moffs16, AX</code>\n<code>MOV moffs32, EAX</code>\n<code>MOV moffs64, RAX</code>\n<code>MOV moffs8, AL</code>\n<code>MOV r16, imm16</code>\n<code>MOV r16, r/m16</code>\n<code>MOV r32, cr</code>\n<code>MOV r32, dr</code>\n<code>MOV r32, imm32</code>\n<code>MOV r32, r/m32</code>\n<code>MOV r32, tr</code>\n<code>MOV r32/m16, Sreg</code>\n<code>MOV r64, cr</code>\n<code>MOV r64, dr</code>\n<code>MOV r64, imm64</code>\n<code>MOV r64, r/m64</code>\n<code>MOV r64/m16, Sreg</code>\n<code>MOV r8, imm8</code>\n<code>MOV r8, r/m8</code>\n<code>MOV r/m16, Sreg</code>\n<code>MOV r/m16, imm16</code>\n<code>MOV r/m16, r16</code>\n<code>MOV r/m32, imm32</code>\n<code>MOV r/m32, r32</code>\n<code>MOV r/m64, imm32</code>\n<code>MOV r/m64, r64</code>\n<code>MOV r/m8, imm8</code>\n<code>MOV r/m8, r8</code>\n<code>MOV tr, r32</code>\n<code>MOVAPD xmm1, xmm2/m128</code>\n<code>MOVAPD xmm2/m128, xmm1</code>\n<code>MOVAPS xmm1, xmm2/m128</code>\n<code>MOVAPS xmm2/m128, xmm1</code>\n<code>MOVBE m16, r16</code>\n<code>MOVBE m32, r32</code>\n<code>MOVBE m64, r64</code>\n<code>MOVBE r16, m16</code>\n<code>MOVBE r32, m32</code>\n<code>MOVBE r64, m64</code>\n<code>MOVD mm, r/m32</code>\n<code>MOVD r/m32, mm</code>\n<code>MOVD r/m32, xmm</code>\n<code>MOVD xmm, r/m32</code>\n<code>MOVDDUP xmm1, xmm2/m64</code>\n<code>MOVDIR64B r16, m512</code>\n<code>MOVDIR64B r32, m512</code>\n<code>MOVDIR64B r64, m512</code>\n<code>MOVDIRI m32, r32</code>\n<code>MOVDIRI m64, r64</code>\n<code>MOVDQ2Q mm, xmm</code>\n<code>MOVDQA xmm1, xmm2/m128</code>\n<code>MOVDQA xmm2/m128, xmm1</code>\n<code>MOVDQU xmm1, xmm2/m128</code>\n<code>MOVDQU xmm2/m128, xmm1</code>\n<code>MOVHLPS xmm1, xmm2</code>\n<code>MOVHPD m64, xmm1</code>\n<code>MOVHPD xmm1, m64</code>\n<code>MOVHPS m64, xmm1</code>\n<code>MOVHPS xmm1, m64</code>\n<code>MOVLHPS xmm1, xmm2</code>\n<code>MOVLPD m64, xmm1</code>\n<code>MOVLPD xmm1, m64</code>\n<code>MOVLPS m64, xmm1</code>\n<code>MOVLPS xmm1, m64</code>\n<code>MOVMSKPD r32, xmm</code>\n<code>MOVMSKPD r64, xmm</code>\n<code>MOVMSKPS r32, xmm</code>\n<code>MOVMSKPS r64, xmm</code>\n<code>MOVNTDQ m128, xmm1</code>\n<code>MOVNTDQA xmm1, m128</code>\n<code>MOVNTI m32, r32</code>\n<code>MOVNTI m64, r64</code>\n<code>MOVNTPD m128, xmm1</code>\n<code>MOVNTPS m128, xmm1</code>\n<code>MOVNTQ m64, mm</code>\n<code>MOVNTSD m64, xmm1</code>\n<code>MOVNTSS m32, xmm1</code>\n<code>MOVQ2DQ xmm, mm</code>\n<code>MOVQ mm, mm/m64</code>\n<code>MOVQ mm, r/m64</code>\n<code>MOVQ mm/m64, mm</code>\n<code>MOVQ r/m64, mm</code>\n<code>MOVQ r/m64, xmm</code>\n<code>MOVQ xmm, r/m64</code>\n<code>MOVQ xmm1, xmm2/m64</code>\n<code>MOVQ xmm2/m64, xmm1</code>\n<code>MOVSB</code>\n<code>MOVSD</code>\n<code>MOVSD xmm1, xmm2/m64</code>\n<code>MOVSD xmm1/m64, xmm2</code>\n<code>MOVSHDUP xmm1, xmm2/m128</code>\n<code>MOVSLDUP xmm1, xmm2/m128</code>\n<code>MOVSQ</code>\n<code>MOVSS xmm1, xmm2/m32</code>\n<code>MOVSS xmm2/m32, xmm1</code>\n<code>MOVSW</code>\n<code>MOVSX r16, r/m16</code>\n<code>MOVSX r16, r/m8</code>\n<code>MOVSX r32, r/m16</code>\n<code>MOVSX r32, r/m8</code>\n<code>MOVSX r64, r/m16</code>\n<code>MOVSX r64, r/m8</code>\n<code>MOVSXD r16, r/m16</code>\n<code>MOVSXD r32, r/m32</code>\n<code>MOVSXD r64, r/m32</code>\n<code>MOVUPD xmm1, xmm2/m128</code>\n<code>MOVUPD xmm2/m128, xmm1</code>\n<code>MOVUPS xmm1, xmm2/m128</code>\n<code>MOVUPS xmm2/m128, xmm1</code>\n<code>MOVZX r16, r/m16</code>\n<code>MOVZX r16, r/m8</code>\n<code>MOVZX r32, r/m16</code>\n<code>MOVZX r32, r/m8</code>\n<code>MOVZX r64, r/m16</code>\n<code>MOVZX r64, r/m8</code>\n<code>MPSADBW xmm1, xmm2/m128, imm8</code>\n<code>MUL r/m16</code>\n<code>MUL r/m32</code>\n<code>MUL r/m64</code>\n<code>MUL r/m8</code>\n<code>MULPD xmm1, xmm2/m128</code>\n<code>MULPS xmm1, xmm2/m128</code>\n<code>MULSD xmm1, xmm2/m64</code>\n<code>MULSS xmm1, xmm2/m32</code>\n<code>MWAIT</code>\n<code>MWAITX</code>\n<code>N = 1</code>\n<code>N = 16</code>\n<code>N = b ? 2 : 16</code>\n<code>N = b ? 4 : 16</code>\n<code>N = b ? 8 : 16</code>\n<code>N = 2</code>\n<code>N = 32</code>\n<code>N = b ? 2 : 32</code>\n<code>N = b ? 4 : 32</code>\n<code>N = b ? 8 : 32</code>\n<code>N = 4</code>\n<code>N = b ? 2 : 4</code>\n<code>N = 64</code>\n<code>N = b ? 2 : 64</code>\n<code>N = b ? 4 : 64</code>\n<code>N = b ? 8 : 64</code>\n<code>N = 8</code>\n<code>N = b ? 2 : 8</code>\n<code>N = b ? 4 : 8</code>\nNo option is enabled\nNo option is set\nNo bit is set\nDisable some checks for invalid encodings of instructions, …\nDon’t decode <code>LAHF</code> and <code>SAHF</code> in 64-bit mode\nDon’t add the mnemonic\nDon’t decode <code>TZCNT</code>, decode <code>BSF</code> instead\nDon’t decode <code>LZCNT</code>, decode <code>BSR</code> instead\nDon’t decode <code>PAUSE</code>, decode <code>NOP</code> instead\nDon’t add any prefixes\nDon’t decode <code>WBNOINVD</code>, decode <code>WBINVD</code> instead\nNear 16-bit branch. This operand kind uses …\nNear 32-bit branch. This operand kind uses …\nNear 64-bit branch. This operand kind uses …\n<code>NEG r/m16</code>\n<code>NEG r/m32</code>\n<code>NEG r/m64</code>\n<code>NEG r/m8</code>\nNever show memory size\nThere’s not enough bytes left to decode the instruction\nNo error. The last decoded instruction is a valid …\nNo rounding mode\n<code>NOP r/m16</code>\n<code>NOP r/m32</code>\n<code>NOP r/m64</code>\n<code>NOP</code>\n<code>NOP</code>\n<code>NOP</code>\n<code>NOT r/m16</code>\n<code>NOT r/m32</code>\n<code>NOT r/m64</code>\n<code>NOT r/m8</code>\nNumber\nNumber base\nGets initialized with the default options and can be …\nNumber kind\nDecode some old removed FPU instructions (eg. <code>FRSTPM</code>)\nOctal numbers (base 8)\nInstruction operand kind\nAny operator\n<code>OR AL, imm8</code>\n<code>OR AX, imm16</code>\n<code>OR EAX, imm32</code>\n<code>OR RAX, imm32</code>\n<code>OR r16, r/m16</code>\n<code>OR r32, r/m32</code>\n<code>OR r64, r/m64</code>\n<code>OR r8, r/m8</code>\n<code>OR r/m16, imm16</code>\n<code>OR r/m16, imm8</code>\n<code>OR r/m16, r16</code>\n<code>OR r/m32, imm32</code>\n<code>OR r/m32, imm8</code>\n<code>OR r/m32, r32</code>\n<code>OR r/m64, imm32</code>\n<code>OR r/m64, imm8</code>\n<code>OR r/m64, r64</code>\n<code>OR r/m8, imm8</code>\n<code>OR r/m8, imm8</code>\n<code>OR r/m8, r8</code>\n<code>ORPD xmm1, xmm2/m128</code>\n<code>ORPS xmm1, xmm2/m128</code>\n<code>OUT DX, AL</code>\n<code>OUT DX, AX</code>\n<code>OUT DX, EAX</code>\n<code>OUT imm8, AL</code>\n<code>OUT imm8, AX</code>\n<code>OUT imm8, EAX</code>\n<code>OUTSB</code>\n<code>OUTSD</code>\n<code>OUTSW</code>\nDecode <code>PCOMMIT</code>\n<code>PABSB mm1, mm2/m64</code>\n<code>PABSB xmm1, xmm2/m128</code>\n<code>PABSD mm1, mm2/m64</code>\n<code>PABSD xmm1, xmm2/m128</code>\n<code>PABSW mm1, mm2/m64</code>\n<code>PABSW xmm1, xmm2/m128</code>\n128-bit location: 4 x (2 x <code>bfloat16</code>)\n128-bit location: 4 x (2 x <code>f16</code>)\n128-bit location: 8 x <code>bfloat16</code>\n128-bit location: 8 x <code>f16</code>\n128-bit location: 4 x <code>f32</code>\n128-bit location: 2 x <code>f64</code>\n128-bit location: 8 x <code>i16</code>\n128-bit location: 4 x <code>i32</code>\n128-bit location: 2 x <code>i64</code>\n128-bit location: 16 x <code>i8</code>\n128-bit location: 8 x <code>u16</code>\n128-bit location: 4 x <code>u32</code>\n128-bit location: 2 x <code>u52</code>\n128-bit location: 2 x <code>u64</code>\n128-bit location: 16 x <code>u8</code>\n16-bit location: 2 x <code>i8</code>\n16-bit location: 2 x <code>u8</code>\n256-bit location: 8 x (2 x <code>bfloat16</code>)\n256-bit location: 8 x (2 x <code>f16</code>)\n256-bit location: 16 x <code>bfloat16</code>\n256-bit location: 2 x <code>f128</code>\n256-bit location: 16 x <code>f16</code>\n256-bit location: 8 x <code>f32</code>\n256-bit location: 4 x <code>f64</code>\n256-bit location: 2 x <code>i128</code>\n256-bit location: 16 x <code>i16</code>\n256-bit location: 8 x <code>i32</code>\n256-bit location: 4 x <code>i64</code>\n256-bit location: 32 x <code>i8</code>\n256-bit location: 2 x <code>u128</code>\n256-bit location: 16 x <code>u16</code>\n256-bit location: 8 x <code>u32</code>\n256-bit location: 4 x <code>u52</code>\n256-bit location: 4 x <code>u64</code>\n256-bit location: 32 x <code>u8</code>\n32-bit location: 2 x <code>bfloat16</code>\n32-bit location: 2 x <code>f16</code>\n32-bit location: 2 x <code>i16</code>\n32-bit location: 4 x <code>i8</code>\n32-bit location: 2 x <code>u16</code>\n32-bit location: 4 x <code>u8</code>\n512-bit location: 16 x (2 x <code>bfloat16</code>)\n512-bit location: 16 x (2 x <code>f16</code>)\n512-bit location: 32 x <code>f16</code>\n512-bit location: 16 x <code>f32</code>\n512-bit location: 8 x <code>f64</code>\n512-bit location: 32 x <code>i16</code>\n512-bit location: 16 x <code>i32</code>\n512-bit location: 8 x <code>i64</code>\n512-bit location: 64 x <code>i8</code>\n256-bit location: 4 x <code>u128</code>\n512-bit location: 32 x <code>u16</code>\n512-bit location: 16 x <code>u32</code>\n512-bit location: 8 x <code>u52</code>\n512-bit location: 8 x <code>u64</code>\n512-bit location: 64 x <code>u8</code>\n64-bit location: 4 x <code>f16</code>\n64-bit location: 2 x <code>f32</code>\n64-bit location: 4 x <code>i16</code>\n64-bit location: 2 x <code>i32</code>\n64-bit location: 8 x <code>i8</code>\n64-bit location: 4 x <code>u16</code>\n64-bit location: 2 x <code>u32</code>\n64-bit location: 8 x <code>u8</code>\n<code>PACKSSDW mm1, mm2/m64</code>\n<code>PACKSSDW xmm1, xmm2/m128</code>\n<code>PACKSSWB mm1, mm2/m64</code>\n<code>PACKSSWB xmm1, xmm2/m128</code>\n<code>PACKUSDW xmm1, xmm2/m128</code>\n<code>PACKUSWB mm, mm/m64</code>\n<code>PACKUSWB xmm1, xmm2/m128</code>\n<code>PADDB mm, mm/m64</code>\n<code>PADDB xmm1, xmm2/m128</code>\n<code>PADDD mm, mm/m64</code>\n<code>PADDD xmm1, xmm2/m128</code>\n<code>PADDQ mm, mm/m64</code>\n<code>PADDQ xmm1, xmm2/m128</code>\n<code>PADDSB mm, mm/m64</code>\n<code>PADDSB xmm1, xmm2/m128</code>\n<code>PADDSIW mm, mm/m64</code>\n<code>PADDSW mm, mm/m64</code>\n<code>PADDSW xmm1, xmm2/m128</code>\n<code>PADDUSB mm, mm/m64</code>\n<code>PADDUSB xmm1, xmm2/m128</code>\n<code>PADDUSW mm, mm/m64</code>\n<code>PADDUSW xmm1, xmm2/m128</code>\n<code>PADDW mm, mm/m64</code>\n<code>PADDW xmm1, xmm2/m128</code>\n<code>PALIGNR mm1, mm2/m64, imm8</code>\n<code>PALIGNR xmm1, xmm2/m128, imm8</code>\n<code>PAND mm, mm/m64</code>\n<code>PAND xmm1, xmm2/m128</code>\n<code>PANDN mm, mm/m64</code>\n<code>PANDN xmm1, xmm2/m128</code>\n<code>PAUSE</code>\n<code>PAVEB mm, mm/m64</code>\n<code>PAVGB mm1, mm2/m64</code>\n<code>PAVGB xmm1, xmm2/m128</code>\n<code>PAVGW mm1, mm2/m64</code>\n<code>PAVGW xmm1, xmm2/m128</code>\n<code>PBLENDVB xmm1, xmm2/m128, &lt;XMM0&gt;</code>\n<code>PBLENDW xmm1, xmm2/m128, imm8</code>\n<code>PBNDKB</code>\n<code>PCLMULQDQ xmm1, xmm2/m128, imm8</code>\n<code>PCMPEQB mm, mm/m64</code>\n<code>PCMPEQB xmm1, xmm2/m128</code>\n<code>PCMPEQD mm, mm/m64</code>\n<code>PCMPEQD xmm1, xmm2/m128</code>\n<code>PCMPEQQ xmm1, xmm2/m128</code>\n<code>PCMPEQW mm, mm/m64</code>\n<code>PCMPEQW xmm1, xmm2/m128</code>\n<code>PCMPESTRI64 xmm1, xmm2/m128, imm8</code>\n<code>PCMPESTRI xmm1, xmm2/m128, imm8</code>\n<code>PCMPESTRM64 xmm1, xmm2/m128, imm8</code>\n<code>PCMPESTRM xmm1, xmm2/m128, imm8</code>\n<code>PCMPGTB mm, mm/m64</code>\n<code>PCMPGTB xmm1, xmm2/m128</code>\n<code>PCMPGTD mm, mm/m64</code>\n<code>PCMPGTD xmm1, xmm2/m128</code>\n<code>PCMPGTQ xmm1, xmm2/m128</code>\n<code>PCMPGTW mm, mm/m64</code>\n<code>PCMPGTW xmm1, xmm2/m128</code>\n<code>PCMPISTRI xmm1, xmm2/m128, imm8</code>\n<code>PCMPISTRM xmm1, xmm2/m128, imm8</code>\n<code>PCOMMIT</code>\n<code>PCONFIG</code>\n<code>PDISTIB mm, m64</code>\n<code>PEXTRB r32/m8, xmm2, imm8</code>\n<code>PEXTRB r64/m8, xmm2, imm8</code>\n<code>PEXTRD r/m32, xmm2, imm8</code>\n<code>PEXTRQ r/m64, xmm2, imm8</code>\n<code>PEXTRW r32, mm, imm8</code>\n<code>PEXTRW r32, xmm, imm8</code>\n<code>PEXTRW r32/m16, xmm, imm8</code>\n<code>PEXTRW r64, mm, imm8</code>\n<code>PEXTRW r64, xmm, imm8</code>\n<code>PEXTRW r64/m16, xmm, imm8</code>\n<code>PHADDD mm1, mm2/m64</code>\n<code>PHADDD xmm1, xmm2/m128</code>\n<code>PHADDSW mm1, mm2/m64</code>\n<code>PHADDSW xmm1, xmm2/m128</code>\n<code>PHADDW mm1, mm2/m64</code>\n<code>PHADDW xmm1, xmm2/m128</code>\n<code>PHMINPOSUW xmm1, xmm2/m128</code>\n<code>PHSUBD mm1, mm2/m64</code>\n<code>PHSUBD xmm1, xmm2/m128</code>\n<code>PHSUBSW mm1, mm2/m64</code>\n<code>PHSUBSW xmm1, xmm2/m128</code>\n<code>PHSUBW mm1, mm2/m64</code>\n<code>PHSUBW xmm1, xmm2/m128</code>\n<code>PINSRB xmm1, r32/m8, imm8</code>\n<code>PINSRB xmm1, r64/m8, imm8</code>\n<code>PINSRD xmm1, r/m32, imm8</code>\n<code>PINSRQ xmm1, r/m64, imm8</code>\n<code>PINSRW mm, r32/m16, imm8</code>\n<code>PINSRW mm, r64/m16, imm8</code>\n<code>PINSRW xmm, r32/m16, imm8</code>\n<code>PINSRW xmm, r64/m16, imm8</code>\n<code>PMACHRIW mm, m64</code>\n<code>PMADDUBSW mm1, mm2/m64</code>\n<code>PMADDUBSW xmm1, xmm2/m128</code>\n<code>PMADDWD mm, mm/m64</code>\n<code>PMADDWD xmm1, xmm2/m128</code>\n<code>PMAGW mm, mm/m64</code>\n<code>PMAXSB xmm1, xmm2/m128</code>\n<code>PMAXSD xmm1, xmm2/m128</code>\n<code>PMAXSW mm1, mm2/m64</code>\n<code>PMAXSW xmm1, xmm2/m128</code>\n<code>PMAXUB mm1, mm2/m64</code>\n<code>PMAXUB xmm1, xmm2/m128</code>\n<code>PMAXUD xmm1, xmm2/m128</code>\n<code>PMAXUW xmm1, xmm2/m128</code>\n<code>PMINSB xmm1, xmm2/m128</code>\n<code>PMINSD xmm1, xmm2/m128</code>\n<code>PMINSW mm1, mm2/m64</code>\n<code>PMINSW xmm1, xmm2/m128</code>\n<code>PMINUB mm1, mm2/m64</code>\n<code>PMINUB xmm1, xmm2/m128</code>\n<code>PMINUD xmm1, xmm2/m128</code>\n<code>PMINUW xmm1, xmm2/m128</code>\n<code>PMOVMSKB r32, mm</code>\n<code>PMOVMSKB r32, xmm</code>\n<code>PMOVMSKB r64, mm</code>\n<code>PMOVMSKB r64, xmm</code>\n<code>PMOVSXBD xmm1, xmm2/m32</code>\n<code>PMOVSXBQ xmm1, xmm2/m16</code>\n<code>PMOVSXBW xmm1, xmm2/m64</code>\n<code>PMOVSXDQ xmm1, xmm2/m64</code>\n<code>PMOVSXWD xmm1, xmm2/m64</code>\n<code>PMOVSXWQ xmm1, xmm2/m32</code>\n<code>PMOVZXBD xmm1, xmm2/m32</code>\n<code>PMOVZXBQ xmm1, xmm2/m16</code>\n<code>PMOVZXBW xmm1, xmm2/m64</code>\n<code>PMOVZXDQ xmm1, xmm2/m64</code>\n<code>PMOVZXWD xmm1, xmm2/m64</code>\n<code>PMOVZXWQ xmm1, xmm2/m32</code>\n<code>PMULDQ xmm1, xmm2/m128</code>\n<code>PMULHRIW mm, mm/m64</code>\n<code>PMULHRSW mm1, mm2/m64</code>\n<code>PMULHRSW xmm1, xmm2/m128</code>\n<code>PMULHRW mm, mm/m64</code>\n<code>PMULHUW mm1, mm2/m64</code>\n<code>PMULHUW xmm1, xmm2/m128</code>\n<code>PMULHW mm, mm/m64</code>\n<code>PMULHW xmm1, xmm2/m128</code>\n<code>PMULLD xmm1, xmm2/m128</code>\n<code>PMULLW mm, mm/m64</code>\n<code>PMULLW xmm1, xmm2/m128</code>\n<code>PMULUDQ mm1, mm2/m64</code>\n<code>PMULUDQ xmm1, xmm2/m128</code>\n<code>PMVGEZB mm, m64</code>\n<code>PMVLZB mm, m64</code>\n<code>PMVNZB mm, m64</code>\n<code>PMVZB mm, m64</code>\n<code>POP r16</code>\n<code>POP r32</code>\n<code>POP r64</code>\n<code>POP r/m16</code>\n<code>POP r/m32</code>\n<code>POP r/m64</code>\n<code>POPAD</code>\n<code>POPA</code>\n<code>POPCNT r16, r/m16</code>\n<code>POPCNT r32, r/m32</code>\n<code>POPCNT r64, r/m64</code>\n<code>POP DS</code>\n<code>POP ES</code>\n<code>POP FS</code>\n<code>POP GS</code>\n<code>POP SS</code>\n<code>POPFD</code>\n<code>POPFQ</code>\n<code>POPF</code>\n<code>POP FS</code>\n<code>POP GS</code>\n<code>POP CS</code>\n<code>POP DS</code>\n<code>POP ES</code>\n<code>POP FS</code>\n<code>POP GS</code>\n<code>POP SS</code>\n<code>POR mm, mm/m64</code>\n<code>POR xmm1, xmm2/m128</code>\n<code>PREFETCH m8</code>\n<code>PREFETCHIT0 m8</code>\n<code>PREFETCHIT1 m8</code>\n<code>PREFETCHNTA m8</code>\n<code>PREFETCHW m8</code>\n<code>PREFETCH m8</code>\n<code>PREFETCH m8</code>\n<code>PREFETCH m8</code>\n<code>PREFETCH m8</code>\n<code>PREFETCHT0 m8</code>\n<code>PREFETCHT1 m8</code>\n<code>PREFETCHT2 m8</code>\n<code>PREFETCHW m8</code>\n<code>PREFETCHWT1 m8</code>\nAny prefix\nPrefix\n<code>PSADBW mm1, mm2/m64</code>\n<code>PSADBW xmm1, xmm2/m128</code>\n<code>PSHUFB mm1, mm2/m64</code>\n<code>PSHUFB xmm1, xmm2/m128</code>\n<code>PSHUFD xmm1, xmm2/m128, imm8</code>\n<code>PSHUFHW xmm1, xmm2/m128, imm8</code>\n<code>PSHUFLW xmm1, xmm2/m128, imm8</code>\n<code>PSHUFW mm1, mm2/m64, imm8</code>\n<code>PSIGNB mm1, mm2/m64</code>\n<code>PSIGNB xmm1, xmm2/m128</code>\n<code>PSIGND mm1, mm2/m64</code>\n<code>PSIGND xmm1, xmm2/m128</code>\n<code>PSIGNW mm1, mm2/m64</code>\n<code>PSIGNW xmm1, xmm2/m128</code>\n<code>PSLLD mm, imm8</code>\n<code>PSLLD mm, mm/m64</code>\n<code>PSLLD xmm1, imm8</code>\n<code>PSLLD xmm1, xmm2/m128</code>\n<code>PSLLDQ xmm1, imm8</code>\n<code>PSLLQ mm, imm8</code>\n<code>PSLLQ mm, mm/m64</code>\n<code>PSLLQ xmm1, imm8</code>\n<code>PSLLQ xmm1, xmm2/m128</code>\n<code>PSLLW mm1, imm8</code>\n<code>PSLLW mm, mm/m64</code>\n<code>PSLLW xmm1, imm8</code>\n<code>PSLLW xmm1, xmm2/m128</code>\n<code>PSMASH</code>\n<code>PSRAD mm, imm8</code>\n<code>PSRAD mm, mm/m64</code>\n<code>PSRAD xmm1, imm8</code>\n<code>PSRAD xmm1, xmm2/m128</code>\n<code>PSRAW mm, imm8</code>\n<code>PSRAW mm, mm/m64</code>\n<code>PSRAW xmm1, imm8</code>\n<code>PSRAW xmm1, xmm2/m128</code>\n<code>PSRLD mm, imm8</code>\n<code>PSRLD mm, mm/m64</code>\n<code>PSRLD xmm1, imm8</code>\n<code>PSRLD xmm1, xmm2/m128</code>\n<code>PSRLDQ xmm1, imm8</code>\n<code>PSRLQ mm, imm8</code>\n<code>PSRLQ mm, mm/m64</code>\n<code>PSRLQ xmm1, imm8</code>\n<code>PSRLQ xmm1, xmm2/m128</code>\n<code>PSRLW mm, imm8</code>\n<code>PSRLW mm, mm/m64</code>\n<code>PSRLW xmm1, imm8</code>\n<code>PSRLW xmm1, xmm2/m128</code>\n<code>PSUBB mm, mm/m64</code>\n<code>PSUBB xmm1, xmm2/m128</code>\n<code>PSUBD mm, mm/m64</code>\n<code>PSUBD xmm1, xmm2/m128</code>\n<code>PSUBQ mm1, mm2/m64</code>\n<code>PSUBQ xmm1, xmm2/m128</code>\n<code>PSUBSB mm, mm/m64</code>\n<code>PSUBSB xmm1, xmm2/m128</code>\n<code>PSUBSIW mm, mm/m64</code>\n<code>PSUBSW mm, mm/m64</code>\n<code>PSUBSW xmm1, xmm2/m128</code>\n<code>PSUBUSB mm, mm/m64</code>\n<code>PSUBUSB xmm1, xmm2/m128</code>\n<code>PSUBUSW mm, mm/m64</code>\n<code>PSUBUSW xmm1, xmm2/m128</code>\n<code>PSUBW mm, mm/m64</code>\n<code>PSUBW xmm1, xmm2/m128</code>\n<code>PTEST xmm1, xmm2/m128</code>\n<code>PTWRITE r/m32</code>\n<code>PTWRITE r/m64</code>\nAny punctuation\n<code>PUNPCKHBW mm, mm/m64</code>\n<code>PUNPCKHBW xmm1, xmm2/m128</code>\n<code>PUNPCKHDQ mm, mm/m64</code>\n<code>PUNPCKHDQ xmm1, xmm2/m128</code>\n<code>PUNPCKHQDQ xmm1, xmm2/m128</code>\n<code>PUNPCKHWD mm, mm/m64</code>\n<code>PUNPCKHWD xmm1, xmm2/m128</code>\n<code>PUNPCKLBW mm, mm/m32</code>\n<code>PUNPCKLBW xmm1, xmm2/m128</code>\n<code>PUNPCKLDQ mm, mm/m32</code>\n<code>PUNPCKLDQ xmm1, xmm2/m128</code>\n<code>PUNPCKLQDQ xmm1, xmm2/m128</code>\n<code>PUNPCKLWD mm, mm/m32</code>\n<code>PUNPCKLWD xmm1, xmm2/m128</code>\n<code>PUSH imm16</code>\n<code>PUSH r16</code>\n<code>PUSH r32</code>\n<code>PUSH r64</code>\n<code>PUSH r/m16</code>\n<code>PUSH r/m32</code>\n<code>PUSH r/m64</code>\n<code>PUSHAD</code>\n<code>PUSHA</code>\n<code>PUSH CS</code>\n<code>PUSH DS</code>\n<code>PUSH ES</code>\n<code>PUSH FS</code>\n<code>PUSH GS</code>\n<code>PUSH SS</code>\n<code>PUSH imm32</code>\n<code>PUSH imm8</code>\n<code>PUSHFD</code>\n<code>PUSHFQ</code>\n<code>PUSHF</code>\n<code>PUSH FS</code>\n<code>PUSH GS</code>\n<code>PUSH imm32</code>\n<code>PUSH imm8</code>\n<code>PUSH CS</code>\n<code>PUSH DS</code>\n<code>PUSH ES</code>\n<code>PUSH FS</code>\n<code>PUSH GS</code>\n<code>PUSH SS</code>\n<code>PUSH imm8</code>\n<code>PVALIDATE</code>\n<code>PVALIDATE</code>\n<code>PVALIDATE</code>\n<code>PXOR mm, mm/m64</code>\n<code>PXOR xmm1, xmm2/m128</code>\nMemory location contains a 64-bit offset (…\nIt’s a symbol relative to a register, eg. a struct …\n<code>RCL r/m16, 1</code>\n<code>RCL r/m16, CL</code>\n<code>RCL r/m16, imm8</code>\n<code>RCL r/m32, 1</code>\n<code>RCL r/m32, CL</code>\n<code>RCL r/m32, imm8</code>\n<code>RCL r/m64, 1</code>\n<code>RCL r/m64, CL</code>\n<code>RCL r/m64, imm8</code>\n<code>RCL r/m8, 1</code>\n<code>RCL r/m8, CL</code>\n<code>RCL r/m8, imm8</code>\n<code>RCPPS xmm1, xmm2/m128</code>\n<code>RCPSS xmm1, xmm2/m32</code>\n<code>RCR r/m16, 1</code>\n<code>RCR r/m16, CL</code>\n<code>RCR r/m16, imm8</code>\n<code>RCR r/m32, 1</code>\n<code>RCR r/m32, CL</code>\n<code>RCR r/m32, imm8</code>\n<code>RCR r/m64, 1</code>\n<code>RCR r/m64, CL</code>\n<code>RCR r/m64, imm8</code>\n<code>RCR r/m8, 1</code>\n<code>RCR r/m8, CL</code>\n<code>RCR r/m8, imm8</code>\n<code>RDFSBASE r32</code>\n<code>RDFSBASE r64</code>\n<code>RDGSBASE r32</code>\n<code>RDGSBASE r64</code>\n<code>RDM</code>\n<code>RDMSR</code>\n<code>RDMSRLIST</code>\n<code>RDPID r32</code>\n<code>RDPID r64</code>\n<code>RDPKRU</code>\n<code>RDPMC</code>\n<code>RDPRU</code>\n<code>RDRAND r16</code>\n<code>RDRAND r32</code>\n<code>RDRAND r64</code>\n<code>RDSEED r16</code>\n<code>RDSEED r32</code>\n<code>RDSEED r64</code>\n<code>RDSHR r/m32</code>\n<code>RDSSPD r32</code>\n<code>RDSSPQ r64</code>\n<code>RDTSC</code>\n<code>RDTSCP</code>\n<code>RDUDBG</code>\nA register\nA register (<code>Register</code>).\nAny register\n<code>RESERVEDNOP r/m16, r16</code>\n<code>RESERVEDNOP r/m16, r16</code>\n<code>RESERVEDNOP r/m16, r16</code>\n<code>RESERVEDNOP r/m16, r16</code>\n<code>RESERVEDNOP r/m16, r16</code>\n<code>RESERVEDNOP r/m16, r16</code>\n<code>RESERVEDNOP r/m16, r16</code>\n<code>RESERVEDNOP r/m16, r16</code>\n<code>RESERVEDNOP r/m16, r16</code>\n<code>RESERVEDNOP r/m32, r32</code>\n<code>RESERVEDNOP r/m32, r32</code>\n<code>RESERVEDNOP r/m32, r32</code>\n<code>RESERVEDNOP r/m32, r32</code>\n<code>RESERVEDNOP r/m32, r32</code>\n<code>RESERVEDNOP r/m32, r32</code>\n<code>RESERVEDNOP r/m32, r32</code>\n<code>RESERVEDNOP r/m32, r32</code>\n<code>RESERVEDNOP r/m32, r32</code>\n<code>RESERVEDNOP r/m64, r64</code>\n<code>RESERVEDNOP r/m64, r64</code>\n<code>RESERVEDNOP r/m64, r64</code>\n<code>RESERVEDNOP r/m64, r64</code>\n<code>RESERVEDNOP r/m64, r64</code>\n<code>RESERVEDNOP r/m64, r64</code>\n<code>RESERVEDNOP r/m64, r64</code>\n<code>RESERVEDNOP r/m64, r64</code>\n<code>RESERVEDNOP r/m64, r64</code>\n<code>RETF</code>\n<code>RETF imm16</code>\n<code>RETF</code>\n<code>RETF imm16</code>\n<code>RETF</code>\n<code>RETF imm16</code>\n<code>RET</code>\n<code>RET imm16</code>\n<code>RET</code>\n<code>RET imm16</code>\n<code>RET</code>\n<code>RET imm16</code>\n<code>RMPADJUST</code>\n<code>RMPQUERY</code>\n<code>RMPUPDATE</code>\n<code>ROL r/m16, 1</code>\n<code>ROL r/m16, CL</code>\n<code>ROL r/m16, imm8</code>\n<code>ROL r/m32, 1</code>\n<code>ROL r/m32, CL</code>\n<code>ROL r/m32, imm8</code>\n<code>ROL r/m64, 1</code>\n<code>ROL r/m64, CL</code>\n<code>ROL r/m64, imm8</code>\n<code>ROL r/m8, 1</code>\n<code>ROL r/m8, CL</code>\n<code>ROL r/m8, imm8</code>\n<code>ROR r/m16, 1</code>\n<code>ROR r/m16, CL</code>\n<code>ROR r/m16, imm8</code>\n<code>ROR r/m32, 1</code>\n<code>ROR r/m32, CL</code>\n<code>ROR r/m32, imm8</code>\n<code>ROR r/m64, 1</code>\n<code>ROR r/m64, CL</code>\n<code>ROR r/m64, imm8</code>\n<code>ROR r/m8, 1</code>\n<code>ROR r/m8, CL</code>\n<code>ROR r/m8, imm8</code>\nRound down (toward -inf)\nRound to nearest (even)\nRound toward zero (truncate)\nRound up (toward +inf)\nRounding control\nRounding control, eg. <code>{rd-sae}</code>\n<code>ROUNDPD xmm1, xmm2/m128, imm8</code>\n<code>ROUNDPS xmm1, xmm2/m128, imm8</code>\n<code>ROUNDSD xmm1, xmm2/m64, imm8</code>\n<code>ROUNDSS xmm1, xmm2/m32, imm8</code>\n<code>RSDC Sreg, m80</code>\n<code>RSLDT m80</code>\n<code>RSM</code>\n<code>RSQRTPS xmm1, xmm2/m128</code>\n<code>RSQRTSS xmm1, xmm2/m32</code>\n<code>RSTORSSP m64</code>\n<code>RSTS m80</code>\nIt’s a signed symbol and it should be displayed as …\n<code>SAHF</code>\n<code>SAL r/m16, 1</code>\n<code>SAL r/m16, CL</code>\n<code>SAL r/m16, imm8</code>\n<code>SAL r/m32, 1</code>\n<code>SAL r/m32, CL</code>\n<code>SAL r/m32, imm8</code>\n<code>SAL r/m64, 1</code>\n<code>SAL r/m64, CL</code>\n<code>SAL r/m64, imm8</code>\n<code>SAL r/m8, 1</code>\n<code>SAL r/m8, CL</code>\n<code>SAL r/m8, imm8</code>\n<code>SALC</code>\n<code>SAR r/m16, 1</code>\n<code>SAR r/m16, CL</code>\n<code>SAR r/m16, imm8</code>\n<code>SAR r/m32, 1</code>\n<code>SAR r/m32, CL</code>\n<code>SAR r/m32, imm8</code>\n<code>SAR r/m64, 1</code>\n<code>SAR r/m64, CL</code>\n<code>SAR r/m64, imm8</code>\n<code>SAR r/m8, 1</code>\n<code>SAR r/m8, CL</code>\n<code>SAR r/m8, imm8</code>\n<code>SAVEPREVSSP</code>\n<code>SBB AL, imm8</code>\n<code>SBB AX, imm16</code>\n<code>SBB EAX, imm32</code>\n<code>SBB RAX, imm32</code>\n<code>SBB r16, r/m16</code>\n<code>SBB r32, r/m32</code>\n<code>SBB r64, r/m64</code>\n<code>SBB r8, r/m8</code>\n<code>SBB r/m16, imm16</code>\n<code>SBB r/m16, imm8</code>\n<code>SBB r/m16, r16</code>\n<code>SBB r/m32, imm32</code>\n<code>SBB r/m32, imm8</code>\n<code>SBB r/m32, r32</code>\n<code>SBB r/m64, imm32</code>\n<code>SBB r/m64, imm8</code>\n<code>SBB r/m64, r64</code>\n<code>SBB r/m8, imm8</code>\n<code>SBB r/m8, imm8</code>\n<code>SBB r/m8, r8</code>\n<code>SCASB</code>\n<code>SCASD</code>\n<code>SCASQ</code>\n<code>SCASW</code>\n<code>SEAMCALL</code>\n<code>SEAMOPS</code>\n<code>SEAMRET</code>\nMemory location contains a seg:ptr pair, <code>u16</code> (offset) + <code>u16</code>…\nMemory location contains a seg:ptr pair, <code>u32</code> (offset) + <code>u16</code>…\nMemory location contains a seg:ptr pair, <code>u64</code> (offset) + <code>u16</code>…\n80-bit segment descriptor and selector: 0-7 = descriptor, …\nSelector value (eg. far <code>JMP</code>/<code>CALL</code>)\n<code>SENDUIPI r64</code>\n<code>SERIALIZE</code>\n<code>SETA r/m8</code>\n<code>SETAE r/m8</code>\n<code>SETB r/m8</code>\n<code>SETBE r/m8</code>\n<code>SETE r/m8</code>\n<code>SETG r/m8</code>\n<code>SETGE r/m8</code>\n<code>SETL r/m8</code>\n<code>SETLE r/m8</code>\n<code>SETNE r/m8</code>\n<code>SETNO r/m8</code>\n<code>SETNP r/m8</code>\n<code>SETNS r/m8</code>\n<code>SETO r/m8</code>\n<code>SETP r/m8</code>\n<code>SETS r/m8</code>\n<code>SETSSBSY</code>\n<code>SFENCE</code>\n<code>SFENCE</code>\n<code>SFENCE</code>\n<code>SFENCE</code>\n<code>SFENCE</code>\n<code>SFENCE</code>\n<code>SFENCE</code>\n<code>SFENCE</code>\n<code>SGDT m</code>\n<code>SGDT m</code>\n<code>SGDT m</code>\n<code>SHA1MSG1 xmm1, xmm2/m128</code>\n<code>SHA1MSG2 xmm1, xmm2/m128</code>\n<code>SHA1NEXTE xmm1, xmm2/m128</code>\n<code>SHA1RNDS4 xmm1, xmm2/m128, imm8</code>\n<code>SHA256MSG1 xmm1, xmm2/m128</code>\n<code>SHA256MSG2 xmm1, xmm2/m128</code>\n<code>SHA256RNDS2 xmm1, xmm2/m128, &lt;XMM0&gt;</code>\n<code>SHL r/m16, 1</code>\n<code>SHL r/m16, CL</code>\n<code>SHL r/m16, imm8</code>\n<code>SHL r/m32, 1</code>\n<code>SHL r/m32, CL</code>\n<code>SHL r/m32, imm8</code>\n<code>SHL r/m64, 1</code>\n<code>SHL r/m64, CL</code>\n<code>SHL r/m64, imm8</code>\n<code>SHL r/m8, 1</code>\n<code>SHL r/m8, CL</code>\n<code>SHL r/m8, imm8</code>\n<code>SHLD r/m16, r16, CL</code>\n<code>SHLD r/m16, r16, imm8</code>\n<code>SHLD r/m32, r32, CL</code>\n<code>SHLD r/m32, r32, imm8</code>\n<code>SHLD r/m64, r64, CL</code>\n<code>SHLD r/m64, r64, imm8</code>\n<code>SHR r/m16, 1</code>\n<code>SHR r/m16, CL</code>\n<code>SHR r/m16, imm8</code>\n<code>SHR r/m32, 1</code>\n<code>SHR r/m32, CL</code>\n<code>SHR r/m32, imm8</code>\n<code>SHR r/m64, 1</code>\n<code>SHR r/m64, CL</code>\n<code>SHR r/m64, imm8</code>\n<code>SHR r/m8, 1</code>\n<code>SHR r/m8, CL</code>\n<code>SHR r/m8, imm8</code>\n<code>SHRD r/m16, r16, CL</code>\n<code>SHRD r/m16, r16, imm8</code>\n<code>SHRD r/m32, r32, CL</code>\n<code>SHRD r/m32, r32, imm8</code>\n<code>SHRD r/m64, r64, CL</code>\n<code>SHRD r/m64, r64, imm8</code>\n<code>SHUFPD xmm1, xmm2/m128, imm8</code>\n<code>SHUFPS xmm1, xmm2/m128, imm8</code>\n<code>SIDT m</code>\n<code>SIDT m</code>\n<code>SIDT m</code>\n<code>SKINIT</code>\n<code>SLDT r32/m16</code>\n<code>SLDT r64/m16</code>\n<code>SLDT r/m16</code>\n<code>SMINT</code>\n<code>SMINT</code>\n<code>SMSW r32/m16</code>\n<code>SMSW r64/m16</code>\n<code>SMSW r/m16</code>\n<code>SQRTPD xmm1, xmm2/m128</code>\n<code>SQRTPS xmm1, xmm2/m128</code>\n<code>SQRTSD xmm1, xmm2/m64</code>\n<code>SQRTSS xmm1, xmm2/m32</code>\n<code>STAC</code>\n<code>STC</code>\n<code>STD</code>\n<code>STGI</code>\n<code>STI</code>\n<code>STMXCSR m32</code>\n<code>STOREALL</code>\n<code>STOSB</code>\n<code>STOSD</code>\n<code>STOSQ</code>\n<code>STOSW</code>\nContains a <code>&amp;&#39;a str</code>\n<code>STR r32/m16</code>\n<code>STR r64/m16</code>\n<code>STR r/m16</code>\nContains a <code>String</code>\n<code>STUI</code>\n<code>SUB AL, imm8</code>\n<code>SUB AX, imm16</code>\n<code>SUB EAX, imm32</code>\n<code>SUB RAX, imm32</code>\n<code>SUB r16, r/m16</code>\n<code>SUB r32, r/m32</code>\n<code>SUB r64, r/m64</code>\n<code>SUB r8, r/m8</code>\n<code>SUB r/m16, imm16</code>\n<code>SUB r/m16, imm8</code>\n<code>SUB r/m16, r16</code>\n<code>SUB r/m32, imm32</code>\n<code>SUB r/m32, imm8</code>\n<code>SUB r/m32, r32</code>\n<code>SUB r/m64, imm32</code>\n<code>SUB r/m64, imm8</code>\n<code>SUB r/m64, r64</code>\n<code>SUB r/m8, imm8</code>\n<code>SUB r/m8, imm8</code>\n<code>SUB r/m8, r8</code>\n<code>SUBPD xmm1, xmm2/m128</code>\n<code>SUBPS xmm1, xmm2/m128</code>\n<code>SUBSD xmm1, xmm2/m64</code>\n<code>SUBSS xmm1, xmm2/m32</code>\nSuppress all exceptions: <code>{sae}</code>\n<code>SVDC m80, Sreg</code>\n<code>SVLDT m80</code>\n<code>SVTS m80</code>\n<code>SWAPGS</code>\nMVEX swizzle or memory up/down conversion: <code>{dacb}</code> or …\nContains a <code>&amp;&#39;a str</code> or a <code>String</code>\nContains one or more <code>SymResTextPart</code>s (text and color)\nContains text and colors\nSymbol flags\nUsed by a <code>Formatter</code> to resolve symbols\nCreated by a <code>SymbolResolver</code>\n<code>SYSCALL</code>\n<code>SYSENTER</code>\n<code>SYSEXIT</code>\n<code>SYSEXITQ</code>\n<code>SYSRET</code>\n<code>SYSRETQ</code>\n<code>TDCALL</code>\n<code>TEST AL, imm8</code>\n<code>TEST AX, imm16</code>\n<code>TEST EAX, imm32</code>\n<code>TEST RAX, imm32</code>\n<code>TEST r/m16, imm16</code>\n<code>TEST r/m16, imm16</code>\n<code>TEST r/m16, r16</code>\n<code>TEST r/m32, imm32</code>\n<code>TEST r/m32, imm32</code>\n<code>TEST r/m32, r32</code>\n<code>TEST r/m64, imm32</code>\n<code>TEST r/m64, imm32</code>\n<code>TEST r/m64, r64</code>\n<code>TEST r/m8, imm8</code>\n<code>TEST r/m8, imm8</code>\n<code>TEST r/m8, r8</code>\n<code>TESTUI</code>\nNormal text\nText and color\nText and color (vector)\nTile data\n64-bit location: TILECFG (<code>LDTILECFG</code>/<code>STTILECFG</code>)\n<code>TLBSYNC</code>\n<code>TPAUSE r32, &lt;edx&gt;, &lt;eax&gt;</code>\n<code>TPAUSE r64, &lt;edx&gt;, &lt;eax&gt;</code>\nTuple type (EVEX/MVEX) which can be used to get the disp8 …\n<code>TZCNT r16, r/m16</code>\n<code>TZCNT r32, r/m32</code>\n<code>TZCNT r64, r/m64</code>\nDecode undocumented Intel <code>RDUDBG</code> and <code>WRUDBG</code> instructions\nMemory location contains a <code>u128</code>\nMemory location contains a <code>u16</code>\nMemory location contains a <code>u256</code>\nMemory location contains a <code>u32</code>\nMemory location contains a <code>u512</code>\nMemory location contains a <code>u52</code>\nMemory location contains a <code>u64</code>\nMemory location contains a <code>u8</code>\nDecode <code>UMOV</code> instructions\n<code>UCOMISD xmm1, xmm2/m64</code>\n<code>UCOMISS xmm1, xmm2/m32</code>\n<code>UD0</code>\n<code>UD0 r16, r/m16</code>\n<code>UD0 r32, r/m32</code>\n<code>UD0 r64, r/m64</code>\n<code>UD1 r16, r/m16</code>\n<code>UD1 r32, r/m32</code>\n<code>UD1 r64, r/m64</code>\n<code>UD2</code>\n<code>UIRET</code>\n<code>UMONITOR r16</code>\n<code>UMONITOR r32</code>\n<code>UMONITOR r64</code>\n<code>UMOV r16, r/m16</code>\n<code>UMOV r32, r/m32</code>\n<code>UMOV r8, r/m8</code>\n<code>UMOV r/m16, r16</code>\n<code>UMOV r/m32, r32</code>\n<code>UMOV r/m8, r8</code>\n<code>UMWAIT r32, &lt;edx&gt;, &lt;eax&gt;</code>\n<code>UMWAIT r64, &lt;edx&gt;, &lt;eax&gt;</code>\nUnknown size\nUnknown size or the instruction doesn’t reference any …\n<code>UNPCKHPD xmm1, xmm2/m128</code>\n<code>UNPCKHPS xmm1, xmm2/m128</code>\n<code>UNPCKLPD xmm1, xmm2/m128</code>\n<code>UNPCKLPS xmm1, xmm2/m128</code>\nVEX encoding\n<code>ANDN r32a, r32b, r/m32</code>\n<code>ANDN r64a, r64b, r/m64</code>\n<code>BEXTR r32a, r/m32, r32b</code>\n<code>BEXTR r64a, r/m64, r64b</code>\n<code>BLSI r32, r/m32</code>\n<code>BLSI r64, r/m64</code>\n<code>BLSMSK r32, r/m32</code>\n<code>BLSMSK r64, r/m64</code>\n<code>BLSR r32, r/m32</code>\n<code>BLSR r64, r/m64</code>\n<code>BZHI r32a, r/m32, r32b</code>\n<code>BZHI r64a, r/m64, r64b</code>\n<code>CMPBEXADD m32, r32, r32</code>\n<code>CMPBEXADD m64, r64, r64</code>\n<code>CMPBXADD m32, r32, r32</code>\n<code>CMPBXADD m64, r64, r64</code>\n<code>CMPLEXADD m32, r32, r32</code>\n<code>CMPLEXADD m64, r64, r64</code>\n<code>CMPLXADD m32, r32, r32</code>\n<code>CMPLXADD m64, r64, r64</code>\n<code>CMPNBEXADD m32, r32, r32</code>\n<code>CMPNBEXADD m64, r64, r64</code>\n<code>CMPNBXADD m32, r32, r32</code>\n<code>CMPNBXADD m64, r64, r64</code>\n<code>CMPNLEXADD m32, r32, r32</code>\n<code>CMPNLEXADD m64, r64, r64</code>\n<code>CMPNLXADD m32, r32, r32</code>\n<code>CMPNLXADD m64, r64, r64</code>\n<code>CMPNOXADD m32, r32, r32</code>\n<code>CMPNOXADD m64, r64, r64</code>\n<code>CMPNPXADD m32, r32, r32</code>\n<code>CMPNPXADD m64, r64, r64</code>\n<code>CMPNSXADD m32, r32, r32</code>\n<code>CMPNSXADD m64, r64, r64</code>\n<code>CMPNZXADD m32, r32, r32</code>\n<code>CMPNZXADD m64, r64, r64</code>\n<code>CMPOXADD m32, r32, r32</code>\n<code>CMPOXADD m64, r64, r64</code>\n<code>CMPPXADD m32, r32, r32</code>\n<code>CMPPXADD m64, r64, r64</code>\n<code>CMPSXADD m32, r32, r32</code>\n<code>CMPSXADD m64, r64, r64</code>\n<code>CMPZXADD m32, r32, r32</code>\n<code>CMPZXADD m64, r64, r64</code>\n<code>CLEVICT0 m8</code>\n<code>CLEVICT1 m8</code>\n<code>DELAY r32</code>\n<code>DELAY r64</code>\n<code>JKNZD k1, rel32</code>\n<code>JKNZD k1, rel8</code>\n<code>JKZD k1, rel32</code>\n<code>JKZD k1, rel8</code>\n<code>KAND k1, k2</code>\n<code>KANDN k1, k2</code>\n<code>KANDNR k1, k2</code>\n<code>KCONCATH r64, k1, k2</code>\n<code>KCONCATL r64, k1, k2</code>\n<code>KEXTRACT k1, r64, imm8</code>\n<code>KMERGE2L1H k1, k2</code>\n<code>KMERGE2L1L k1, k2</code>\n<code>KMOV k1, k2</code>\n<code>KMOV k1, r32</code>\n<code>KMOV r32, k1</code>\n<code>KNOT k1, k2</code>\n<code>KOR k1, k2</code>\n<code>KORTEST k1, k2</code>\n<code>KXNOR k1, k2</code>\n<code>KXOR k1, k2</code>\n<code>LZCNT r32, r32</code>\n<code>LZCNT r64, r64</code>\n<code>POPCNT r32, r32</code>\n<code>POPCNT r64, r64</code>\n<code>SPFLT r32</code>\n<code>SPFLT r64</code>\n<code>TZCNT r32, r32</code>\n<code>TZCNT r64, r64</code>\n<code>TZCNTI r32, r32</code>\n<code>TZCNTI r64, r64</code>\n<code>UNDOC r32, r/m32</code>\n<code>UNDOC r32, r/m32</code>\n<code>UNDOC r32, r/m32</code>\n<code>UNDOC r64, r/m64</code>\n<code>UNDOC r64, r/m64</code>\n<code>UNDOC r64, r/m64</code>\n<code>VPREFETCH0 m8</code>\n<code>VPREFETCH1 m8</code>\n<code>VPREFETCH2 m8</code>\n<code>VPREFETCHE0 m8</code>\n<code>VPREFETCHE1 m8</code>\n<code>VPREFETCHE2 m8</code>\n<code>VPREFETCHENTA m8</code>\n<code>VPREFETCHNTA m8</code>\n<code>KADDB k1, k2, k3</code>\n<code>KADDD k1, k2, k3</code>\n<code>KADDQ k1, k2, k3</code>\n<code>KADDW k1, k2, k3</code>\n<code>KANDB k1, k2, k3</code>\n<code>KANDD k1, k2, k3</code>\n<code>KANDNB k1, k2, k3</code>\n<code>KANDND k1, k2, k3</code>\n<code>KANDNQ k1, k2, k3</code>\n<code>KANDNW k1, k2, k3</code>\n<code>KANDQ k1, k2, k3</code>\n<code>KANDW k1, k2, k3</code>\n<code>KMOVB k1, k2/m8</code>\n<code>KMOVB k1, r32</code>\n<code>KMOVB m8, k1</code>\n<code>KMOVB r32, k1</code>\n<code>KMOVD k1, k2/m32</code>\n<code>KMOVD k1, r32</code>\n<code>KMOVD m32, k1</code>\n<code>KMOVD r32, k1</code>\n<code>KMOVQ k1, k2/m64</code>\n<code>KMOVQ k1, r64</code>\n<code>KMOVQ m64, k1</code>\n<code>KMOVQ r64, k1</code>\n<code>KMOVW k1, k2/m16</code>\n<code>KMOVW k1, r32</code>\n<code>KMOVW m16, k1</code>\n<code>KMOVW r32, k1</code>\n<code>KNOTB k1, k2</code>\n<code>KNOTD k1, k2</code>\n<code>KNOTQ k1, k2</code>\n<code>KNOTW k1, k2</code>\n<code>KORB k1, k2, k3</code>\n<code>KORD k1, k2, k3</code>\n<code>KORQ k1, k2, k3</code>\n<code>KORTESTB k1, k2</code>\n<code>KORTESTD k1, k2</code>\n<code>KORTESTQ k1, k2</code>\n<code>KORTESTW k1, k2</code>\n<code>KORW k1, k2, k3</code>\n<code>KSHIFTLB k1, k2, imm8</code>\n<code>KSHIFTLD k1, k2, imm8</code>\n<code>KSHIFTLQ k1, k2, imm8</code>\n<code>KSHIFTLW k1, k2, imm8</code>\n<code>KSHIFTRB k1, k2, imm8</code>\n<code>KSHIFTRD k1, k2, imm8</code>\n<code>KSHIFTRQ k1, k2, imm8</code>\n<code>KSHIFTRW k1, k2, imm8</code>\n<code>KTESTB k1, k2</code>\n<code>KTESTD k1, k2</code>\n<code>KTESTQ k1, k2</code>\n<code>KTESTW k1, k2</code>\n<code>KUNPCKBW k1, k2, k3</code>\n<code>KUNPCKDQ k1, k2, k3</code>\n<code>KUNPCKWD k1, k2, k3</code>\n<code>KXNORB k1, k2, k3</code>\n<code>KXNORD k1, k2, k3</code>\n<code>KXNORQ k1, k2, k3</code>\n<code>KXNORW k1, k2, k3</code>\n<code>KXORB k1, k2, k3</code>\n<code>KXORD k1, k2, k3</code>\n<code>KXORQ k1, k2, k3</code>\n<code>KXORW k1, k2, k3</code>\n<code>LDTILECFG m512</code>\n<code>MULX r32a, r32b, r/m32</code>\n<code>MULX r64a, r64b, r/m64</code>\n<code>PDEP r32a, r32b, r/m32</code>\n<code>PDEP r64a, r64b, r/m64</code>\n<code>PEXT r32a, r32b, r/m32</code>\n<code>PEXT r64a, r64b, r/m64</code>\n<code>RORX r32, r/m32, imm8</code>\n<code>RORX r64, r/m64, imm8</code>\n<code>SARX r32a, r/m32, r32b</code>\n<code>SARX r64a, r/m64, r64b</code>\n<code>SHLX r32a, r/m32, r32b</code>\n<code>SHLX r64a, r/m64, r64b</code>\n<code>SHRX r32a, r/m32, r32b</code>\n<code>SHRX r64a, r/m64, r64b</code>\n<code>STTILECFG m512</code>\n<code>TCMMIMFP16PS tmm1, tmm2, tmm3</code>\n<code>TCMMRLFP16PS tmm1, tmm2, tmm3</code>\n<code>TDPBF16PS tmm1, tmm2, tmm3</code>\n<code>TDPBSSD tmm1, tmm2, tmm3</code>\n<code>TDPBSUD tmm1, tmm2, tmm3</code>\n<code>TDPBUSD tmm1, tmm2, tmm3</code>\n<code>TDPBUUD tmm1, tmm2, tmm3</code>\n<code>TDPFP16PS tmm1, tmm2, tmm3</code>\n<code>TILELOADD tmm1, sibmem</code>\n<code>TILELOADDT1 tmm1, sibmem</code>\n<code>TILERELEASE</code>\n<code>TILESTORED sibmem, tmm1</code>\n<code>TILEZERO tmm1</code>\n<code>VADDPD xmm1, xmm2, xmm3/m128</code>\n<code>VADDPD ymm1, ymm2, ymm3/m256</code>\n<code>VADDPS xmm1, xmm2, xmm3/m128</code>\n<code>VADDPS ymm1, ymm2, ymm3/m256</code>\n<code>VADDSD xmm1, xmm2, xmm3/m64</code>\n<code>VADDSS xmm1, xmm2, xmm3/m32</code>\n<code>VADDSUBPD xmm1, xmm2, xmm3/m128</code>\n<code>VADDSUBPD ymm1, ymm2, ymm3/m256</code>\n<code>VADDSUBPS xmm1, xmm2, xmm3/m128</code>\n<code>VADDSUBPS ymm1, ymm2, ymm3/m256</code>\n<code>VAESDEC xmm1, xmm2, xmm3/m128</code>\n<code>VAESDEC ymm1, ymm2, ymm3/m256</code>\n<code>VAESDECLAST xmm1, xmm2, xmm3/m128</code>\n<code>VAESDECLAST ymm1, ymm2, ymm3/m256</code>\n<code>VAESENC xmm1, xmm2, xmm3/m128</code>\n<code>VAESENC ymm1, ymm2, ymm3/m256</code>\n<code>VAESENCLAST xmm1, xmm2, xmm3/m128</code>\n<code>VAESENCLAST ymm1, ymm2, ymm3/m256</code>\n<code>VAESIMC xmm1, xmm2/m128</code>\n<code>VAESKEYGENASSIST xmm1, xmm2/m128, imm8</code>\n<code>VANDNPD xmm1, xmm2, xmm3/m128</code>\n<code>VANDNPD ymm1, ymm2, ymm3/m256</code>\n<code>VANDNPS xmm1, xmm2, xmm3/m128</code>\n<code>VANDNPS ymm1, ymm2, ymm3/m256</code>\n<code>VANDPD xmm1, xmm2, xmm3/m128</code>\n<code>VANDPD ymm1, ymm2, ymm3/m256</code>\n<code>VANDPS xmm1, xmm2, xmm3/m128</code>\n<code>VANDPS ymm1, ymm2, ymm3/m256</code>\n<code>VBCSTNEBF162PS xmm1, m16</code>\n<code>VBCSTNEBF162PS ymm1, m16</code>\n<code>VBCSTNESH2PS xmm1, m16</code>\n<code>VBCSTNESH2PS ymm1, m16</code>\n<code>VBLENDPD xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VBLENDPD ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VBLENDPS xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VBLENDPS ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VBLENDVPD xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VBLENDVPD ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VBLENDVPS xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VBLENDVPS ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VBROADCASTF128 ymm1, m128</code>\n<code>VBROADCASTI128 ymm1, m128</code>\n<code>VBROADCASTSD ymm1, m64</code>\n<code>VBROADCASTSD ymm1, xmm2</code>\n<code>VBROADCASTSS xmm1, m32</code>\n<code>VBROADCASTSS xmm1, xmm2</code>\n<code>VBROADCASTSS ymm1, m32</code>\n<code>VBROADCASTSS ymm1, xmm2</code>\n<code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code>\n<code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code>\n<code>VCOMISD xmm1, xmm2/m64</code>\n<code>VCOMISS xmm1, xmm2/m32</code>\n<code>VCVTDQ2PD xmm1, xmm2/m64</code>\n<code>VCVTDQ2PD ymm1, xmm2/m128</code>\n<code>VCVTDQ2PS xmm1, xmm2/m128</code>\n<code>VCVTDQ2PS ymm1, ymm2/m256</code>\n<code>VCVTNEEBF162PS xmm1, m128</code>\n<code>VCVTNEEBF162PS ymm1, m256</code>\n<code>VCVTNEEPH2PS xmm1, m128</code>\n<code>VCVTNEEPH2PS ymm1, m256</code>\n<code>VCVTNEOBF162PS xmm1, m128</code>\n<code>VCVTNEOBF162PS ymm1, m256</code>\n<code>VCVTNEOPH2PS xmm1, m128</code>\n<code>VCVTNEOPH2PS ymm1, m256</code>\n<code>VCVTNEPS2BF16 xmm1, xmm2/m128</code>\n<code>VCVTNEPS2BF16 xmm1, ymm2/m256</code>\n<code>VCVTPD2DQ xmm1, xmm2/m128</code>\n<code>VCVTPD2DQ xmm1, ymm2/m256</code>\n<code>VCVTPD2PS xmm1, xmm2/m128</code>\n<code>VCVTPD2PS xmm1, ymm2/m256</code>\n<code>VCVTPH2PS xmm1, xmm2/m64</code>\n<code>VCVTPH2PS ymm1, xmm2/m128</code>\n<code>VCVTPS2DQ xmm1, xmm2/m128</code>\n<code>VCVTPS2DQ ymm1, ymm2/m256</code>\n<code>VCVTPS2PD xmm1, xmm2/m64</code>\n<code>VCVTPS2PD ymm1, xmm2/m128</code>\n<code>VCVTPS2PH xmm1/m128, ymm2, imm8</code>\n<code>VCVTPS2PH xmm1/m64, xmm2, imm8</code>\n<code>VCVTSD2SI r32, xmm1/m64</code>\n<code>VCVTSD2SI r64, xmm1/m64</code>\n<code>VCVTSD2SS xmm1, xmm2, xmm3/m64</code>\n<code>VCVTSI2SD xmm1, xmm2, r/m32</code>\n<code>VCVTSI2SD xmm1, xmm2, r/m64</code>\n<code>VCVTSI2SS xmm1, xmm2, r/m32</code>\n<code>VCVTSI2SS xmm1, xmm2, r/m64</code>\n<code>VCVTSS2SD xmm1, xmm2, xmm3/m32</code>\n<code>VCVTSS2SI r32, xmm1/m32</code>\n<code>VCVTSS2SI r64, xmm1/m32</code>\n<code>VCVTTPD2DQ xmm1, xmm2/m128</code>\n<code>VCVTTPD2DQ xmm1, ymm2/m256</code>\n<code>VCVTTPS2DQ xmm1, xmm2/m128</code>\n<code>VCVTTPS2DQ ymm1, ymm2/m256</code>\n<code>VCVTTSD2SI r32, xmm1/m64</code>\n<code>VCVTTSD2SI r64, xmm1/m64</code>\n<code>VCVTTSS2SI r32, xmm1/m32</code>\n<code>VCVTTSS2SI r64, xmm1/m32</code>\n<code>VDIVPD xmm1, xmm2, xmm3/m128</code>\n<code>VDIVPD ymm1, ymm2, ymm3/m256</code>\n<code>VDIVPS xmm1, xmm2, xmm3/m128</code>\n<code>VDIVPS ymm1, ymm2, ymm3/m256</code>\n<code>VDIVSD xmm1, xmm2, xmm3/m64</code>\n<code>VDIVSS xmm1, xmm2, xmm3/m32</code>\n<code>VDPPD xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VDPPS xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VDPPS ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VEXTRACTF128 xmm1/m128, ymm2, imm8</code>\n<code>VEXTRACTI128 xmm1/m128, ymm2, imm8</code>\n<code>VEXTRACTPS r64/m32, xmm1, imm8</code>\n<code>VEXTRACTPS r/m32, xmm1, imm8</code>\n<code>VFMADD132PD xmm1, xmm2, xmm3/m128</code>\n<code>VFMADD132PD ymm1, ymm2, ymm3/m256</code>\n<code>VFMADD132PS xmm1, xmm2, xmm3/m128</code>\n<code>VFMADD132PS ymm1, ymm2, ymm3/m256</code>\n<code>VFMADD132SD xmm1, xmm2, xmm3/m64</code>\n<code>VFMADD132SS xmm1, xmm2, xmm3/m32</code>\n<code>VFMADD213PD xmm1, xmm2, xmm3/m128</code>\n<code>VFMADD213PD ymm1, ymm2, ymm3/m256</code>\n<code>VFMADD213PS xmm1, xmm2, xmm3/m128</code>\n<code>VFMADD213PS ymm1, ymm2, ymm3/m256</code>\n<code>VFMADD213SD xmm1, xmm2, xmm3/m64</code>\n<code>VFMADD213SS xmm1, xmm2, xmm3/m32</code>\n<code>VFMADD231PD xmm1, xmm2, xmm3/m128</code>\n<code>VFMADD231PD ymm1, ymm2, ymm3/m256</code>\n<code>VFMADD231PS xmm1, xmm2, xmm3/m128</code>\n<code>VFMADD231PS ymm1, ymm2, ymm3/m256</code>\n<code>VFMADD231SD xmm1, xmm2, xmm3/m64</code>\n<code>VFMADD231SS xmm1, xmm2, xmm3/m32</code>\n<code>VFMADDPD xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VFMADDPD xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VFMADDPD ymm1, ymm2, ymm3, ymm4/m256</code>\n<code>VFMADDPD ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VFMADDPS xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VFMADDPS xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VFMADDPS ymm1, ymm2, ymm3, ymm4/m256</code>\n<code>VFMADDPS ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VFMADDSD xmm1, xmm2, xmm3, xmm4/m64</code>\n<code>VFMADDSD xmm1, xmm2, xmm3/m64, xmm4</code>\n<code>VFMADDSS xmm1, xmm2, xmm3, xmm4/m32</code>\n<code>VFMADDSS xmm1, xmm2, xmm3/m32, xmm4</code>\n<code>VFMADDSUB132PD xmm1, xmm2, xmm3/m128</code>\n<code>VFMADDSUB132PD ymm1, ymm2, ymm3/m256</code>\n<code>VFMADDSUB132PS xmm1, xmm2, xmm3/m128</code>\n<code>VFMADDSUB132PS ymm1, ymm2, ymm3/m256</code>\n<code>VFMADDSUB213PD xmm1, xmm2, xmm3/m128</code>\n<code>VFMADDSUB213PD ymm1, ymm2, ymm3/m256</code>\n<code>VFMADDSUB213PS xmm1, xmm2, xmm3/m128</code>\n<code>VFMADDSUB213PS ymm1, ymm2, ymm3/m256</code>\n<code>VFMADDSUB231PD xmm1, xmm2, xmm3/m128</code>\n<code>VFMADDSUB231PD ymm1, ymm2, ymm3/m256</code>\n<code>VFMADDSUB231PS xmm1, xmm2, xmm3/m128</code>\n<code>VFMADDSUB231PS ymm1, ymm2, ymm3/m256</code>\n<code>VFMADDSUBPD xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VFMADDSUBPD xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VFMADDSUBPD ymm1, ymm2, ymm3, ymm4/m256</code>\n<code>VFMADDSUBPD ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VFMADDSUBPS xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VFMADDSUBPS xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VFMADDSUBPS ymm1, ymm2, ymm3, ymm4/m256</code>\n<code>VFMADDSUBPS ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VFMSUB132PD xmm1, xmm2, xmm3/m128</code>\n<code>VFMSUB132PD ymm1, ymm2, ymm3/m256</code>\n<code>VFMSUB132PS xmm1, xmm2, xmm3/m128</code>\n<code>VFMSUB132PS ymm1, ymm2, ymm3/m256</code>\n<code>VFMSUB132SD xmm1, xmm2, xmm3/m64</code>\n<code>VFMSUB132SS xmm1, xmm2, xmm3/m32</code>\n<code>VFMSUB213PD xmm1, xmm2, xmm3/m128</code>\n<code>VFMSUB213PD ymm1, ymm2, ymm3/m256</code>\n<code>VFMSUB213PS xmm1, xmm2, xmm3/m128</code>\n<code>VFMSUB213PS ymm1, ymm2, ymm3/m256</code>\n<code>VFMSUB213SD xmm1, xmm2, xmm3/m64</code>\n<code>VFMSUB213SS xmm1, xmm2, xmm3/m32</code>\n<code>VFMSUB231PD xmm1, xmm2, xmm3/m128</code>\n<code>VFMSUB231PD ymm1, ymm2, ymm3/m256</code>\n<code>VFMSUB231PS xmm1, xmm2, xmm3/m128</code>\n<code>VFMSUB231PS ymm1, ymm2, ymm3/m256</code>\n<code>VFMSUB231SD xmm1, xmm2, xmm3/m64</code>\n<code>VFMSUB231SS xmm1, xmm2, xmm3/m32</code>\n<code>VFMSUBADD132PD xmm1, xmm2, xmm3/m128</code>\n<code>VFMSUBADD132PD ymm1, ymm2, ymm3/m256</code>\n<code>VFMSUBADD132PS xmm1, xmm2, xmm3/m128</code>\n<code>VFMSUBADD132PS ymm1, ymm2, ymm3/m256</code>\n<code>VFMSUBADD213PD xmm1, xmm2, xmm3/m128</code>\n<code>VFMSUBADD213PD ymm1, ymm2, ymm3/m256</code>\n<code>VFMSUBADD213PS xmm1, xmm2, xmm3/m128</code>\n<code>VFMSUBADD213PS ymm1, ymm2, ymm3/m256</code>\n<code>VFMSUBADD231PD xmm1, xmm2, xmm3/m128</code>\n<code>VFMSUBADD231PD ymm1, ymm2, ymm3/m256</code>\n<code>VFMSUBADD231PS xmm1, xmm2, xmm3/m128</code>\n<code>VFMSUBADD231PS ymm1, ymm2, ymm3/m256</code>\n<code>VFMSUBADDPD xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VFMSUBADDPD xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VFMSUBADDPD ymm1, ymm2, ymm3, ymm4/m256</code>\n<code>VFMSUBADDPD ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VFMSUBADDPS xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VFMSUBADDPS xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VFMSUBADDPS ymm1, ymm2, ymm3, ymm4/m256</code>\n<code>VFMSUBADDPS ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VFMSUBPD xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VFMSUBPD xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VFMSUBPD ymm1, ymm2, ymm3, ymm4/m256</code>\n<code>VFMSUBPD ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VFMSUBPS xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VFMSUBPS xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VFMSUBPS ymm1, ymm2, ymm3, ymm4/m256</code>\n<code>VFMSUBPS ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VFMSUBSD xmm1, xmm2, xmm3, xmm4/m64</code>\n<code>VFMSUBSD xmm1, xmm2, xmm3/m64, xmm4</code>\n<code>VFMSUBSS xmm1, xmm2, xmm3, xmm4/m32</code>\n<code>VFMSUBSS xmm1, xmm2, xmm3/m32, xmm4</code>\n<code>VFNMADD132PD xmm1, xmm2, xmm3/m128</code>\n<code>VFNMADD132PD ymm1, ymm2, ymm3/m256</code>\n<code>VFNMADD132PS xmm1, xmm2, xmm3/m128</code>\n<code>VFNMADD132PS ymm1, ymm2, ymm3/m256</code>\n<code>VFNMADD132SD xmm1, xmm2, xmm3/m64</code>\n<code>VFNMADD132SS xmm1, xmm2, xmm3/m32</code>\n<code>VFNMADD213PD xmm1, xmm2, xmm3/m128</code>\n<code>VFNMADD213PD ymm1, ymm2, ymm3/m256</code>\n<code>VFNMADD213PS xmm1, xmm2, xmm3/m128</code>\n<code>VFNMADD213PS ymm1, ymm2, ymm3/m256</code>\n<code>VFNMADD213SD xmm1, xmm2, xmm3/m64</code>\n<code>VFNMADD213SS xmm1, xmm2, xmm3/m32</code>\n<code>VFNMADD231PD xmm1, xmm2, xmm3/m128</code>\n<code>VFNMADD231PD ymm1, ymm2, ymm3/m256</code>\n<code>VFNMADD231PS xmm1, xmm2, xmm3/m128</code>\n<code>VFNMADD231PS ymm1, ymm2, ymm3/m256</code>\n<code>VFNMADD231SD xmm1, xmm2, xmm3/m64</code>\n<code>VFNMADD231SS xmm1, xmm2, xmm3/m32</code>\n<code>VFNMADDPD xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VFNMADDPD xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VFNMADDPD ymm1, ymm2, ymm3, ymm4/m256</code>\n<code>VFNMADDPD ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VFNMADDPS xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VFNMADDPS xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VFNMADDPS ymm1, ymm2, ymm3, ymm4/m256</code>\n<code>VFNMADDPS ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VFNMADDSD xmm1, xmm2, xmm3, xmm4/m64</code>\n<code>VFNMADDSD xmm1, xmm2, xmm3/m64, xmm4</code>\n<code>VFNMADDSS xmm1, xmm2, xmm3, xmm4/m32</code>\n<code>VFNMADDSS xmm1, xmm2, xmm3/m32, xmm4</code>\n<code>VFNMSUB132PD xmm1, xmm2, xmm3/m128</code>\n<code>VFNMSUB132PD ymm1, ymm2, ymm3/m256</code>\n<code>VFNMSUB132PS xmm1, xmm2, xmm3/m128</code>\n<code>VFNMSUB132PS ymm1, ymm2, ymm3/m256</code>\n<code>VFNMSUB132SD xmm1, xmm2, xmm3/m64</code>\n<code>VFNMSUB132SS xmm1, xmm2, xmm3/m32</code>\n<code>VFNMSUB213PD xmm1, xmm2, xmm3/m128</code>\n<code>VFNMSUB213PD ymm1, ymm2, ymm3/m256</code>\n<code>VFNMSUB213PS xmm1, xmm2, xmm3/m128</code>\n<code>VFNMSUB213PS ymm1, ymm2, ymm3/m256</code>\n<code>VFNMSUB213SD xmm1, xmm2, xmm3/m64</code>\n<code>VFNMSUB213SS xmm1, xmm2, xmm3/m32</code>\n<code>VFNMSUB231PD xmm1, xmm2, xmm3/m128</code>\n<code>VFNMSUB231PD ymm1, ymm2, ymm3/m256</code>\n<code>VFNMSUB231PS xmm1, xmm2, xmm3/m128</code>\n<code>VFNMSUB231PS ymm1, ymm2, ymm3/m256</code>\n<code>VFNMSUB231SD xmm1, xmm2, xmm3/m64</code>\n<code>VFNMSUB231SS xmm1, xmm2, xmm3/m32</code>\n<code>VFNMSUBPD xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VFNMSUBPD xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VFNMSUBPD ymm1, ymm2, ymm3, ymm4/m256</code>\n<code>VFNMSUBPD ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VFNMSUBPS xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VFNMSUBPS xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VFNMSUBPS ymm1, ymm2, ymm3, ymm4/m256</code>\n<code>VFNMSUBPS ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VFNMSUBSD xmm1, xmm2, xmm3, xmm4/m64</code>\n<code>VFNMSUBSD xmm1, xmm2, xmm3/m64, xmm4</code>\n<code>VFNMSUBSS xmm1, xmm2, xmm3, xmm4/m32</code>\n<code>VFNMSUBSS xmm1, xmm2, xmm3/m32, xmm4</code>\n<code>VGATHERDPD xmm1, vm32x, xmm2</code>\n<code>VGATHERDPD ymm1, vm32x, ymm2</code>\n<code>VGATHERDPS xmm1, vm32x, xmm2</code>\n<code>VGATHERDPS ymm1, vm32y, ymm2</code>\n<code>VGATHERQPD xmm1, vm64x, xmm2</code>\n<code>VGATHERQPD ymm1, vm64y, ymm2</code>\n<code>VGATHERQPS xmm1, vm64x, xmm2</code>\n<code>VGATHERQPS xmm1, vm64y, xmm2</code>\n<code>VGF2P8AFFINEINVQB xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VGF2P8AFFINEINVQB ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VGF2P8AFFINEQB xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VGF2P8AFFINEQB ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VGF2P8MULB xmm1, xmm2, xmm3/m128</code>\n<code>VGF2P8MULB ymm1, ymm2, ymm3/m256</code>\n<code>VHADDPD xmm1, xmm2, xmm3/m128</code>\n<code>VHADDPD ymm1, ymm2, ymm3/m256</code>\n<code>VHADDPS xmm1, xmm2, xmm3/m128</code>\n<code>VHADDPS ymm1, ymm2, ymm3/m256</code>\n<code>VHSUBPD xmm1, xmm2, xmm3/m128</code>\n<code>VHSUBPD ymm1, ymm2, ymm3/m256</code>\n<code>VHSUBPS xmm1, xmm2, xmm3/m128</code>\n<code>VHSUBPS ymm1, ymm2, ymm3/m256</code>\n<code>VINSERTF128 ymm1, ymm2, xmm3/m128, imm8</code>\n<code>VINSERTI128 ymm1, ymm2, xmm3/m128, imm8</code>\n<code>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</code>\n<code>VLDDQU xmm1, m128</code>\n<code>VLDDQU ymm1, m256</code>\n<code>VLDMXCSR m32</code>\n<code>VMASKMOVDQU xmm1, xmm2</code>\n<code>VMASKMOVPD m128, xmm1, xmm2</code>\n<code>VMASKMOVPD m256, ymm1, ymm2</code>\n<code>VMASKMOVPD xmm1, xmm2, m128</code>\n<code>VMASKMOVPD ymm1, ymm2, m256</code>\n<code>VMASKMOVPS m128, xmm1, xmm2</code>\n<code>VMASKMOVPS m256, ymm1, ymm2</code>\n<code>VMASKMOVPS xmm1, xmm2, m128</code>\n<code>VMASKMOVPS ymm1, ymm2, m256</code>\n<code>VMAXPD xmm1, xmm2, xmm3/m128</code>\n<code>VMAXPD ymm1, ymm2, ymm3/m256</code>\n<code>VMAXPS xmm1, xmm2, xmm3/m128</code>\n<code>VMAXPS ymm1, ymm2, ymm3/m256</code>\n<code>VMAXSD xmm1, xmm2, xmm3/m64</code>\n<code>VMAXSS xmm1, xmm2, xmm3/m32</code>\n<code>VMINPD xmm1, xmm2, xmm3/m128</code>\n<code>VMINPD ymm1, ymm2, ymm3/m256</code>\n<code>VMINPS xmm1, xmm2, xmm3/m128</code>\n<code>VMINPS ymm1, ymm2, ymm3/m256</code>\n<code>VMINSD xmm1, xmm2, xmm3/m64</code>\n<code>VMINSS xmm1, xmm2, xmm3/m32</code>\n<code>VMOVAPD xmm1, xmm2/m128</code>\n<code>VMOVAPD xmm2/m128, xmm1</code>\n<code>VMOVAPD ymm1, ymm2/m256</code>\n<code>VMOVAPD ymm2/m256, ymm1</code>\n<code>VMOVAPS xmm1, xmm2/m128</code>\n<code>VMOVAPS xmm2/m128, xmm1</code>\n<code>VMOVAPS ymm1, ymm2/m256</code>\n<code>VMOVAPS ymm2/m256, ymm1</code>\n<code>VMOVD r/m32, xmm1</code>\n<code>VMOVD xmm1, r/m32</code>\n<code>VMOVDDUP xmm1, xmm2/m64</code>\n<code>VMOVDDUP ymm1, ymm2/m256</code>\n<code>VMOVDQA xmm1, xmm2/m128</code>\n<code>VMOVDQA xmm2/m128, xmm1</code>\n<code>VMOVDQA ymm1, ymm2/m256</code>\n<code>VMOVDQA ymm2/m256, ymm1</code>\n<code>VMOVDQU xmm1, xmm2/m128</code>\n<code>VMOVDQU xmm2/m128, xmm1</code>\n<code>VMOVDQU ymm1, ymm2/m256</code>\n<code>VMOVDQU ymm2/m256, ymm1</code>\n<code>VMOVHLPS xmm1, xmm2, xmm3</code>\n<code>VMOVHPD m64, xmm1</code>\n<code>VMOVHPD xmm2, xmm1, m64</code>\n<code>VMOVHPS m64, xmm1</code>\n<code>VMOVHPS xmm2, xmm1, m64</code>\n<code>VMOVLHPS xmm1, xmm2, xmm3</code>\n<code>VMOVLPD m64, xmm1</code>\n<code>VMOVLPD xmm2, xmm1, m64</code>\n<code>VMOVLPS m64, xmm1</code>\n<code>VMOVLPS xmm2, xmm1, m64</code>\n<code>VMOVMSKPD r32, xmm2</code>\n<code>VMOVMSKPD r32, ymm2</code>\n<code>VMOVMSKPD r64, xmm2</code>\n<code>VMOVMSKPD r64, ymm2</code>\n<code>VMOVMSKPS r32, xmm2</code>\n<code>VMOVMSKPS r32, ymm2</code>\n<code>VMOVMSKPS r64, xmm2</code>\n<code>VMOVMSKPS r64, ymm2</code>\n<code>VMOVNTDQ m128, xmm1</code>\n<code>VMOVNTDQ m256, ymm1</code>\n<code>VMOVNTDQA xmm1, m128</code>\n<code>VMOVNTDQA ymm1, m256</code>\n<code>VMOVNTPD m128, xmm1</code>\n<code>VMOVNTPD m256, ymm1</code>\n<code>VMOVNTPS m128, xmm1</code>\n<code>VMOVNTPS m256, ymm1</code>\n<code>VMOVQ r/m64, xmm1</code>\n<code>VMOVQ xmm1, r/m64</code>\n<code>VMOVQ xmm1, xmm2/m64</code>\n<code>VMOVQ xmm1/m64, xmm2</code>\n<code>VMOVSD m64, xmm1</code>\n<code>VMOVSD xmm1, m64</code>\n<code>VMOVSD xmm1, xmm2, xmm3</code>\n<code>VMOVSD xmm1, xmm2, xmm3</code>\n<code>VMOVSHDUP xmm1, xmm2/m128</code>\n<code>VMOVSHDUP ymm1, ymm2/m256</code>\n<code>VMOVSLDUP xmm1, xmm2/m128</code>\n<code>VMOVSLDUP ymm1, ymm2/m256</code>\n<code>VMOVSS m32, xmm1</code>\n<code>VMOVSS xmm1, m32</code>\n<code>VMOVSS xmm1, xmm2, xmm3</code>\n<code>VMOVSS xmm1, xmm2, xmm3</code>\n<code>VMOVUPD xmm1, xmm2/m128</code>\n<code>VMOVUPD xmm2/m128, xmm1</code>\n<code>VMOVUPD ymm1, ymm2/m256</code>\n<code>VMOVUPD ymm2/m256, ymm1</code>\n<code>VMOVUPS xmm1, xmm2/m128</code>\n<code>VMOVUPS xmm2/m128, xmm1</code>\n<code>VMOVUPS ymm1, ymm2/m256</code>\n<code>VMOVUPS ymm2/m256, ymm1</code>\n<code>VMPSADBW xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VMPSADBW ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VMULPD xmm1, xmm2, xmm3/m128</code>\n<code>VMULPD ymm1, ymm2, ymm3/m256</code>\n<code>VMULPS xmm1, xmm2, xmm3/m128</code>\n<code>VMULPS ymm1, ymm2, ymm3/m256</code>\n<code>VMULSD xmm1, xmm2, xmm3/m64</code>\n<code>VMULSS xmm1, xmm2, xmm3/m32</code>\n<code>VORPD xmm1, xmm2, xmm3/m128</code>\n<code>VORPD ymm1, ymm2, ymm3/m256</code>\n<code>VORPS xmm1, xmm2, xmm3/m128</code>\n<code>VORPS ymm1, ymm2, ymm3/m256</code>\n<code>VPABSB xmm1, xmm2/m128</code>\n<code>VPABSB ymm1, ymm2/m256</code>\n<code>VPABSD xmm1, xmm2/m128</code>\n<code>VPABSD ymm1, ymm2/m256</code>\n<code>VPABSW xmm1, xmm2/m128</code>\n<code>VPABSW ymm1, ymm2/m256</code>\n<code>VPACKSSDW xmm1, xmm2, xmm3/m128</code>\n<code>VPACKSSDW ymm1, ymm2, ymm3/m256</code>\n<code>VPACKSSWB xmm1, xmm2, xmm3/m128</code>\n<code>VPACKSSWB ymm1, ymm2, ymm3/m256</code>\n<code>VPACKUSDW xmm1, xmm2, xmm3/m128</code>\n<code>VPACKUSDW ymm1, ymm2, ymm3/m256</code>\n<code>VPACKUSWB xmm1, xmm2, xmm3/m128</code>\n<code>VPACKUSWB ymm1, ymm2, ymm3/m256</code>\n<code>VPADDB xmm1, xmm2, xmm3/m128</code>\n<code>VPADDB ymm1, ymm2, ymm3/m256</code>\n<code>VPADDD xmm1, xmm2, xmm3/m128</code>\n<code>VPADDD ymm1, ymm2, ymm3/m256</code>\n<code>VPADDQ xmm1, xmm2, xmm3/m128</code>\n<code>VPADDQ ymm1, ymm2, ymm3/m256</code>\n<code>VPADDSB xmm1, xmm2, xmm3/m128</code>\n<code>VPADDSB ymm1, ymm2, ymm3/m256</code>\n<code>VPADDSW xmm1, xmm2, xmm3/m128</code>\n<code>VPADDSW ymm1, ymm2, ymm3/m256</code>\n<code>VPADDUSB xmm1, xmm2, xmm3/m128</code>\n<code>VPADDUSB ymm1, ymm2, ymm3/m256</code>\n<code>VPADDUSW xmm1, xmm2, xmm3/m128</code>\n<code>VPADDUSW ymm1, ymm2, ymm3/m256</code>\n<code>VPADDW xmm1, xmm2, xmm3/m128</code>\n<code>VPADDW ymm1, ymm2, ymm3/m256</code>\n<code>VPALIGNR xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VPALIGNR ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VPAND xmm1, xmm2, xmm3/m128</code>\n<code>VPAND ymm1, ymm2, ymm3/m256</code>\n<code>VPANDN xmm1, xmm2, xmm3/m128</code>\n<code>VPANDN ymm1, ymm2, ymm3/m256</code>\n<code>VPAVGB xmm1, xmm2, xmm3/m128</code>\n<code>VPAVGB ymm1, ymm2, ymm3/m256</code>\n<code>VPAVGW xmm1, xmm2, xmm3/m128</code>\n<code>VPAVGW ymm1, ymm2, ymm3/m256</code>\n<code>VPBLENDD xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VPBLENDD ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VPBLENDVB xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPBLENDVB ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VPBLENDW xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VPBLENDW ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VPBROADCASTB xmm1, xmm2/m8</code>\n<code>VPBROADCASTB ymm1, xmm2/m8</code>\n<code>VPBROADCASTD xmm1, xmm2/m32</code>\n<code>VPBROADCASTD ymm1, xmm2/m32</code>\n<code>VPBROADCASTQ xmm1, xmm2/m64</code>\n<code>VPBROADCASTQ ymm1, xmm2/m64</code>\n<code>VPBROADCASTW xmm1, xmm2/m16</code>\n<code>VPBROADCASTW ymm1, xmm2/m16</code>\n<code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VPCMPEQB xmm1, xmm2, xmm3/m128</code>\n<code>VPCMPEQB ymm1, ymm2, ymm3/m256</code>\n<code>VPCMPEQD xmm1, xmm2, xmm3/m128</code>\n<code>VPCMPEQD ymm1, ymm2, ymm3/m256</code>\n<code>VPCMPEQQ xmm1, xmm2, xmm3/m128</code>\n<code>VPCMPEQQ ymm1, ymm2, ymm3/m256</code>\n<code>VPCMPEQW xmm1, xmm2, xmm3/m128</code>\n<code>VPCMPEQW ymm1, ymm2, ymm3/m256</code>\n<code>VPCMPESTRI64 xmm1, xmm2/m128, imm8</code>\n<code>VPCMPESTRI xmm1, xmm2/m128, imm8</code>\n<code>VPCMPESTRM64 xmm1, xmm2/m128, imm8</code>\n<code>VPCMPESTRM xmm1, xmm2/m128, imm8</code>\n<code>VPCMPGTB xmm1, xmm2, xmm3/m128</code>\n<code>VPCMPGTB ymm1, ymm2, ymm3/m256</code>\n<code>VPCMPGTD xmm1, xmm2, xmm3/m128</code>\n<code>VPCMPGTD ymm1, ymm2, ymm3/m256</code>\n<code>VPCMPGTQ xmm1, xmm2, xmm3/m128</code>\n<code>VPCMPGTQ ymm1, ymm2, ymm3/m256</code>\n<code>VPCMPGTW xmm1, xmm2, xmm3/m128</code>\n<code>VPCMPGTW ymm1, ymm2, ymm3/m256</code>\n<code>VPCMPISTRI xmm1, xmm2/m128, imm8</code>\n<code>VPCMPISTRM xmm1, xmm2/m128, imm8</code>\n<code>VPDPBSSD xmm1, xmm2, xmm3/m128</code>\n<code>VPDPBSSD ymm1, ymm2, ymm3/m256</code>\n<code>VPDPBSSDS xmm1, xmm2, xmm3/m128</code>\n<code>VPDPBSSDS ymm1, ymm2, ymm3/m256</code>\n<code>VPDPBSUD xmm1, xmm2, xmm3/m128</code>\n<code>VPDPBSUD ymm1, ymm2, ymm3/m256</code>\n<code>VPDPBSUDS xmm1, xmm2, xmm3/m128</code>\n<code>VPDPBSUDS ymm1, ymm2, ymm3/m256</code>\n<code>VPDPBUSD xmm1, xmm2, xmm3/m128</code>\n<code>VPDPBUSD ymm1, ymm2, ymm3/m256</code>\n<code>VPDPBUSDS xmm1, xmm2, xmm3/m128</code>\n<code>VPDPBUSDS ymm1, ymm2, ymm3/m256</code>\n<code>VPDPBUUD xmm1, xmm2, xmm3/m128</code>\n<code>VPDPBUUD ymm1, ymm2, ymm3/m256</code>\n<code>VPDPBUUDS xmm1, xmm2, xmm3/m128</code>\n<code>VPDPBUUDS ymm1, ymm2, ymm3/m256</code>\n<code>VPDPWSSD xmm1, xmm2, xmm3/m128</code>\n<code>VPDPWSSD ymm1, ymm2, ymm3/m256</code>\n<code>VPDPWSSDS xmm1, xmm2, xmm3/m128</code>\n<code>VPDPWSSDS ymm1, ymm2, ymm3/m256</code>\n<code>VPDPWSUD xmm1, xmm2, xmm3/m128</code>\n<code>VPDPWSUD ymm1, ymm2, ymm3/m256</code>\n<code>VPDPWSUDS xmm1, xmm2, xmm3/m128</code>\n<code>VPDPWSUDS ymm1, ymm2, ymm3/m256</code>\n<code>VPDPWUSD xmm1, xmm2, xmm3/m128</code>\n<code>VPDPWUSD ymm1, ymm2, ymm3/m256</code>\n<code>VPDPWUSDS xmm1, xmm2, xmm3/m128</code>\n<code>VPDPWUSDS ymm1, ymm2, ymm3/m256</code>\n<code>VPDPWUUD xmm1, xmm2, xmm3/m128</code>\n<code>VPDPWUUD ymm1, ymm2, ymm3/m256</code>\n<code>VPDPWUUDS xmm1, xmm2, xmm3/m128</code>\n<code>VPDPWUUDS ymm1, ymm2, ymm3/m256</code>\n<code>VPERM2F128 ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VPERM2I128 ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VPERMD ymm1, ymm2, ymm3/m256</code>\n<code>VPERMIL2PD xmm1, xmm2, xmm3, xmm4/m128, imm4</code>\n<code>VPERMIL2PD xmm1, xmm2, xmm3/m128, xmm4, imm4</code>\n<code>VPERMIL2PD ymm1, ymm2, ymm3, ymm4/m256, imm4</code>\n<code>VPERMIL2PD ymm1, ymm2, ymm3/m256, ymm4, imm4</code>\n<code>VPERMIL2PS xmm1, xmm2, xmm3, xmm4/m128, imm4</code>\n<code>VPERMIL2PS xmm1, xmm2, xmm3/m128, xmm4, imm4</code>\n<code>VPERMIL2PS ymm1, ymm2, ymm3, ymm4/m256, imm4</code>\n<code>VPERMIL2PS ymm1, ymm2, ymm3/m256, ymm4, imm4</code>\n<code>VPERMILPD xmm1, xmm2, xmm3/m128</code>\n<code>VPERMILPD xmm1, xmm2/m128, imm8</code>\n<code>VPERMILPD ymm1, ymm2, ymm3/m256</code>\n<code>VPERMILPD ymm1, ymm2/m256, imm8</code>\n<code>VPERMILPS xmm1, xmm2, xmm3/m128</code>\n<code>VPERMILPS xmm1, xmm2/m128, imm8</code>\n<code>VPERMILPS ymm1, ymm2, ymm3/m256</code>\n<code>VPERMILPS ymm1, ymm2/m256, imm8</code>\n<code>VPERMPD ymm1, ymm2/m256, imm8</code>\n<code>VPERMPS ymm1, ymm2, ymm3/m256</code>\n<code>VPERMQ ymm1, ymm2/m256, imm8</code>\n<code>VPEXTRB r32/m8, xmm2, imm8</code>\n<code>VPEXTRB r64/m8, xmm2, imm8</code>\n<code>VPEXTRD r/m32, xmm2, imm8</code>\n<code>VPEXTRQ r/m64, xmm2, imm8</code>\n<code>VPEXTRW r32, xmm1, imm8</code>\n<code>VPEXTRW r32/m16, xmm2, imm8</code>\n<code>VPEXTRW r64, xmm1, imm8</code>\n<code>VPEXTRW r64/m16, xmm2, imm8</code>\n<code>VPGATHERDD xmm1, vm32x, xmm2</code>\n<code>VPGATHERDD ymm1, vm32y, ymm2</code>\n<code>VPGATHERDQ xmm1, vm32x, xmm2</code>\n<code>VPGATHERDQ ymm1, vm32x, ymm2</code>\n<code>VPGATHERQD xmm1, vm64x, xmm2</code>\n<code>VPGATHERQD xmm1, vm64y, xmm2</code>\n<code>VPGATHERQQ xmm1, vm64x, xmm2</code>\n<code>VPGATHERQQ ymm1, vm64y, ymm2</code>\n<code>VPHADDD xmm1, xmm2, xmm3/m128</code>\n<code>VPHADDD ymm1, ymm2, ymm3/m256</code>\n<code>VPHADDSW xmm1, xmm2, xmm3/m128</code>\n<code>VPHADDSW ymm1, ymm2, ymm3/m256</code>\n<code>VPHADDW xmm1, xmm2, xmm3/m128</code>\n<code>VPHADDW ymm1, ymm2, ymm3/m256</code>\n<code>VPHMINPOSUW xmm1, xmm2/m128</code>\n<code>VPHSUBD xmm1, xmm2, xmm3/m128</code>\n<code>VPHSUBD ymm1, ymm2, ymm3/m256</code>\n<code>VPHSUBSW xmm1, xmm2, xmm3/m128</code>\n<code>VPHSUBSW ymm1, ymm2, ymm3/m256</code>\n<code>VPHSUBW xmm1, xmm2, xmm3/m128</code>\n<code>VPHSUBW ymm1, ymm2, ymm3/m256</code>\n<code>VPINSRB xmm1, xmm2, r32/m8, imm8</code>\n<code>VPINSRB xmm1, xmm2, r64/m8, imm8</code>\n<code>VPINSRD xmm1, xmm2, r/m32, imm8</code>\n<code>VPINSRQ xmm1, xmm2, r/m64, imm8</code>\n<code>VPINSRW xmm1, xmm2, r32/m16, imm8</code>\n<code>VPINSRW xmm1, xmm2, r64/m16, imm8</code>\n<code>VPMADD52HUQ xmm1, xmm2, xmm3/m128</code>\n<code>VPMADD52HUQ ymm1, ymm2, ymm3/m256</code>\n<code>VPMADD52LUQ xmm1, xmm2, xmm3/m128</code>\n<code>VPMADD52LUQ ymm1, ymm2, ymm3/m256</code>\n<code>VPMADDUBSW xmm1, xmm2, xmm3/m128</code>\n<code>VPMADDUBSW ymm1, ymm2, ymm3/m256</code>\n<code>VPMADDWD xmm1, xmm2, xmm3/m128</code>\n<code>VPMADDWD ymm1, ymm2, ymm3/m256</code>\n<code>VPMASKMOVD m128, xmm1, xmm2</code>\n<code>VPMASKMOVD m256, ymm1, ymm2</code>\n<code>VPMASKMOVD xmm1, xmm2, m128</code>\n<code>VPMASKMOVD ymm1, ymm2, m256</code>\n<code>VPMASKMOVQ m128, xmm1, xmm2</code>\n<code>VPMASKMOVQ m256, ymm1, ymm2</code>\n<code>VPMASKMOVQ xmm1, xmm2, m128</code>\n<code>VPMASKMOVQ ymm1, ymm2, m256</code>\n<code>VPMAXSB xmm1, xmm2, xmm3/m128</code>\n<code>VPMAXSB ymm1, ymm2, ymm3/m256</code>\n<code>VPMAXSD xmm1, xmm2, xmm3/m128</code>\n<code>VPMAXSD ymm1, ymm2, ymm3/m256</code>\n<code>VPMAXSW xmm1, xmm2, xmm3/m128</code>\n<code>VPMAXSW ymm1, ymm2, ymm3/m256</code>\n<code>VPMAXUB xmm1, xmm2, xmm3/m128</code>\n<code>VPMAXUB ymm1, ymm2, ymm3/m256</code>\n<code>VPMAXUD xmm1, xmm2, xmm3/m128</code>\n<code>VPMAXUD ymm1, ymm2, ymm3/m256</code>\n<code>VPMAXUW xmm1, xmm2, xmm3/m128</code>\n<code>VPMAXUW ymm1, ymm2, ymm3/m256</code>\n<code>VPMINSB xmm1, xmm2, xmm3/m128</code>\n<code>VPMINSB ymm1, ymm2, ymm3/m256</code>\n<code>VPMINSD xmm1, xmm2, xmm3/m128</code>\n<code>VPMINSD ymm1, ymm2, ymm3/m256</code>\n<code>VPMINSW xmm1, xmm2, xmm3/m128</code>\n<code>VPMINSW ymm1, ymm2, ymm3/m256</code>\n<code>VPMINUB xmm1, xmm2, xmm3/m128</code>\n<code>VPMINUB ymm1, ymm2, ymm3/m256</code>\n<code>VPMINUD xmm1, xmm2, xmm3/m128</code>\n<code>VPMINUD ymm1, ymm2, ymm3/m256</code>\n<code>VPMINUW xmm1, xmm2, xmm3/m128</code>\n<code>VPMINUW ymm1, ymm2, ymm3/m256</code>\n<code>VPMOVMSKB r32, xmm1</code>\n<code>VPMOVMSKB r32, ymm1</code>\n<code>VPMOVMSKB r64, xmm1</code>\n<code>VPMOVMSKB r64, ymm1</code>\n<code>VPMOVSXBD xmm1, xmm2/m32</code>\n<code>VPMOVSXBD ymm1, xmm2/m64</code>\n<code>VPMOVSXBQ xmm1, xmm2/m16</code>\n<code>VPMOVSXBQ ymm1, xmm2/m32</code>\n<code>VPMOVSXBW xmm1, xmm2/m64</code>\n<code>VPMOVSXBW ymm1, xmm2/m128</code>\n<code>VPMOVSXDQ xmm1, xmm2/m64</code>\n<code>VPMOVSXDQ ymm1, xmm2/m128</code>\n<code>VPMOVSXWD xmm1, xmm2/m64</code>\n<code>VPMOVSXWD ymm1, xmm2/m128</code>\n<code>VPMOVSXWQ xmm1, xmm2/m32</code>\n<code>VPMOVSXWQ ymm1, xmm2/m64</code>\n<code>VPMOVZXBD xmm1, xmm2/m32</code>\n<code>VPMOVZXBD ymm1, xmm2/m64</code>\n<code>VPMOVZXBQ xmm1, xmm2/m16</code>\n<code>VPMOVZXBQ ymm1, xmm2/m32</code>\n<code>VPMOVZXBW xmm1, xmm2/m64</code>\n<code>VPMOVZXBW ymm1, xmm2/m128</code>\n<code>VPMOVZXDQ xmm1, xmm2/m64</code>\n<code>VPMOVZXDQ ymm1, xmm2/m128</code>\n<code>VPMOVZXWD xmm1, xmm2/m64</code>\n<code>VPMOVZXWD ymm1, xmm2/m128</code>\n<code>VPMOVZXWQ xmm1, xmm2/m32</code>\n<code>VPMOVZXWQ ymm1, xmm2/m64</code>\n<code>VPMULDQ xmm1, xmm2, xmm3/m128</code>\n<code>VPMULDQ ymm1, ymm2, ymm3/m256</code>\n<code>VPMULHRSW xmm1, xmm2, xmm3/m128</code>\n<code>VPMULHRSW ymm1, ymm2, ymm3/m256</code>\n<code>VPMULHUW xmm1, xmm2, xmm3/m128</code>\n<code>VPMULHUW ymm1, ymm2, ymm3/m256</code>\n<code>VPMULHW xmm1, xmm2, xmm3/m128</code>\n<code>VPMULHW ymm1, ymm2, ymm3/m256</code>\n<code>VPMULLD xmm1, xmm2, xmm3/m128</code>\n<code>VPMULLD ymm1, ymm2, ymm3/m256</code>\n<code>VPMULLW xmm1, xmm2, xmm3/m128</code>\n<code>VPMULLW ymm1, ymm2, ymm3/m256</code>\n<code>VPMULUDQ xmm1, xmm2, xmm3/m128</code>\n<code>VPMULUDQ ymm1, ymm2, ymm3/m256</code>\n<code>VPOR xmm1, xmm2, xmm3/m128</code>\n<code>VPOR ymm1, ymm2, ymm3/m256</code>\n<code>VPSADBW xmm1, xmm2, xmm3/m128</code>\n<code>VPSADBW ymm1, ymm2, ymm3/m256</code>\n<code>VPSHUFB xmm1, xmm2, xmm3/m128</code>\n<code>VPSHUFB ymm1, ymm2, ymm3/m256</code>\n<code>VPSHUFD xmm1, xmm2/m128, imm8</code>\n<code>VPSHUFD ymm1, ymm2/m256, imm8</code>\n<code>VPSHUFHW xmm1, xmm2/m128, imm8</code>\n<code>VPSHUFHW ymm1, ymm2/m256, imm8</code>\n<code>VPSHUFLW xmm1, xmm2/m128, imm8</code>\n<code>VPSHUFLW ymm1, ymm2/m256, imm8</code>\n<code>VPSIGNB xmm1, xmm2, xmm3/m128</code>\n<code>VPSIGNB ymm1, ymm2, ymm3/m256</code>\n<code>VPSIGND xmm1, xmm2, xmm3/m128</code>\n<code>VPSIGND ymm1, ymm2, ymm3/m256</code>\n<code>VPSIGNW xmm1, xmm2, xmm3/m128</code>\n<code>VPSIGNW ymm1, ymm2, ymm3/m256</code>\n<code>VPSLLD xmm1, xmm2, imm8</code>\n<code>VPSLLD xmm1, xmm2, xmm3/m128</code>\n<code>VPSLLD ymm1, ymm2, imm8</code>\n<code>VPSLLD ymm1, ymm2, xmm3/m128</code>\n<code>VPSLLDQ xmm1, xmm2, imm8</code>\n<code>VPSLLDQ ymm1, ymm2, imm8</code>\n<code>VPSLLQ xmm1, xmm2, imm8</code>\n<code>VPSLLQ xmm1, xmm2, xmm3/m128</code>\n<code>VPSLLQ ymm1, ymm2, imm8</code>\n<code>VPSLLQ ymm1, ymm2, xmm3/m128</code>\n<code>VPSLLVD xmm1, xmm2, xmm3/m128</code>\n<code>VPSLLVD ymm1, ymm2, ymm3/m256</code>\n<code>VPSLLVQ xmm1, xmm2, xmm3/m128</code>\n<code>VPSLLVQ ymm1, ymm2, ymm3/m256</code>\n<code>VPSLLW xmm1, xmm2, imm8</code>\n<code>VPSLLW xmm1, xmm2, xmm3/m128</code>\n<code>VPSLLW ymm1, ymm2, imm8</code>\n<code>VPSLLW ymm1, ymm2, xmm3/m128</code>\n<code>VPSRAD xmm1, xmm2, imm8</code>\n<code>VPSRAD xmm1, xmm2, xmm3/m128</code>\n<code>VPSRAD ymm1, ymm2, imm8</code>\n<code>VPSRAD ymm1, ymm2, xmm3/m128</code>\n<code>VPSRAVD xmm1, xmm2, xmm3/m128</code>\n<code>VPSRAVD ymm1, ymm2, ymm3/m256</code>\n<code>VPSRAW xmm1, xmm2, imm8</code>\n<code>VPSRAW xmm1, xmm2, xmm3/m128</code>\n<code>VPSRAW ymm1, ymm2, imm8</code>\n<code>VPSRAW ymm1, ymm2, xmm3/m128</code>\n<code>VPSRLD xmm1, xmm2, imm8</code>\n<code>VPSRLD xmm1, xmm2, xmm3/m128</code>\n<code>VPSRLD ymm1, ymm2, imm8</code>\n<code>VPSRLD ymm1, ymm2, xmm3/m128</code>\n<code>VPSRLDQ xmm1, xmm2, imm8</code>\n<code>VPSRLDQ ymm1, ymm2, imm8</code>\n<code>VPSRLQ xmm1, xmm2, imm8</code>\n<code>VPSRLQ xmm1, xmm2, xmm3/m128</code>\n<code>VPSRLQ ymm1, ymm2, imm8</code>\n<code>VPSRLQ ymm1, ymm2, xmm3/m128</code>\n<code>VPSRLVD xmm1, xmm2, xmm3/m128</code>\n<code>VPSRLVD ymm1, ymm2, ymm3/m256</code>\n<code>VPSRLVQ xmm1, xmm2, xmm3/m128</code>\n<code>VPSRLVQ ymm1, ymm2, ymm3/m256</code>\n<code>VPSRLW xmm1, xmm2, imm8</code>\n<code>VPSRLW xmm1, xmm2, xmm3/m128</code>\n<code>VPSRLW ymm1, ymm2, imm8</code>\n<code>VPSRLW ymm1, ymm2, xmm3/m128</code>\n<code>VPSUBB xmm1, xmm2, xmm3/m128</code>\n<code>VPSUBB ymm1, ymm2, ymm3/m256</code>\n<code>VPSUBD xmm1, xmm2, xmm3/m128</code>\n<code>VPSUBD ymm1, ymm2, ymm3/m256</code>\n<code>VPSUBQ xmm1, xmm2, xmm3/m128</code>\n<code>VPSUBQ ymm1, ymm2, ymm3/m256</code>\n<code>VPSUBSB xmm1, xmm2, xmm3/m128</code>\n<code>VPSUBSB ymm1, ymm2, ymm3/m256</code>\n<code>VPSUBSW xmm1, xmm2, xmm3/m128</code>\n<code>VPSUBSW ymm1, ymm2, ymm3/m256</code>\n<code>VPSUBUSB xmm1, xmm2, xmm3/m128</code>\n<code>VPSUBUSB ymm1, ymm2, ymm3/m256</code>\n<code>VPSUBUSW xmm1, xmm2, xmm3/m128</code>\n<code>VPSUBUSW ymm1, ymm2, ymm3/m256</code>\n<code>VPSUBW xmm1, xmm2, xmm3/m128</code>\n<code>VPSUBW ymm1, ymm2, ymm3/m256</code>\n<code>VPTEST xmm1, xmm2/m128</code>\n<code>VPTEST ymm1, ymm2/m256</code>\n<code>VPUNPCKHBW xmm1, xmm2, xmm3/m128</code>\n<code>VPUNPCKHBW ymm1, ymm2, ymm3/m256</code>\n<code>VPUNPCKHDQ xmm1, xmm2, xmm3/m128</code>\n<code>VPUNPCKHDQ ymm1, ymm2, ymm3/m256</code>\n<code>VPUNPCKHQDQ xmm1, xmm2, xmm3/m128</code>\n<code>VPUNPCKHQDQ ymm1, ymm2, ymm3/m256</code>\n<code>VPUNPCKHWD xmm1, xmm2, xmm3/m128</code>\n<code>VPUNPCKHWD ymm1, ymm2, ymm3/m256</code>\n<code>VPUNPCKLBW xmm1, xmm2, xmm3/m128</code>\n<code>VPUNPCKLBW ymm1, ymm2, ymm3/m256</code>\n<code>VPUNPCKLDQ xmm1, xmm2, xmm3/m128</code>\n<code>VPUNPCKLDQ ymm1, ymm2, ymm3/m256</code>\n<code>VPUNPCKLQDQ xmm1, xmm2, xmm3/m128</code>\n<code>VPUNPCKLQDQ ymm1, ymm2, ymm3/m256</code>\n<code>VPUNPCKLWD xmm1, xmm2, xmm3/m128</code>\n<code>VPUNPCKLWD ymm1, ymm2, ymm3/m256</code>\n<code>VPXOR xmm1, xmm2, xmm3/m128</code>\n<code>VPXOR ymm1, ymm2, ymm3/m256</code>\n<code>VRCPPS xmm1, xmm2/m128</code>\n<code>VRCPPS ymm1, ymm2/m256</code>\n<code>VRCPSS xmm1, xmm2, xmm3/m32</code>\n<code>VROUNDPD xmm1, xmm2/m128, imm8</code>\n<code>VROUNDPD ymm1, ymm2/m256, imm8</code>\n<code>VROUNDPS xmm1, xmm2/m128, imm8</code>\n<code>VROUNDPS ymm1, ymm2/m256, imm8</code>\n<code>VROUNDSD xmm1, xmm2, xmm3/m64, imm8</code>\n<code>VROUNDSS xmm1, xmm2, xmm3/m32, imm8</code>\n<code>VRSQRTPS xmm1, xmm2/m128</code>\n<code>VRSQRTPS ymm1, ymm2/m256</code>\n<code>VRSQRTSS xmm1, xmm2, xmm3/m32</code>\n<code>VSHA512MSG1 ymm1, xmm2</code>\n<code>VSHA512MSG2 ymm1, ymm2</code>\n<code>VSHA512RNDS2 ymm1, ymm2, xmm3</code>\n<code>VSHUFPD xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VSHUFPD ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VSHUFPS xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VSHUFPS ymm1, ymm2, ymm3/m256, imm8</code>\n<code>VSM3MSG1 xmm1, xmm2, xmm3/m128</code>\n<code>VSM3MSG2 xmm1, xmm2, xmm3/m128</code>\n<code>VSM3RNDS2 xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VSM4KEY4 xmm1, xmm2, xmm3/m128</code>\n<code>VSM4KEY4 ymm1, ymm2, ymm3/m256</code>\n<code>VSM4RNDS4 xmm1, xmm2, xmm3/m128</code>\n<code>VSM4RNDS4 ymm1, ymm2, ymm3/m256</code>\n<code>VSQRTPD xmm1, xmm2/m128</code>\n<code>VSQRTPD ymm1, ymm2/m256</code>\n<code>VSQRTPS xmm1, xmm2/m128</code>\n<code>VSQRTPS ymm1, ymm2/m256</code>\n<code>VSQRTSD xmm1, xmm2, xmm3/m64</code>\n<code>VSQRTSS xmm1, xmm2, xmm3/m32</code>\n<code>VSTMXCSR m32</code>\n<code>VSUBPD xmm1, xmm2, xmm3/m128</code>\n<code>VSUBPD ymm1, ymm2, ymm3/m256</code>\n<code>VSUBPS xmm1, xmm2, xmm3/m128</code>\n<code>VSUBPS ymm1, ymm2, ymm3/m256</code>\n<code>VSUBSD xmm1, xmm2, xmm3/m64</code>\n<code>VSUBSS xmm1, xmm2, xmm3/m32</code>\n<code>VTESTPD xmm1, xmm2/m128</code>\n<code>VTESTPD ymm1, ymm2/m256</code>\n<code>VTESTPS xmm1, xmm2/m128</code>\n<code>VTESTPS ymm1, ymm2/m256</code>\n<code>VUCOMISD xmm1, xmm2/m64</code>\n<code>VUCOMISS xmm1, xmm2/m32</code>\n<code>VUNPCKHPD xmm1, xmm2, xmm3/m128</code>\n<code>VUNPCKHPD ymm1, ymm2, ymm3/m256</code>\n<code>VUNPCKHPS xmm1, xmm2, xmm3/m128</code>\n<code>VUNPCKHPS ymm1, ymm2, ymm3/m256</code>\n<code>VUNPCKLPD xmm1, xmm2, xmm3/m128</code>\n<code>VUNPCKLPD ymm1, ymm2, ymm3/m256</code>\n<code>VUNPCKLPS xmm1, xmm2, xmm3/m128</code>\n<code>VUNPCKLPS ymm1, ymm2, ymm3/m256</code>\n<code>VXORPD xmm1, xmm2, xmm3/m128</code>\n<code>VXORPD ymm1, ymm2, ymm3/m256</code>\n<code>VXORPS xmm1, xmm2, xmm3/m128</code>\n<code>VXORPS ymm1, ymm2, ymm3/m256</code>\n<code>VZEROALL</code>\n<code>VZEROUPPER</code>\n<code>VERR r32/m16</code>\n<code>VERR r64/m16</code>\n<code>VERR r/m16</code>\n<code>VERW r32/m16</code>\n<code>VERW r64/m16</code>\n<code>VERW r/m16</code>\n<code>UNDOC</code>\n<code>UNDOC</code>\n<code>UNDOC</code>\n<code>UNDOC</code>\n<code>UNDOC</code>\n<code>UNDOC</code>\n<code>VMCALL</code>\n<code>VMCLEAR m64</code>\n<code>VMFUNC</code>\n<code>VMGEXIT</code>\n<code>VMGEXIT</code>\n<code>VMLAUNCH</code>\n<code>VMLOAD</code>\n<code>VMLOAD</code>\n<code>VMLOAD</code>\n<code>VMMCALL</code>\n<code>VMPTRLD m64</code>\n<code>VMPTRST m64</code>\n<code>VMREAD r/m32, r32</code>\n<code>VMREAD r/m64, r64</code>\n<code>VMRESUME</code>\n<code>VMRUN</code>\n<code>VMRUN</code>\n<code>VMRUN</code>\n<code>VMSAVE</code>\n<code>VMSAVE</code>\n<code>VMSAVE</code>\n<code>VMWRITE r32, r/m32</code>\n<code>VMWRITE r64, r/m64</code>\n<code>VMXOFF</code>\n<code>VMXON m64</code>\n<code>WAIT</code>\n<code>WBINVD</code>\n<code>WBNOINVD</code>\nMemory location contains a 16-bit offset (…\n<code>WRFSBASE r32</code>\n<code>WRFSBASE r64</code>\n<code>WRGSBASE r32</code>\n<code>WRGSBASE r64</code>\n<code>WRMSR</code>\n<code>WRMSRLIST</code>\n<code>WRMSRNS</code>\n<code>WRPKRU</code>\n<code>WRSHR r/m32</code>\n<code>WRSSD m32, r32</code>\n<code>WRSSQ m64, r64</code>\n<code>WRUDBG</code>\n<code>WRUSSD m32, r32</code>\n<code>WRUSSQ m64, r64</code>\nDecode <code>XBTS</code>/<code>IBTS</code>\nXOP encoding\n<code>BEXTR r32, r/m32, imm32</code>\n<code>BEXTR r64, r/m64, imm32</code>\n<code>BLCFILL r32, r/m32</code>\n<code>BLCFILL r64, r/m64</code>\n<code>BLCI r32, r/m32</code>\n<code>BLCI r64, r/m64</code>\n<code>BLCIC r32, r/m32</code>\n<code>BLCIC r64, r/m64</code>\n<code>BLCMSK r32, r/m32</code>\n<code>BLCMSK r64, r/m64</code>\n<code>BLCS r32, r/m32</code>\n<code>BLCS r64, r/m64</code>\n<code>BLSFILL r32, r/m32</code>\n<code>BLSFILL r64, r/m64</code>\n<code>BLSIC r32, r/m32</code>\n<code>BLSIC r64, r/m64</code>\n<code>LLWPCB r32</code>\n<code>LLWPCB r64</code>\n<code>LWPINS r32, r/m32, imm32</code>\n<code>LWPINS r64, r/m32, imm32</code>\n<code>LWPVAL r32, r/m32, imm32</code>\n<code>LWPVAL r64, r/m32, imm32</code>\n<code>SLWPCB r32</code>\n<code>SLWPCB r64</code>\n<code>T1MSKC r32, r/m32</code>\n<code>T1MSKC r64, r/m64</code>\n<code>TZMSK r32, r/m32</code>\n<code>TZMSK r64, r/m64</code>\n<code>VFRCZPD xmm1, xmm2/m128</code>\n<code>VFRCZPD ymm1, ymm2/m256</code>\n<code>VFRCZPS xmm1, xmm2/m128</code>\n<code>VFRCZPS ymm1, ymm2/m256</code>\n<code>VFRCZSD xmm1, xmm2/m64</code>\n<code>VFRCZSS xmm1, xmm2/m32</code>\n<code>VPCMOV xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VPCMOV xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPCMOV ymm1, ymm2, ymm3, ymm4/m256</code>\n<code>VPCMOV ymm1, ymm2, ymm3/m256, ymm4</code>\n<code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code>\n<code>VPHADDBD xmm1, xmm2/m128</code>\n<code>VPHADDBQ xmm1, xmm2/m128</code>\n<code>VPHADDBW xmm1, xmm2/m128</code>\n<code>VPHADDDQ xmm1, xmm2/m128</code>\n<code>VPHADDUBD xmm1, xmm2/m128</code>\n<code>VPHADDUBQ xmm1, xmm2/m128</code>\n<code>VPHADDUBW xmm1, xmm2/m128</code>\n<code>VPHADDUDQ xmm1, xmm2/m128</code>\n<code>VPHADDUWD xmm1, xmm2/m128</code>\n<code>VPHADDUWQ xmm1, xmm2/m128</code>\n<code>VPHADDWD xmm1, xmm2/m128</code>\n<code>VPHADDWQ xmm1, xmm2/m128</code>\n<code>VPHSUBBW xmm1, xmm2/m128</code>\n<code>VPHSUBDQ xmm1, xmm2/m128</code>\n<code>VPHSUBWD xmm1, xmm2/m128</code>\n<code>VPMACSDD xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPMACSDQH xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPMACSDQL xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPMACSSDD xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPMACSSDQH xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPMACSSDQL xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPMACSSWD xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPMACSSWW xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPMACSWD xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPMACSWW xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPMADCSSWD xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPMADCSWD xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPPERM xmm1, xmm2, xmm3, xmm4/m128</code>\n<code>VPPERM xmm1, xmm2, xmm3/m128, xmm4</code>\n<code>VPROTB xmm1, xmm2, xmm3/m128</code>\n<code>VPROTB xmm1, xmm2/m128, imm8</code>\n<code>VPROTB xmm1, xmm2/m128, xmm3</code>\n<code>VPROTD xmm1, xmm2, xmm3/m128</code>\n<code>VPROTD xmm1, xmm2/m128, imm8</code>\n<code>VPROTD xmm1, xmm2/m128, xmm3</code>\n<code>VPROTQ xmm1, xmm2, xmm3/m128</code>\n<code>VPROTQ xmm1, xmm2/m128, imm8</code>\n<code>VPROTQ xmm1, xmm2/m128, xmm3</code>\n<code>VPROTW xmm1, xmm2, xmm3/m128</code>\n<code>VPROTW xmm1, xmm2/m128, imm8</code>\n<code>VPROTW xmm1, xmm2/m128, xmm3</code>\n<code>VPSHAB xmm1, xmm2, xmm3/m128</code>\n<code>VPSHAB xmm1, xmm2/m128, xmm3</code>\n<code>VPSHAD xmm1, xmm2, xmm3/m128</code>\n<code>VPSHAD xmm1, xmm2/m128, xmm3</code>\n<code>VPSHAQ xmm1, xmm2, xmm3/m128</code>\n<code>VPSHAQ xmm1, xmm2/m128, xmm3</code>\n<code>VPSHAW xmm1, xmm2, xmm3/m128</code>\n<code>VPSHAW xmm1, xmm2/m128, xmm3</code>\n<code>VPSHLB xmm1, xmm2, xmm3/m128</code>\n<code>VPSHLB xmm1, xmm2/m128, xmm3</code>\n<code>VPSHLD xmm1, xmm2, xmm3/m128</code>\n<code>VPSHLD xmm1, xmm2/m128, xmm3</code>\n<code>VPSHLQ xmm1, xmm2, xmm3/m128</code>\n<code>VPSHLQ xmm1, xmm2/m128, xmm3</code>\n<code>VPSHLW xmm1, xmm2, xmm3/m128</code>\n<code>VPSHLW xmm1, xmm2/m128, xmm3</code>\n<code>XABORT imm8</code>\n<code>XADD r/m16, r16</code>\n<code>XADD r/m32, r32</code>\n<code>XADD r/m64, r64</code>\n<code>XADD r/m8, r8</code>\n<code>XBEGIN rel16</code>\n<code>XBEGIN rel32</code>\n<code>XBTS r16, r/m16</code>\n<code>XBTS r32, r/m32</code>\n<code>XCHG r16, AX</code>\n<code>XCHG r32, EAX</code>\n<code>XCHG r64, RAX</code>\n<code>XCHG r/m16, r16</code>\n<code>XCHG r/m32, r32</code>\n<code>XCHG r/m64, r64</code>\n<code>XCHG r/m8, r8</code>\n<code>XCRYPTCBC</code>\n<code>XCRYPTCBC</code>\n<code>XCRYPTCBC</code>\n<code>XCRYPTCFB</code>\n<code>XCRYPTCFB</code>\n<code>XCRYPTCFB</code>\n<code>XCRYPTCTR</code>\n<code>XCRYPTCTR</code>\n<code>XCRYPTCTR</code>\n<code>XCRYPTECB</code>\n<code>XCRYPTECB</code>\n<code>XCRYPTECB</code>\n<code>XCRYPTOFB</code>\n<code>XCRYPTOFB</code>\n<code>XCRYPTOFB</code>\n<code>XEND</code>\n<code>XGETBV</code>\n<code>XLATB</code>\n<code>XOR AL, imm8</code>\n<code>XOR AX, imm16</code>\n<code>XOR EAX, imm32</code>\n<code>XOR RAX, imm32</code>\n<code>XOR r16, r/m16</code>\n<code>XOR r32, r/m32</code>\n<code>XOR r64, r/m64</code>\n<code>XOR r8, r/m8</code>\n<code>XOR r/m16, imm16</code>\n<code>XOR r/m16, imm8</code>\n<code>XOR r/m16, r16</code>\n<code>XOR r/m32, imm32</code>\n<code>XOR r/m32, imm8</code>\n<code>XOR r/m32, r32</code>\n<code>XOR r/m64, imm32</code>\n<code>XOR r/m64, imm8</code>\n<code>XOR r/m64, r64</code>\n<code>XOR r/m8, imm8</code>\n<code>XOR r/m8, imm8</code>\n<code>XOR r/m8, r8</code>\n<code>XORPD xmm1, xmm2/m128</code>\n<code>XORPS xmm1, xmm2/m128</code>\n<code>XRESLDTRK</code>\n<code>XRSTOR64 mem</code>\n<code>XRSTOR mem</code>\n<code>XRSTORS64 mem</code>\n<code>XRSTORS mem</code>\n32-bit <code>XSAVE</code> area\n64-bit <code>XSAVE</code> area\n<code>XSAVE64 mem</code>\n<code>XSAVE mem</code>\n<code>XSAVEC64 mem</code>\n<code>XSAVEC mem</code>\n<code>XSAVEOPT64 mem</code>\n<code>XSAVEOPT mem</code>\n<code>XSAVES64 mem</code>\n<code>XSAVES mem</code>\n<code>XSETBV</code>\n<code>XSHA1</code>\n<code>XSHA1</code>\n<code>XSHA1</code>\n<code>XSHA256</code>\n<code>XSHA256</code>\n<code>XSHA256</code>\n<code>XSHA512</code>\n<code>XSHA512</code>\n<code>XSHA512</code>\n<code>XSHA512_ALT</code>\n<code>XSHA512_ALT</code>\n<code>XSHA512_ALT</code>\n<code>XSTORE</code>\n<code>XSTORE</code>\n<code>XSTORE</code>\n<code>XSTORE_ALT</code>\n<code>XSTORE_ALT</code>\n<code>XSTORE_ALT</code>\n<code>XSUSLDTRK</code>\n<code>XTEST</code>\nA zero-sized instruction. Can be used as a label.\nZeroing masking: <code>{z}</code>\n<code>JA</code>, <code>CMOVA</code>, <code>SETA</code>\nAdd a leading zero to hex numbers if there’s no prefix …\nAdd a leading zero to hex numbers if there’s no prefix …\nThe address of the symbol\n<code>JAE</code>, <code>CMOVAE</code>, <code>SETAE</code>\nAlways show the scale value even if it’s <code>*1</code>\nAlways show the effective segment register. If the option …\n<code>JB</code>, <code>CMOVB</code>, <code>SETB</code>\n<code>JBE</code>, <code>CMOVBE</code>, <code>SETBE</code>\nSize of a digit group, see also <code>digit_separator()</code>\nBinary number prefix or an empty string\nBinary number suffix or an empty string\nGets the bitness (16, 32 or 64)\nAdd leading zeros to branch offsets. Used by <code>CALL NEAR</code>, …\nShow branch size (eg. <code>SHORT</code>, <code>NEAR PTR</code>)\n<code>JC</code>, <code>CMOVC</code>, <code>SETC</code>\nReturns <code>true</code> if there’s at least one more byte to …\nMnemonic condition code selector (eg. <code>JA</code> / <code>JNBE</code>)\nMnemonic condition code selector (eg. <code>JAE</code> / <code>JNB</code> / <code>JNC</code>)\nMnemonic condition code selector (eg. <code>JB</code> / <code>JC</code> / <code>JNAE</code>)\nMnemonic condition code selector (eg. <code>JBE</code> / <code>JNA</code>)\nMnemonic condition code selector (eg. <code>JE</code> / <code>JZ</code>)\nMnemonic condition code selector (eg. <code>JG</code> / <code>JNLE</code>)\nMnemonic condition code selector (eg. <code>JGE</code> / <code>JNL</code>)\nMnemonic condition code selector (eg. <code>JL</code> / <code>JNGE</code>)\nMnemonic condition code selector (eg. <code>JLE</code> / <code>JNG</code>)\nMnemonic condition code selector (eg. <code>JNE</code> / <code>JNZ</code>)\nMnemonic condition code selector (eg. <code>JNP</code> / <code>JPO</code>)\nMnemonic condition code selector (eg. <code>JP</code> / <code>JPE</code>)\nGets the instruction code, see also <code>mnemonic()</code>\nGets the code size when the instruction was decoded. This …\nColor\nSize of a digit group, see also <code>digit_separator()</code>\nDecimal number prefix or an empty string\nDecimal number suffix or an empty string\nGets the number of elements in a <code>db</code>/<code>dw</code>/<code>dd</code>/<code>dq</code> directive. …\nDecodes and returns the next instruction, see also …\nDecodes the next instruction. The difference between this …\nSize of a digit group or 0 to not use a digit separator\nDigit separator or an empty string. See also eg. …\nDigit separator or an empty string to not use a digit …\nAdd leading zeros to displacements\nAdd leading zeros to displacements\nThe offset of the displacement, if any\nSize in bytes of the displacement, or 0 if there’s no …\n<code>JE</code>, <code>CMOVE</code>, <code>SETE</code>, <code>LOOPE</code>, <code>REPE</code>\nChecks if two instructions are equal, comparing all bits, …\nGets the operand’s branch target. Use this method if the …\nGets the operand’s branch target. Use this method if the …\nGets the operand’s branch target selector. Use this …\nCharacter index (0-based) where the first operand is …\nSymbol flags, see <code>SymbolFlags</code>\nFormats the whole instruction: prefixes, mnemonic, operands\nFormats all operands\nFormats a <code>i16</code>\nFormats a <code>i16</code>\nFormats a <code>i32</code>\nFormats a <code>i32</code>\nFormats a <code>i64</code>\nFormats a <code>i64</code>\nFormats a <code>i8</code>\nFormats a <code>i8</code>\nFormats the mnemonic and any prefixes\nFormats the mnemonic and any prefixes\nFormats the mnemonic and/or any prefixes\nFormats an operand. This is a formatter operand and not …\nFormats an operand separator\nFormats a register\nFormats a <code>u16</code>\nFormats a <code>u16</code>\nFormats a <code>u32</code>\nFormats a <code>u32</code>\nFormats a <code>u64</code>\nFormats a <code>u64</code>\nFormats a <code>u8</code>\nFormats a <code>u8</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>JG</code>, <code>CMOVG</code>, <code>SETG</code>\n(gas only): If <code>true</code>, the formatter doesn’t add <code>%</code> to …\n(gas only): Shows the mnemonic size suffix even when not …\n(gas only): Add a space after the comma if it’s a memory …\n<code>JGE</code>, <code>CMOVGE</code>, <code>SETGE</code>\nGets the offsets of the constants (memory displacement and …\nGets a <code>db</code> value, see also <code>declare_data_len()</code>. Can only be …\nGets a <code>dd</code> value, see also <code>declare_data_len()</code>. Can only be …\nGets a <code>dq</code> value, see also <code>declare_data_len()</code>. Can only be …\nGets a <code>dw</code> value, see also <code>declare_data_len()</code>. Can only be …\nConverts an instruction operand index to a formatter …\nConverts a formatter operand index to an instruction …\n<code>true</code> if <code>displacement_offset()</code> and <code>displacement_size()</code> are …\n<code>true</code> if <code>immediate_offset()</code> and <code>immediate_size()</code> are valid\n<code>true</code> if <code>immediate_offset2()</code> and <code>immediate_size2()</code> are valid\n<code>true</code> if the instruction has the <code>LOCK</code> prefix (<code>F0</code>)\nChecks if there’s an opmask register (<code>op_mask()</code>)\n<code>true</code> if the instruction has the <code>REPE</code> or <code>REP</code> prefix (<code>F3</code>)\n<code>true</code> if the instruction has the <code>REPE</code> or <code>REP</code> prefix (<code>F3</code>)\n<code>true</code> if the instruction has the <code>REPNE</code> prefix (<code>F2</code>)\nChecks if the instruction has a segment override prefix, …\n<code>true</code> if the instruction has the <code>XACQUIRE</code> prefix (<code>F2</code>)\n<code>true</code> if the instruction has the <code>XRELEASE</code> prefix (<code>F3</code>)\nSize of a digit group, see also <code>digit_separator()</code>\nHex number prefix or an empty string, eg. <code>&quot;0x&quot;</code>\nHex number suffix or an empty string, eg. <code>&quot;h&quot;</code>\nGets an operand’s immediate value\nGets the operand’s immediate value. Use this method if …\nGets the operand’s immediate value. Use this method if …\nGets the operand’s immediate value. Use this method if …\nGets the operand’s immediate value. Use this method if …\nGets the operand’s immediate value. Use this method if …\nGets the operand’s immediate value. Use this method if …\nGets the operand’s immediate value. Use this method if …\nGets the operand’s immediate value. Use this method if …\nGets the operand’s immediate value. Use this method if …\nThe offset of the first immediate, if any.\nThe offset of the second immediate, if any.\nSize in bytes of the first immediate, or 0 if there’s no …\nSize in bytes of the second immediate, or 0 if there’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the current <code>IP</code>/<code>EIP</code>/<code>RIP</code> value, see also <code>position()</code>\nGets the 64-bit IP of the instruction, see also <code>next_ip()</code>\nGets the 16-bit IP of the instruction, see also <code>next_ip16()</code>\nGets the 32-bit IP of the instruction, see also <code>next_ip32()</code>\nGets the <code>RIP</code>/<code>EIP</code> releative address (<code>memory_displacement32()</code>…\n<code>true</code> if the data is broadcast (EVEX instructions only)\nChecks if it’s an invalid instruction (<code>code()</code> == …\nChecks if the memory operand is <code>RIP</code>/<code>EIP</code> relative\nChecks if this is a VSIB instruction, see also <code>is_vsib32()</code>…\nVSIB instructions only (<code>is_vsib()</code>): <code>true</code> if it’s using …\nVSIB instructions only (<code>is_vsib()</code>): <code>true</code> if it’s using …\nReturns an iterator that borrows this instance to decode …\n<code>JL</code>, <code>CMOVL</code>, <code>SETL</code>\nGets the last decoder error. Unless you need to know the …\n<code>JLE</code>, <code>CMOVLE</code>, <code>SETLE</code>\nAdd leading zeros to hexadecimal/octal/binary numbers. …\nIf <code>true</code>, add leading zeros to numbers, eg. <code>1h</code> vs <code>00000001h</code>\nGets the length of the instruction, 0-15 bytes. This is …\n(masm only): Add a <code>DS</code> segment override even if it’s not …\n(masm only): Show displacements in brackets\n(masm only): Show symbols in brackets\nGets the max value that can be passed to <code>try_set_position()</code>…\nGets the memory operand’s base register or <code>Register::None</code>…\nGets the size of the memory displacement in bytes. Valid …\nGets the memory operand’s displacement or the 32-bit …\nGets the memory operand’s displacement or the 64-bit …\nGets the memory operand’s index register or …\nGets the index register scale value, valid values are <code>*1</code>, …\nGets the effective segment register used to reference the …\nGets the size of the memory location that is referenced by …\nMemory size options\nOptions that control if the memory size (eg. <code>DWORD PTR</code>) is …\n<code>true</code> if merging-masking, <code>false</code> if zeroing-masking. Only …\nGets the mnemonic\nGets the mnemonic, see also <code>code()</code>\n<code>JNA</code>, <code>CMOVNA</code>, <code>SETNA</code>\n<code>JNAE</code>, <code>CMOVNAE</code>, <code>SETNAE</code>\n(nasm only): Shows <code>BYTE</code>, <code>WORD</code>, <code>DWORD</code> or <code>QWORD</code> if it’s a …\n<code>JNB</code>, <code>CMOVNB</code>, <code>SETNB</code>\n<code>JNBE</code>, <code>CMOVNBE</code>, <code>SETNBE</code>\n<code>JNC</code>, <code>CMOVNC</code>, <code>SETNC</code>\n<code>JNE</code>, <code>CMOVNE</code>, <code>SETNE</code>, <code>LOOPNE</code>, <code>REPNE</code>\nGets the operand’s branch target. Use this method if the …\nGets the operand’s branch target. Use this method if the …\nGets the operand’s branch target. Use this method if the …\nGets the near branch target if it’s a <code>CALL</code>/<code>JMP</code>/<code>Jcc</code> near …\nCreates a decoder\nCreates a gas (AT&amp;T) formatter\nCreates default formatter options\nConstructor\nConstructor\nConstructor\nCreates an empty <code>Instruction</code> (all fields are cleared). See …\nGets the 64-bit IP of the next instruction, see also <code>ip()</code>\nGets the 16-bit IP of the next instruction, see also <code>ip16()</code>\nGets the 32-bit IP of the next instruction, see also <code>ip32()</code>\n<code>JNG</code>, <code>CMOVNG</code>, <code>SETNG</code>\n<code>JNGE</code>, <code>CMOVNGE</code>, <code>SETNGE</code>\n<code>JNL</code>, <code>CMOVNL</code>, <code>SETNL</code>\n<code>JNLE</code>, <code>CMOVNLE</code>, <code>SETNLE</code>\n<code>JNP</code>, <code>CMOVNP</code>, <code>SETNP</code>\nNumber base\nNumber base\n<code>JNZ</code>, <code>CMOVNZ</code>, <code>SETNZ</code>, <code>LOOPNZ</code>, <code>REPNZ</code>\nSize of a digit group, see also <code>digit_separator()</code>\nOctal number prefix or an empty string\nOctal number suffix or an empty string\nGets operand #0’s kind if the operand exists (see …\nGets operand #0’s register value. Use this method if …\nGets operand #1’s kind if the operand exists (see …\nGets operand #1’s register value. Use this method if …\nGets operand #2’s kind if the operand exists (see …\nGets operand #2’s register value. Use this method if …\nGets operand #3’s kind if the operand exists (see …\nGets operand #3’s register value. Use this method if …\nGets operand #4’s kind if the operand exists (see …\nGets operand #4’s register value. Use this method if …\nGets the operand count. An instruction can have 0-5 …\nGets an operand’s kind if it exists (see <code>op_count()</code>)\nGets all op kinds (<code>op_count()</code> values)\nGets the opmask register (<code>Register::K1</code> - <code>Register::K7</code>) or …\nGets the operand’s register value. Use this method if …\nGets the number of operands that will be formatted. A …\nCalled by the formatter. The method can override any …\nGets the formatter options (immutable)\nGets the formatter options (mutable)\n<code>JP</code>, <code>CMOVP</code>, <code>SETP</code>\n<code>JPE</code>, <code>CMOVPE</code>, <code>SETPE</code>\n<code>JPO</code>, <code>CMOVPO</code>, <code>SETPO</code>\nGets the current data position. This value is always &lt;= …\nUse <code>st(0)</code> instead of <code>st</code> if <code>st</code> can be used. Ignored by the …\nNumber prefix or an empty string\nIf <code>true</code>, show <code>RIP</code> relative addresses as <code>[rip+12345678h]</code>, …\nShow <code>RIP+displ</code> or the virtual address\nGets the rounding control (SAE is implied but …\nShow memory operand scale value before the index register\nGets the segment override prefix or <code>Register::None</code> if …\nAdd a leading zero to hex numbers if there’s no prefix …\nAlways show the scale value even if it’s <code>*1</code>\nAlways show the effective segment register. If the option …\nSize of a digit group, see also <code>digit_separator()</code>\nBinary number prefix or an empty string\nBinary number prefix or an empty string\nBinary number suffix or an empty string\nBinary number suffix or an empty string\nAdd leading zeros to branch offsets. Used by <code>CALL NEAR</code>, …\nShow branch size (eg. <code>SHORT</code>, <code>NEAR PTR</code>)\nMnemonic condition code selector (eg. <code>JA</code> / <code>JNBE</code>)\nMnemonic condition code selector (eg. <code>JAE</code> / <code>JNB</code> / <code>JNC</code>)\nMnemonic condition code selector (eg. <code>JB</code> / <code>JC</code> / <code>JNAE</code>)\nMnemonic condition code selector (eg. <code>JBE</code> / <code>JNA</code>)\nMnemonic condition code selector (eg. <code>JE</code> / <code>JZ</code>)\nMnemonic condition code selector (eg. <code>JG</code> / <code>JNLE</code>)\nMnemonic condition code selector (eg. <code>JGE</code> / <code>JNL</code>)\nMnemonic condition code selector (eg. <code>JL</code> / <code>JNGE</code>)\nMnemonic condition code selector (eg. <code>JLE</code> / <code>JNG</code>)\nMnemonic condition code selector (eg. <code>JNE</code> / <code>JNZ</code>)\nMnemonic condition code selector (eg. <code>JNP</code> / <code>JPO</code>)\nMnemonic condition code selector (eg. <code>JP</code> / <code>JPE</code>)\nSets the instruction code\nSets the code size when the instruction was decoded. This …\nSize of a digit group, see also <code>digit_separator()</code>\nDecimal number prefix or an empty string\nDecimal number prefix or an empty string\nDecimal number suffix or an empty string\nDecimal number suffix or an empty string\nSets a new <code>db</code> value, see also <code>declare_data_len()</code>. Can only …\nSets a new <code>db</code> value, see also <code>declare_data_len()</code>. Can only …\nSets the number of elements in a <code>db</code>/<code>dw</code>/<code>dd</code>/<code>dq</code> directive. …\nSets a new <code>dd</code> value, see also <code>declare_data_len()</code>. Can only …\nSets a new <code>dd</code> value, see also <code>declare_data_len()</code>. Can only …\nSets a new <code>dq</code> value, see also <code>declare_data_len()</code>. Can only …\nSets a new <code>dq</code> value, see also <code>declare_data_len()</code>. Can only …\nSets a new <code>dw</code> value, see also <code>declare_data_len()</code>. Can only …\nSets a new <code>dw</code> value, see also <code>declare_data_len()</code>. Can only …\nDigit separator or an empty string. See also eg. …\nDigit separator or an empty string. See also eg. …\nAdd leading zeros to displacements\nSets the operand’s branch target. Use this method if the …\nSets the operand’s branch target. Use this method if the …\nSets the operand’s branch target selector. Use this …\nCharacter index (0-based) where the first operand is …\n(gas only): If <code>true</code>, the formatter doesn’t add <code>%</code> to …\n(gas only): Shows the mnemonic size suffix even when not …\n(gas only): Add a space after the comma if it’s a memory …\n<code>true</code> if the instruction has the <code>LOCK</code> prefix (<code>F0</code>)\n<code>true</code> if the instruction has the <code>REPE</code> or <code>REP</code> prefix (<code>F3</code>)\n<code>true</code> if the instruction has the <code>REPE</code> or <code>REP</code> prefix (<code>F3</code>)\n<code>true</code> if the instruction has the <code>REPNE</code> prefix (<code>F2</code>)\n<code>true</code> if the instruction has the <code>XACQUIRE</code> prefix (<code>F2</code>)\n<code>true</code> if the instruction has the <code>XRELEASE</code> prefix (<code>F3</code>)\nSize of a digit group, see also <code>digit_separator()</code>\nHex number prefix or an empty string, eg. <code>&quot;0x&quot;</code>\nHex number prefix or an empty string, eg. <code>&quot;0x&quot;</code>\nHex number suffix or an empty string, eg. <code>&quot;h&quot;</code>\nHex number suffix or an empty string, eg. <code>&quot;h&quot;</code>\nSets the operand’s immediate value. Use this method if …\nSets the operand’s immediate value. Use this method if …\nSets the operand’s immediate value. Use this method if …\nSets the operand’s immediate value. Use this method if …\nSets the operand’s immediate value. Use this method if …\nSets the operand’s immediate value. Use this method if …\nSets the operand’s immediate value. Use this method if …\nSets the operand’s immediate value. Use this method if …\nSets the operand’s immediate value. Use this method if …\nSets an operand’s immediate value\nSets an operand’s immediate value\nSets an operand’s immediate value\nSets an operand’s immediate value\nSets the current <code>IP</code>/<code>EIP</code>/<code>RIP</code> value, see also …\nSets the 64-bit IP of the instruction, see also …\nSets the 16-bit IP of the instruction, see also …\nSets the 32-bit IP of the instruction, see also …\nSets the is broadcast flag (EVEX instructions only)\nAdd leading zeros to hexadecimal/octal/binary numbers. …\nSets the length of the instruction, 0-15 bytes. This is …\n(masm only): Add a <code>DS</code> segment override even if it’s not …\n(masm only): Show displacements in brackets\n(masm only): Show symbols in brackets\nSets the memory operand’s base register or <code>Register::None</code>…\nSets the size of the memory displacement in bytes. Valid …\nGets the memory operand’s displacement or the 32-bit …\nGets the memory operand’s displacement or the 64-bit …\nSets the memory operand’s index register or …\nSets the index register scale value, valid values are <code>*1</code>, …\nMemory size options\nOptions that control if the memory size (eg. <code>DWORD PTR</code>) is …\n<code>true</code> if merging-masking, <code>false</code> if zeroing-masking. Only …\n(nasm only): Shows <code>BYTE</code>, <code>WORD</code>, <code>DWORD</code> or <code>QWORD</code> if it’s a …\nSets the operand’s branch target. Use this method if the …\nSets the operand’s branch target. Use this method if the …\nSets the operand’s branch target. Use this method if the …\nSets the 64-bit IP of the next instruction, see also …\nSets the 16-bit IP of the next instruction, see also …\nSets the 32-bit IP of the next instruction, see also …\nNumber base\nSize of a digit group, see also <code>digit_separator()</code>\nOctal number prefix or an empty string\nOctal number prefix or an empty string\nOctal number suffix or an empty string\nOctal number suffix or an empty string\nSets operand #0’s kind if the operand exists (see …\nSets operand #0’s register value. Use this method if …\nSets operand #1’s kind if the operand exists (see …\nSets operand #1’s register value. Use this method if …\nSets operand #2’s kind if the operand exists (see …\nSets operand #2’s register value. Use this method if …\nSets operand #3’s kind if the operand exists (see …\nSets operand #3’s register value. Use this method if …\nSets operand #4’s kind if the operand exists (see …\nSets operand #4’s register value. Use this method if …\nSets an operand’s kind\nSets the opmask register (<code>Register::K1</code> - <code>Register::K7</code>) or …\nSets the operand’s register value. Use this method if …\nSets the current data position, which is the index into …\nUse <code>st(0)</code> instead of <code>st</code> if <code>st</code> can be used. Ignored by the …\nIf <code>true</code>, show <code>RIP</code> relative addresses as <code>[rip+12345678h]</code>, …\nShow <code>RIP+displ</code> or the virtual address\nSets the rounding control (SAE is implied but …\nShow memory operand scale value before the index register\nSets the segment override prefix or <code>Register::None</code> if …\nShow <code>NEAR</code>, <code>SHORT</code>, etc if it’s a branch instruction\nShow the original value after the symbol name\nShow useless prefixes. If it has useless prefixes, it …\nShow zero displacements\nShow immediate operands as signed numbers\nDisplacements are signed numbers\nSmall hex numbers (-9 .. 9) are shown in decimal\nAdd a space between the memory expression and the brackets\nAdd a space after the operand separator\nAdd spaces between memory operand <code>+</code> and <code>-</code> operators\nAdd spaces between memory operand <code>*</code> operator\nSets the suppress all exceptions flag (EVEX/MVEX encoded …\nSize of a tab character or 0 to use spaces\nEverything is uppercased, except numbers and their …\nUppercase decorators, eg. <code>{z}</code>, <code>{sae}</code>, <code>{rd-sae}</code> (but not …\nUse uppercase hex digits\nKeywords are uppercased (eg. <code>BYTE PTR</code>, <code>SHORT</code>)\nMnemonics are uppercased\nPrefixes are uppercased\nRegisters are uppercased\nUse pseudo instructions\n<code>true</code> if zeroing-masking, <code>false</code> if merging-masking. Only …\nShow <code>NEAR</code>, <code>SHORT</code>, etc if it’s a branch instruction\nShow the original value after the symbol name\nShow useless prefixes. If it has useless prefixes, it …\nShow zero displacements\nShow immediate operands as signed numbers\nDisplacements are signed numbers\nIf <code>true</code>, the number is signed, and if <code>false</code> it’s an …\nSmall hex numbers (-9 .. 9) are shown in decimal\nSmall hex numbers (-9 .. 9) are shown in decimal\nAdd a space between the memory expression and the brackets\nAdd a space after the operand separator\nAdd spaces between memory operand <code>+</code> and <code>-</code> operators\nAdd spaces between memory operand <code>*</code> operator\nNumber suffix or an empty string\nGets the suppress all exceptions flag (EVEX/MVEX encoded …\nTries to resolve a symbol\nSymbol size or <code>None</code>\nSize of a tab character or 0 to use spaces\nText\nContains the symbol\nTries to get an operand’s immediate value. Can only be …\nCreates a decoder\nSets a new <code>db</code> value, see also <code>declare_data_len()</code>. Can only …\nCreates a decoder\nEverything is uppercased, except numbers and their …\nUppercase decorators, eg. <code>{z}</code>, <code>{sae}</code>, <code>{rd-sae}</code> (but not …\nUse uppercase hex digits\nUse uppercase hex digits\nKeywords are uppercased (eg. <code>BYTE PTR</code>, <code>SHORT</code>)\nMnemonics are uppercased\nPrefixes are uppercased\nRegisters are uppercased\nUse pseudo instructions\nIterates over all <code>Code</code> enum values\nIterates over all <code>DecoderError</code> enum values\nIterates over all <code>CodeSize</code> enum values\nIterates over all <code>RoundingControl</code> enum values\nIterates over all <code>OpKind</code> enum values\nIterates over all <code>EncodingKind</code> enum values\nIterates over all <code>TupleType</code> enum values\nIterates over all <code>NumberBase</code> enum values\nIterates over all <code>PrefixKind</code> enum values\nIterates over all <code>DecoratorKind</code> enum values\nIterates over all <code>NumberKind</code> enum values\nIterates over all <code>CC_b</code> enum values\nIterates over all <code>CC_ae</code> enum values\nIterates over all <code>CC_e</code> enum values\nIterates over all <code>CC_ne</code> enum values\nIterates over all <code>CC_be</code> enum values\nIterates over all <code>CC_a</code> enum values\nIterates over all <code>CC_p</code> enum values\nIterates over all <code>CC_np</code> enum values\nIterates over all <code>CC_l</code> enum values\nIterates over all <code>CC_ge</code> enum values\nIterates over all <code>CC_le</code> enum values\nIterates over all <code>CC_g</code> enum values\nIterates over all <code>FormatterTextKind</code> enum values\nIterates over all <code>MemorySizeOptions</code> enum values\nIterates over all <code>MemorySize</code> enum values\nIterates over all <code>Mnemonic</code> enum values\nIterates over all <code>Register</code> enum values\nGets the virtual address of a memory operand\nChecks if it’s a vsib instruction.\nCreates options used when formatting branch operands\nCreates options used when formatting displacements\nCreates default gas (AT&amp;T) formatter options\nCreates options used when formatting immediate values\nCreates a decoder\nCreates a gas (AT&amp;T) formatter\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nWrites text and text kind\nWrites a decorator\nWrites a decorator\nWrites a mnemonic (see <code>Instruction::mnemonic()</code>)\nWrites a mnemonic (see <code>Instruction::mnemonic()</code>)\nWrites a number\nWrites a number\nWrites a prefix\nWrites a prefix\nWrites a register\nWrites a register\nWrites a symbol\nWrites a symbol\n<code>JZ</code>, <code>CMOVZ</code>, <code>SETZ</code>, <code>LOOPZ</code>, <code>REPZ</code>\n<code>true</code> if zeroing-masking, <code>false</code> if merging-masking. Only …")