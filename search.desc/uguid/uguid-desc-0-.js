searchState.loadedDescShard("uguid", 0, "Library providing a GUID (Globally Unique Identifier) …\nGlobally-unique identifier.\nError type for <code>Guid::try_parse</code> and <code>Guid::from_str</code>.\nInput contains invalid ASCII hex at this byte index.\nInput has the wrong length, expected 36 bytes.\nReserved for future use.\nReserved, Microsoft Corporation backward compatibility.\nReserved, NCS backward compatibility.\nThe GUID variant described by RFC4122.\nInput is missing a separator (<code>-</code>) at this byte index.\nVariant or type of GUID, as defined in RFC4122.\nGUID with all fields set to zero.\nThe high field of the clock sequence multiplexed with the …\nThe low field of the clock sequence.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a GUID from a 16-byte array. No changes to byte …\nCreate a version 4 GUID from provided random bytes.\nParse a GUID from a string, panicking on failure.\nCreate a <code>Guid</code> from a string at compile time.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if all bits are zero, false otherwise.\nCreate a new GUID.\nThe spatially unique node identifier.\nParse a GUID from a string, panicking on failure.\nThe little-endian high field of the timestamp multiplexed …\nThe little-endian low field of the timestamp.\nThe little-endian middle field of the timestamp.\nConvert to a lower-case hex ASCII string.\nConvert to a 16-byte array.\nParse a GUID from a string.\nGet the GUID variant.\nGet the GUID version. This is a sub-type of the variant as …")