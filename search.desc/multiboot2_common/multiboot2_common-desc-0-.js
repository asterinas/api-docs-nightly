searchState.loadedDescShard("multiboot2_common", 0, "Common helpers for the <code>multiboot2</code> and <code>multiboot2-header</code> …\nThe alignment of all Multiboot2 data structures.\nThe true base size of the struct without any implicit or …\nWraps a byte slice representing a Multiboot2 structure …\nAn C ABI-compatible dynamically sized type with a common …\nA sized header type for <code>DynSizedStructure</code>.\nThe associated <code>Header</code> of this tag.\nThe ID of this tag. This should be unique across all …\nThe ID type that identifies the tag.\nThe size-property has an illegal value that can’t be …\nA trait to abstract sized and unsized structures (DSTs). …\nErrors that may occur when working with memory.\nThe buffer misses the terminating padding to the next …\nThe memory points to null.\nThe memory must cover at least the length of the sized …\nExtension of <code>MaybeDynSized</code> for Tags.\nIterates over the tags (modelled by <code>DynSizedStructure</code>) of …\nThe memory must be at least <code>ALIGNMENT</code>-aligned.\nReturns the whole allocated bytes for this structure …\nReturns the whole allocated bytes for this structure …\nReturns a pointer to this structure.\nReturns a pointer to this structure.\nPerforms a memory-safe same-size cast from the …\nClones a <code>MaybeDynSized</code> by calling <code>new_boxed</code>.\nReturns the amount of items in the dynamically sized …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the corresponding <code>Header</code>.\nReturns the corresponding <code>Header</code>.\nReturns the underlying <code>Header</code>.\nIncreases the given size to the next alignment boundary, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new iterator.\nCreates a new tag implementing <code>MaybeDynSized</code> on the heap.\nReturns the payload, i.e., all memory that is not occupied …\nReturns the payload, i.e., all memory that is not occupied …\nReturns the underlying payload.\nReturns the length of the payload, i.e., the bytes that …\nCreates a new fat-pointer backed reference to a …\nCreates a new fat-pointer backed reference to a …\nCreates a new fat-pointer backed reference to a …\nUpdates the header with the given <code>total_size</code>.\nVarious test utilities.\nReturns the total size of the struct, thus the size of the …\nHelper to 8-byte align the underlying bytes, as mandated …\nDummy test header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new type.")