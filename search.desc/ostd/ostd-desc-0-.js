searchState.loadedDescShard("ostd", 0, "The standard library for Asterinas and other Rust OSes.\nAccess to a resource is denied.\nThe error type which is returned from the APIs of this …\nInvalid arguments provided.\nInput/output error.\nInsufficient memory available.\nInsufficient system resources.\nArithmetic Overflow occurred.\nPage fault occurred.\nA marker trait for plain old data (POD).\nDeriving <code>Pod</code> trait for a struct or union.\nPlatform-specific code for the x86 platform.\nAs a slice of bytes.\nAs a mutable slice of bytes.\nThe architecture-independent boot module, which provides\nBus probe error\nConsole output.\nAsserts that a boolean expression is <code>true</code> at compile-time.\nCPU-related definitions.\nDefines a statically-allocated CPU-local variable.\nDefines an inner-mutable CPU-local variable.\nPrints to the console.\nPrints to the console with a newline.\nReturns the argument unchanged.\nCreates a new instance from the given bytes.\nA macro attribute for the global frame allocator.\nA macro attribute to register the global heap allocator.\nA macro attribute to map allocation layouts to slot sizes …\nInserts a TDX-specific code block.\nMakes a structure usable as a frame metadata.\nMakes a structure usable as untyped frame metadata.\nCalls <code>U::from(self)</code>.\nDevice I/O access and corresponding allocator.\nHandling of Interrupt ReQuests (IRQs).\nLogger injection.\nA macro attribute to mark the kernel entry point.\nVirtual memory (VM).\nCreates a new instance of Pod type with uninitialized …\nCreates a new instance of Pod type that is filled with …\nPanic support.\nA macro attribute for the panic handler.\nThe prelude.\nCreates a pointer whose type matches the expression, but …\nSymmetric Multi-Processing (SMP) support.\nUseful synchronization primitives.\nTasks are the unit of code execution.\nThe timer support.\nUser mode.\nUtility types and methods.\nCPU context &amp; state control and CPU local memory.\nDevice-related APIs. This module mainly contains the APIs …\nInserts a TDX-specific code block.\nInterrupts.\nProvides the ability to exit QEMU and return a value as …\nReads a hardware generated 64-bit random value.\nReads the current value of the processor’s time-stamp …\nHandles trap.\nReturns the frequency of TSC. The unit is Hz.\nCPU execution context control.\nCPU information from the CPUID instruction.\nx86 ISA extensions.\nArchitecture dependent CPU-local information utilities.\nSome severe unrecoverable error\n17 – #AC  Alignment check.\n5 – #BR  Bound-range exceeded.\n3 – #BP  Breakpoint (INT3).\n21 – #CP  Control protection exception (CET).\n9 – Coprocessor segment overrun (reserved on modern …\nArchitectural CPU exceptions (x86-64 vectors 0-31).\nAs Osdev Wiki defines(https://wiki.osdev.org/Exceptions): …\n1 – #DB  Debug.\n7 – #NM  Device not available (FPU/MMX/SSE disabled).\n0 – #DE  Divide-by-zero error.\n8 – #DF  Double fault (always pushes an error code of 0).\nCPU faults. Faults can be corrected, and the program may …\nFaults or traps\nThe FPU context of user task.\n13 – #GP  General protection fault\nGeneral registers.\n1 if there is no translation for the linear address using …\n28 – #HV  Hypervisor injection exception.\n1 if the access was an instruction fetch.\nCPU interrupts\n6 – #UD  Invalid or undefined opcode.\n10 – #TS  Invalid TSS.\n18 – #MC  Machine check.\n2 – NMI  Non-maskable interrupt.\n4 – #OF  Overflow.\n0 if no translation for the linear address.\n1 if the access was a data access to a linear address with …\n14 – #PF  Page fault.\nPage Fault error code. Following the Intel Architectures …\n1 if there is no translation for the linear address …\nArchitecture-specific data reported with a page-fault …\nCatch-all for reserved or undefined vector numbers.\nReserved for future use\n1 if the exception is unrelated to paging and resulted …\n1 if the access was a shadow-stack access.\n19 – #XM / #XF  SIMD/FPU floating-point exception.\n30 – #SX  Security exception.\n11 – #NP  Segment not present.\nSelector error code.\n12 – #SS  Stack-segment fault.\nCPU traps. Traps are reported immediately after the …\n1 if the access was a user-mode access.\nUserspace CPU context, including general-purpose registers …\n29 – #VC  VMM communication exception (SEV-ES GHCB).\n20 – #VE  Virtualization exception.\n1 if the access was a write.\n16 – #MF  x87 floating-point exception.\nActivates the thread-local storage pointer for the current …\nThe linear (virtual) address that triggered the fault …\nReturns the set containing all flags.\nReturns the FPU context as a byte slice.\nReturns the FPU context as a mutable byte slice.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nThe error code pushed by the CPU for this page fault.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nGets the value of fsbase\nReturns a reference to the general registers.\nReturns a mutable reference to the general registers\nGets the value of gsbase\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns whether this exception type is a fault or a trap.\nLoads CPU’s FPU context from this instance.\nCreates a new FPU context.\nReturns the complement of this set of flags.\nGets the value of r10\nGets the value of r11\nGets the value of r12\nGets the value of r13\nGets the value of r14\nGets the value of r15\nGets the value of r8\nGets the value of r9\nGets the value of rax\nGets the value of rbp\nGets the value of rbx\nGets the value of rcx\nGets the value of rdi\nGets the value of rdx\nRemoves the specified flags in-place.\nGets the value of rflags\nGets the value of rip\nGets the value of rsi\nGets the value of rsp\nSaves CPU’s current FPU context to this instance.\nInserts or removes the specified flags depending on the …\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the thread-local storage pointer.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nTakes the CPU exception out.\nGets the thread-local storage pointer.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nExecutes the CPUID instruction for the given leaf and …\nThe processor supports the AVX instruction extensions.\nSupports the AVX512F instruction extensions.\nSupports RDFSBASE/RDGSBASE/WRFSBASE/WRGSBASE.\nx86 ISA extensions.\nThe processor supports RDRAND instruction.\nThe processor’s local APIC timer supports one-shot …\nThe processor supports x2APIC feature.\nAPIC On-Chip.\nThe processor supports the XSAVE/XRSTOR processor extended …\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nChecks if the specified set of ISA extensions are …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nProvides CMOS I/O port access.\nI/O port access.\nA port-mapped UART. Copied from uart_16550.\nCMOS address I/O port\nCMOS data I/O port\nGets the century register location. This function is used …\nA marker trait for access types which allow reading port …\nA marker trait for access types which allow writing port …\nA helper trait that implements the read port operation.\nA helper trait that implements the write port operation.\nAn access marker type indicating that a port is only …\nAn access marker type indicating that a port is allowed to …\nAn access marker type indicating that a port is only …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads a <code>Self</code> value from the given port.\nWrites a <code>Self</code> value to the given port.\nA serial port.\nReturns the argument unchanged.\nInitializes the serial port.\nCalls <code>U::from(self)</code>.\nGets line status\nCreates a serial port.\nReceives data from the data port\nSends data to the data port\nThe <code>IrqChip</code> singleton.\nAn IRQ chip.\nAn <code>IrqLine</code> mapped to an IRQ pin managed by an <code>IrqChip</code>.\nCounts the number of I/O APICs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps an IRQ pin specified by a GSI number to an IRQ line.\nMaps an IRQ pin specified by an ISA interrupt number to an …\nThe code that indicates a failed exit.\nThe exit code of x86 QEMU isa debug device.\nThe code that indicates a successful exit.\nExits QEMU with the given exit code.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrap frame of kernel interrupt\nReturns the argument unchanged.\nInjects a custom handler for page faults that occur in the …\nCalls <code>U::from(self)</code>.\nThe boot information provided by the bootloader.\nACPI information from the bootloader.\nThe framebuffer arguments.\nThe bootloader does not provide one, a manual search is …\nPhysical address of the RSDP.\nAddress of RSDT provided in RSDP v1.\nAddress of XSDT provided in RSDP v2+.\nThe address of the buffer.\nGets the boot information.\nThe name of the bootloader.\nBits per pixel of the buffer.\nThe framebuffer arguments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height of the buffer.\nThe initial ramfs raw bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kernel command line arguments.\nInformation of memory regions in the boot phase.\nThe memory regions provided by the bootloader.\nSymmetric multiprocessing (SMP) boot support.\nThe width of the buffer.\nMaybe points to an unplugged DIMM module. It’s bad …\nThe memory region provided as the framebuffer.\nThe place where kernel sections are loaded.\nThe maximum number of regions that can be handled.\nThe information of initial memory regions that are needed …\nA heapless set of memory regions.\nThe type of initial memory regions that are needed for the …\nThe place where kernel modules (e.g. initrd) are loaded, …\nIn ACPI spec, this area needs to be preserved when …\nOnce used in the boot phase. Kernel can reclaim it after …\nReserved by BIOS or bootloader, do not use.\nSome holes not specified by the bootloader/firmware. It …\nDirectly usable by the frame allocator.\nConstructs a bad memory region.\nThe physical address of the base of the region.\nThe physical address of the end of the region.\nConstructs a framebuffer memory region.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSorts the regions and returns a full set of …\nChecks whether the region is empty\nConstructs a memory region where kernel sections are …\nThe length in bytes of the region.\nConstructs a module memory region from a byte slice that …\nConstructs an empty set.\nConstructs a valid memory region.\nAppends a region to the set.\nThe type of the region.\nRegisters the entry function for the application processor.\nAn error that occurs during bus probing.\nAn error in accessing the configuration space of the …\nThe device does not match the expected criteria.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrints formatted arguments to the console.\nA set of CPU IDs, with support for concurrent access.\nThe ID of a CPU in the system.\nThe error type returned when converting an out-of-range …\nA set of CPU IDs.\nKernel mode.\nA marker trait for guard types that can “pin” the …\nThe CPU privilege level: user mode or kernel mode.\nUser mode.\nReturns an iterator over all CPUs.\nReturns the CPU ID of the bootstrap processor (BSP).\nReturns the ID of the current CPU.\nReturns the ID of the current CPU.\nReturns the ID of the current CPU.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCPU local storage.\nCreates a new instance.\nReturns the number of CPUs.\nA trait to abstract any type that can be used as a slot …\nA CPU-local variable for type <code>T</code>, backed by a storage of …\nInner mutable CPU-local objects.\nA guard for accessing the CPU-local object.\nManages dynamically-allocated CPU-local chunks.\nDynamically-allocated CPU-local objects.\nStatically-allocated CPU-local objects.\nAdds a value to the per-CPU object in a single instruction.\nAllocates a CPU-local object from the chunk, and …\nGets access to the underlying value through a raw pointer.\nBitwise ANDs a value to the per-CPU object in a single …\nBitwise ORs a value to the per-CPU object in a single …\nBitwise XORs a value to the per-CPU object in a single …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the <code>mut</code> pointer for the object on a target CPU.\nGets access to the CPU-local value on a specific CPU.\nGets the <code>const</code> pointer for the object on the current CPU.\nGets the <code>const</code> pointer for the object on a target CPU.\nGets access to the underlying value on the current CPU …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the chunk is empty.\nChecks whether the chunk is full.\nGets the value of the per-CPU object in a single …\nCreates a new dynamically-allocated CPU-local chunk.\nWrites a value to the per-CPU object in a single …\nSubtracts a value to the per-CPU object in a single …\nAttempts to deallocate a previously allocated CPU-local …\nI/O memory.\nAn I/O port, representing a specific address in the I/O …\nAcquires an <code>IoMem</code> instance for the given range.\nAcquires an <code>IoPort</code> instance for the given range.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an I/O port.\nReturns the port number.\nReads from the I/O port\nReturns the size of the I/O port.\nSlices the <code>IoMem</code>, returning another <code>IoMem</code> representing the …\nWrites to the I/O port\nA guard for disabled local IRQs.\nThe current interrupt level on a CPU.\nA type alias for the IRQ callback function.\nAn Interrupt ReQuest (IRQ) line.\nLevel 0 (the task context).\nLevel 1 (the interrupt context).\nLevel 2 (the interrupt context due to nested interrupts).\nAllocates an available IRQ line.\nAllocates a specific IRQ line.\nReturns the interrupt level as an integer between 0 and 2 …\nReturns the current interrupt level of this CPU.\nDisables all IRQs on the current CPU (i.e., locally).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are no registered callbacks.\nChecks if the CPU is currently in the interrupt context …\nChecks if the CPU is currently in the task context (level …\nGets the IRQ number.\nRegisters a callback that will be invoked when the IRQ is …\nRegisters a bottom half callback to be executed at …\nRegisters a bottom half callback to be executed at …\nGets the remapping index of the IRQ line.\nInjects a logger.\nHas the memory page been read or written.\nThe second bit available for software use.\nData flows both from and to the device\nA type to control the cacheability of the main memory.\nHas the memory page been written.\nDevice addresses.\nA coherent (or consistent) DMA mapping, which guarantees …\n<code>DmaDirection</code> limits the data flow direction of <code>DmaStream</code> …\nA streaming DMA mapping.\nData flows from the device\nMemory objects that have a mapped address in the device …\nMemory objects that have a start physical address.\nMemory objects that have a physical address range.\nMemory objects that have a length in bytes.\nThe kernel address space.\nThe maximum virtual address of user space (non inclusive).\nThe page size\nPhysical addresses.\nPage protection permissions and access status.\nThe property of a mapped virtual memory page.\nThe level of a page table node or a frame.\nReadable.\nReadable + writable.\nReadable + writable + executable.\nReadable + executable.\nData flows to the device\nUncacheable (UC).\nVirtual addresses.\nWritable.\nWrite-Combining (WC).\nWrite-Protect (WP).\nWriteback (WB).\nWritethrough (WT).\nExecutable.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nThe cache policy for the page.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the base address of the mapping in the device …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the DMA direction.\nReturns an empty set of flags.\nReturns the end physical address of the memory object.\nThe flags associated with the page,\nFrame (physical memory page) management.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nManages the kernel heap using slab or buddy allocation …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAbstractions for reading and writing virtual memory (VM) …\nUtilities for types in <code>super::io</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nChecks if the given address is page-aligned.\nCreates a coherent DMA mapping backed by <code>segment</code>.\nEstablishes DMA stream mapping for a given <code>USegment</code>.\nCreates a page property that implies an invalid page …\nCreates a new <code>PageProperty</code> with the given flags and cache …\nReturns the complement of this set of flags.\nReturns the start physical address of the memory object.\nReturns the physical address range of the memory object.\nRemoves the specified flags in-place.\nGets the underlying <code>USegment</code>.\nInserts or removes the specified flags depending on the …\nReturns the size of the memory object in bytes.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nSynchronizes the streaming DMA mapping with the device.\nTLB flush operations.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nVirtual memory space management.\nA smart pointer to a frame.\nA struct that can work as <code>&amp;&#39;a Frame&lt;M&gt;</code>.\nThe physical memory allocator.\nBorrows a reference from the given frame.\nGets the dyncamically-typed metadata of this frame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a dynamically typed <code>Frame</code> from a raw, in-use page.\nGets a <code>Frame</code> with a specific usage from a raw, unused page.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnabling linked lists of frames without heap allocation.\nGets the map level of this page.\nMetadata management of frames.\nGets the metadata of this page.\nGets the reference count of the frame.\nA contiguous range of frames.\nTries converting a <code>Frame&lt;dyn AnyFrameMeta&gt;</code> into the …\nThe unique frame pointer that is not shared with others.\nUntyped physical memory management.\nOptions for allocating physical memory frames.\nThe trait for the global frame allocator.\nAdds a contiguous range of frames to the allocator.\nAllocates a contiguous range of frames.\nAllocates a single untyped frame without metadata.\nAllocates a single frame with additional metadata.\nAllocates a contiguous range of untyped frames without …\nAllocates a contiguous range of frames with additional …\nDeallocates a contiguous range of frames.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates new options for allocating the specified number of …\nSets whether the allocated frames should be initialized …\nA cursor that can mutate the linked list links.\nThe metadata of linked list frames.\nA linked list of frames.\nProvides a reference to the linked list.\nTells if a frame is in the list.\nGets the mutable reference to the current frame’s …\nGets a cursor at the back that can mutate the linked list …\nGets a cursor at the front that can mutate the linked list …\nGets a cursor at the specified frame if the frame is in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts a frame before the current frame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTells if the linked list is empty.\nMoves the cursor to the next frame towards the back.\nMoves the cursor to the previous frame towards the front.\nCreates a new linked list.\nCreates a new linked list metadata.\nPops a frame from the back of the linked list.\nPops a frame from the front of the linked list.\nPushes a frame to the back of the linked list.\nPushes a frame to the front of the linked list.\nGets the number of frames in the linked list.\nTakes the current pointing frame out of the linked list.\nAll frame metadata types must implement this trait.\nThe frame is being initialized or destructed.\nThe maximum alignment in bytes of the metadata of a frame.\nThe maximum number of bytes of the metadata of a frame.\nThe error type for getting the frame from a physical …\nThe frame is in use.\nThe metadata of physical pages that contains the kernel …\nThe metadata of frames that holds metadata of frames.\nThe provided physical address is not aligned.\nThe provided physical address is out of bound.\nReserved memory metadata. Maybe later used as I/O memory.\nThe frame is private to an owner of <code>UniqueFrame</code>.\nUnusable memory metadata. Cannot be used for any purposes.\nThe frame is not in use.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMakes a structure usable as a frame metadata.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the metadata’s associated frame is untyped.\nCalled when the last handle to the frame is dropped.\nA contiguous range of homogeneous physical memory frames.\nA contiguous range of homogeneous untyped physical memory …\nReturns the argument unchanged.\nCreates a new <code>Segment</code> from unused frames.\nCalls <code>U::from(self)</code>.\nGets an extra handle to the frames in the byte offset …\nSplits the frames into two at the given byte offset from …\nTry converting a <code>Segment&lt;dyn AnyFrameMeta&gt;</code> into <code>USegment</code>.\nAn owning frame pointer.\nDeallocates a slot to the slab.\nGets the dyncamically-typed metadata of this frame.\nGets the dyncamically-typed metadata of this frame.\nReturns the argument unchanged.\nGets a <code>UniqueFrame</code> with a specific usage from a raw, …\nCalls <code>U::from(self)</code>.\nGets the paging level of this page.\nGets the metadata of this page.\nGets the mutable metadata of this page.\nAllocates a new slab of the given size.\nRepurposes the frame with a new metadata.\nResets the frame to unused without up-calling the …\nTries to get a unique frame from a shared frame.\nThe metadata of untyped frame.\nA smart pointer to an untyped frame with any metadata.\nTries converting a <code>Frame&lt;dyn AnyFrameMeta&gt;</code> into <code>UFrame</code>.\nThe trait for the global heap allocator.\nA slot that will become or has been turned from a heap …\nThe slot is from a <code>Segment</code>.\nA slab.\nFrame metadata of a slab.\nThe slot is from a <code>super::Slab</code>.\nA singly-linked list of <code>HeapSlot</code>s from <code>super::Slab</code>s.\nThe type and size of the heap slot that should be used for …\nAllocates a <code>HeapSlot</code> according to the layout.\nAllocates a slot from the slab.\nAllocates a large slot.\nGets the pointer to the slot.\nGets the capacity of the slab (regardless of the number of …\nDeallocates a <code>HeapSlot</code>.\nDeallocates a slot to the slab.\nDeallocates a large slot.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the type and size of the slot.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllocates a new slab of the given size.\nCreates a new empty list.\nGets the number of allocated slots.\nGets the physical address of the slot.\nPops a slot from the front of the list.\nPushes a slot to the front of the list.\nGets the size of the slot.\nGets the size of the slot.\nA marker type used for <code>VmReader</code> and <code>VmWriter</code>, representing …\nFallible memory read from a <code>VmWriter</code>.\nFallible memory write from a <code>VmReader</code>.\nA marker type used for <code>VmReader</code> and <code>VmWriter</code>, representing …\nA marker trait for POD types that can be read or written …\nA marker trait for POD types that can be read or written …\nA trait that enables reading/writing data from/to a VM …\nA trait that enables filling bytes (e.g., filling zeros) …\nA trait that enables reading/writing data from/to a VM …\n<code>VmReader</code> is a reader for reading data from a contiguous …\n<code>VmWriter</code> is a writer for writing data to a contiguous …\nAtomically compares and exchanges a <code>PodAtomic</code> value.\nAtomically loads a <code>PodAtomic</code> value.\nReturns the number of bytes for the available space.\nReturns the cursor pointer, which refers to the address of …\nReturns the cursor pointer, which refers to the address of …\nWrites <code>len</code> zeros at a specified offset.\nWrites <code>len</code> zeros to the target memory.\nWrites <code>len</code> zeros to the target memory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>VmReader</code> from a pointer and a length, which …\nConstructs a <code>VmWriter</code> from a pointer and a length, which …\nConstructs a <code>VmReader</code> from a pointer and a length, which …\nConstructs a <code>VmWriter</code> from a pointer and a length, which …\nReturns if it has available space to write.\nReturns if it has remaining data to read.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLimits the length of remaining data.\nLimits the length of available space.\nReads requested data at a specified offset into a given …\nReads all data into the writer until one of the two …\nReads a specified number of bytes at a specified offset …\nReads all data into the writer until one of the three …\nReads a value of the <code>PodOnce</code> type at the specified offset …\nReads a value of the <code>PodOnce</code> type using one non-tearing …\nReads a slice of a specified type at a specified offset.\nReads a value of a specified type at a specified offset.\nReads a value of <code>Pod</code> type.\nReads a value of <code>Pod</code> type.\nReturns the number of bytes for the remaining data.\nSkips the first <code>nbytes</code> bytes of data. The length of …\nSkips the first <code>nbytes</code> bytes of data. The length of …\nConverts to a fallible reader.\nConverts to a fallible writer.\nWrites all data from a given <code>VmReader</code> at a specified …\nWrites all data from the reader until one of the two …\nWrites a specified number of bytes from a given buffer at …\nWrites all data from the reader until one of the three …\nWrites a value of the <code>PodOnce</code> type at the specified offset …\nWrites a value of the <code>PodOnce</code> type using one non-tearing …\nWrites a slice of a specified type at a specified offset.\nWrites a value of a specified type at a specified offset.\nWrites a value of <code>Pod</code> type.\nWrites a value of <code>Pod</code> type.\nA helper trait that denotes types that can provide <code>VmReader</code>…\nThe return type of <code>HasVmReaderWriter::reader</code>.\nA marker type that denotes the return types of <code>Self::reader</code>…\nA marker type that denotes reader and writer identities as …\nA marker type that denotes reader and writer results as …\nA marker trait that denotes the return types for …\nThe return type of <code>HasVmReaderWriter::writer</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reader to read data from it.\nConverts <code>Self::Reader</code> to <code>Result&lt;VmReader&lt;Infallible&gt;&gt;</code>.\nConverts <code>Self::Writer</code> to <code>Result&lt;VmWriter&lt;Infallible&gt;&gt;</code>.\nReturns a writer to write data to it.\nThe operation to flush TLB entries.\nA TLB flusher that is aware of which CPUs are needed to be …\nDispatches all the pending TLB flush requests.\nCreates a new TLB flush operation that flushes all TLB …\nCreates a new TLB flush operation that flushes the TLB …\nCreates a new TLB flush operation that flushes the TLB …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIssues a pending TLB flush request.\nIssues a TLB flush request that must happen before …\nCreates a new TLB flusher with the specified CPUs to be …\nPerforms the TLB flush operation on the current CPU.\nWaits for all the previous TLB flush requests to be …\nThe cursor for querying over the VM space without …\nThe cursor for modifying the mappings in VM space.\nThe current slot is mapped, the frame within is allocated …\nThe current slot is mapped, the frame within is allocated …\nThe result of a query over the VM space.\nA virtual address space for user-mode tasks, enabling safe …\nActivates the page table on the current CPU.\nGets an immutable cursor in the virtual address range.\nGets an mutable cursor in the virtual address range.\nFinds an <code>IoMem</code> that was previously mapped to by …\nMoves the cursor forward to the next mapped virtual …\nMoves the cursor forward to the next mapped virtual …\nGet the dedicated TLB flusher for this cursor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJump to the virtual address.\nJump to the virtual address.\nMaps a frame into the current slot.\nMaps a range of <code>IoMem</code> into the current slot.\nCreates a new VM address space.\nReturns the page property of the mapped item.\nApplies the operation to the next slot of mapping within …\nQueries the mapping at the current virtual address.\nQueries the mapping at the current virtual address.\nCreates a reader to read data from the user space of the …\nCreates a reader/writer pair to read data from and write …\nClears the mapping starting from the current slot, and …\nGet the virtual address of the current slot.\nGet the virtual address of the current slot.\nCreates a writer to write data into the user space.\nThe mapped frame.\nThe physical address of the corresponding I/O memory.\nThe property of the slot.\nThe property of the slot.\nThe default panic handler for OSTD based kernels.\nAborts the QEMU\nPrints the stack trace of the current thread to the …\nContains the error value\nContains the success value\nA specialized <code>Result</code> type for this crate.\nPrints to the console.\nPrints to the console with a newline.\nExecutes a function on other processors.\nAn guard that provides exclusive access to the data …\nA guard that provides shared read access to the data …\nA upgradable guard that provides read access to the data …\nA guard that provides exclusive write access to the data …\nA guard that provides shared read access to the data …\nA upgradable guard that provides read access to the data …\nA guard that provides exclusive write access to the data …\nA guard that provides exclusive access to the data …\nThe guard type for holding a spin lock or a spin-based …\nThe Guard can be transferred atomically.\nA guardian that disables IRQs while holding a lock.\nA mutex with waitqueue.\nA guard that provides exclusive access to the data …\nA guardian that disables preemption while holding a lock.\nA Read-Copy Update (RCU) cell for sharing a pointer …\nA wrapper to delay calling destructor of <code>T</code> after the RCU …\nA Read-Copy Update (RCU) cell for sharing a <em>nullable</em> …\nA guard that allows access to the pointed data protected …\nA guard that allows access to the pointed data protected …\nThe guard type for holding a spin-based read lock.\nA reference-counting pointer with read-only capabilities.\nA reference-counting pointer with read-write capabilities.\nSpin-based Read-write Lock\nA guard that provides shared read access to the data …\nA upgradable guard that provides read access to the data …\nA guard that provides exclusive write access to the data …\nA mutex that provides data access to either one writer or …\nA guard that provides shared read access to the data …\nA upgradable guard that provides read access to the data …\nA guard that provides exclusive write access to the data …\nA guardian that denotes the guard behavior for holding a …\nA spin lock.\nA guard that provides exclusive access to the data …\nA wait queue.\nA waiter that can put the current thread to sleep until it …\nA waker that can wake up the associated <code>Waiter</code>.\nA guardian that disables IRQs while holding a write lock.\nClones a <code>RoArc</code> that points to the same allocation.\nTries to replace the already read pointer with a new …\nTries to replace the already read pointer with a new …\nConverts the guard behavior from disabling preemption to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an immutable reference if no other <code>RwArc</code> points to …\nGets the reference of the protected data.\nGets the reference of the protected data.\nReturns the contained value by cloning it.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nCreates a new guard.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the RCU primitive protects nothing when …\nAcquires the mutex.\nAcquires the spin lock.\nAcquires the mutex through an <code>Arc</code>.\nAcquires the spin lock through an <code>Arc</code>.\nCreates a new mutex.\nCreates a new RCU primitive with the given pointer.\nCreates a new RCU primitive with the given pointer.\nCreates a new <code>RwArc&lt;T&gt;</code>.\nCreates a new spin-based read-write lock with an initial …\nCreates a new read-write mutex with an initial value.\nCreates a new spin lock.\nCreates a new, empty wait queue.\nCreates a new <code>RcuDrop</code> instance that delays the dropping of …\nCreates a new RCU primitive that contains nothing.\nCreates a waiter and its associated <code>Waker</code>.\nThis module provides a trait and some auxiliary types to …\nRetrieves a read guard for the RCU primitive.\nRetrieves a read guard for the RCU primitive.\nAcquires the read lock for immutable access.\nAcquires the read lock for immutable access.\nAcquires a read lock and spin-wait until it can be …\nAcquires a read mutex and sleep until it can be acquired.\nAcquires a read lock through an <code>Arc</code>.\nCreates a new read guard.\nReads the RCU-protected value in an atomic mode.\nReads the RCU-protected value in an atomic mode.\nReturns the task that the associated waker will attempt to …\nAtomically transfers the current guard to a new instance.\nTries Acquire the mutex immedidately.\nTries acquiring the spin lock immedidately.\nTries acquire the mutex through an <code>Arc</code>.\nAttempts to acquire a read lock.\nAttempts to acquire a read mutex.\nAttempts to acquire an read lock through an <code>Arc</code>.\nAttempts to acquire an upread lock.\nAttempts to acquire a upread mutex.\nAttempts to acquire an upgradeable read lock through an <code>Arc</code>…\nAttempts to acquire a write lock.\nAttempts to acquire a write mutex.\nReplaces the current pointer with a null pointer.\nReplaces the current pointer with a null pointer.\nAcquires an upreader and spin-wait until it can be …\nAcquires a upread mutex and sleep until it can be acquired.\nAcquires an upgradeable read lock through an <code>Arc</code>.\nWaits until the waiter is woken up by calling …\nWaits until some condition is met.\nWaits until some condition is met or the cancel condition …\nWakes up all waiting threads, returning the number of …\nWakes up one waiting thread, if there is one at the point …\nWakes up the associated <code>Waiter</code>.\nGets the associated <code>Waker</code> of the current waiter.\nAcquires the write lock for mutable access.\nAcquires a write lock and spin-wait until it can be …\nAcquires a write mutex and sleep until it can be acquired.\nAcquires a write lock through an <code>Arc</code>.\nThe power of two of the pointer alignment.\nA type that represents <code>&amp;&#39;a Arc&lt;T&gt;</code>.\nA type that represents <code>&amp;&#39;a Box&lt;T&gt;</code>.\nA trait that abstracts non-null pointers.\nA type that behaves just like a shared reference to the …\nThe target type that this pointer refers to.\nA type that represents <code>&amp;&#39;a Weak&lt;T&gt;</code>.\nDereferences <code>self</code> to get a reference to <code>T</code> with the …\nDereferences <code>self</code> to get a reference to <code>T</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts back from a raw pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts to a raw pointer.\nObtains a shared reference to the original pointer.\nConverts a shared reference to a raw pointer.\nThe current task.\nA guard for disable preempt.\nA task that executes a function to the end.\nOptions to create or spawn a new task.\nAtomic Mode\nBuilds a new task without running it immediately.\nReturns a cloned <code>Arc&lt;Task&gt;</code>.\nGets the current task.\nSets the data associated with the task.\nReturns the task data.\nDisables preemption.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the function that represents the entry point of the …\nHalts the CPU until interrupts if no preemption is …\nInjects a handler to be executed after scheduling.\nInjects a handler to be executed before scheduling.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the local data associated with the task.\nReturns the local data of the current task.\nCreates a set of options for a task.\nKicks the task scheduler to run the task.\nGet the attached scheduling information.\nTask scheduling.\nBuilds a new task and runs it immediately.\nYields execution so that another task may be scheduled.\nAbstracts any type from which one can obtain a reference …\nA marker trait for guard types that enforce the atomic …\nReturns a guard for the atomic mode.\nMarks a function as one that might sleep.\nPossible triggers of an <code>enqueue</code> action.\nTask exiting.\nA per-CPU, local runqueue.\nA SMP-aware task scheduler.\nSpawn a new task.\nTimer interrupt.\nPossible triggers of an <code>update_current</code> action.\nTask waiting.\nWake a sleeping task.\nTask yielding.\nGets the current runnable task.\nRemoves the current runnable task from runqueue.\nEnables preemptive scheduling on the current CPU.\nEnqueues a runnable task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nScheduling related information in a task.\nInjects a custom implementation of task scheduler into …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets an immutable access to the local runqueue of the …\nGets a mutable access to the local runqueue of the current …\nPicks the next runnable task.\nTries to pick the next runnable task.\nUpdates the current runnable task’s scheduling …\nAn atomic CPUID container.\nTrait for fetching common scheduling information.\nFields of a task that OSTD will never touch.\nGets the CPU that the task is running on or lately ran on.\nThe CPU that the task would like to be running on.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the inner value of an <code>AtomicCpuId</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the inner value of an <code>AtomicCpuId</code> anyway.\nSets the inner value of an <code>AtomicCpuId</code> if it’s empty.\nSets the inner value of an <code>AtomicCpuId</code> to <code>AtomicCpuId::NONE</code>…\nJiffies is a term used to denote the units of time …\nThe maximum value of <code>Jiffies</code>.\nThe timer frequency in Hz.\nAdds the given number of jiffies, saturating at …\nGets the <code>Duration</code> calculated from the jiffies counts.\nGets the number of jiffies.\nReturns the elapsed time since the system boots up.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance.\nRegisters a function that will be executed during the …\nA kernel event is pending\nA reason as to why the control of the CPU is returned from …\nThe common interface that every CPU architecture-specific …\nA CPU exception is triggered by the user space.\nCode execution in the user mode.\nA system call is issued by the user space.\nReturns an immutable reference the user-mode CPU context.\nReturns a mutable reference the user-mode CPU context.\nStarts executing in the user mode. Make sure current task …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the instruction pointer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>UserMode</code>.\nSets the instruction pointer\nSets the stack pointer\nGets the stack pointer\nGets the trap error code of this interrupt.\nGets the trap number of this interrupt.\nA type containing either a <code>Left</code> value <code>L</code> or a <code>Right</code> value <code>R</code>.\nContains the left value\nContains the right value\nReturns the argument unchanged.\nA fixed-size set of unique IDs.\nCalls <code>U::from(self)</code>.\nReturns true if the left value is present.\nReturns true if the right value is present.\nConverts to the left value, if any.\nConverts to the right value, if any.\nA set of IDs that may be accessed concurrently.\nA trait to abstract an ID type.\nA set of IDs.\nA trait that unifies all types that slice a portion of …\nAdds an ID to the set.\nAtomically adds an ID with the given ordering.\nAdds all IDs to the set.\nReturns an <code>usize</code> from the <code>Id</code>’s corresponding <code>u32</code>.\nThe number of unique IDs representable by this type.\nRemoves all IDs from the set.\nReturns true if the set contains the specified ID.\nAtomically checks if the set contains the specified ID.\nReturns the number of IDs in the set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the set is empty.\nReturns true if the set is full.\nIterates over all IDs in the set.\nIterates over the IDs in the set within the specified …\nLoads the value of the set with the given ordering.\nCreates an ID instance given a raw ID number.\nCreates a new <code>AtomicIdSet</code> from an <code>IdSet</code>.\nCreates a new <code>IdSet</code> with no IDs in the system.\nCreates a new <code>IdSet</code> with all IDs in the system.\nCreates an ID instance given a raw ID number.\nRemoves an ID from the set.\nAtomically removes an ID with the given ordering.\nStores a new value to the set with the given ordering.\nConverts the index type to inclusive start and exclusive …")